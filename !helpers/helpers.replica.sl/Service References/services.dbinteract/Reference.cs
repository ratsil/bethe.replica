//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace helpers.replica.services.dbinteract {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://replica/services/DBInteract.asmx", ConfigurationName="services.dbinteract.DBInteractSoap")]
    public interface DBInteractSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ImportLogGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginImportLogGet(System.AsyncCallback callback, object asyncState);
        
        string EndImportLogGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TemplateRegisteredTableGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTemplateRegisteredTableGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.RegisteredTable EndTemplateRegisteredTableGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/MacrosCrawlsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginMacrosCrawlsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Macro[] EndMacrosCrawlsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TempateMessagesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTempateMessagesGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Template[] EndTempateMessagesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TemplateBindsTrailsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTemplateBindsTrailsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.TemplateBind[] EndTemplateBindsTrailsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/MacrosValuesSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginMacrosValuesSet(helpers.replica.services.dbinteract.Macro[] aMacros, System.AsyncCallback callback, object asyncState);
        
        bool EndMacrosValuesSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TemplateMessagesTextSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTemplateMessagesTextSave(helpers.replica.services.dbinteract.DictionaryElement[] aDict, System.AsyncCallback callback, object asyncState);
        
        bool EndTemplateMessagesTextSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TemplateMessagesTextGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTemplateMessagesTextGet(helpers.replica.services.dbinteract.Template[] aMessages, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.DictionaryElement[] EndTemplateMessagesTextGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TemplatesScheduleAdd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTemplatesScheduleAdd(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule, System.AsyncCallback callback, object asyncState);
        
        bool EndTemplatesScheduleAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TemplatesScheduleGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTemplatesScheduleGet(helpers.replica.services.dbinteract.TemplateBind[] aTemplateBinds, System.DateTime dtBegin, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.TemplatesSchedule[] EndTemplatesScheduleGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TemplatesScheduleDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTemplatesScheduleDelete(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule, System.AsyncCallback callback, object asyncState);
        
        bool EndTemplatesScheduleDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/DirectoriesTrailsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDirectoriesTrailsGet(string sPath, System.AsyncCallback callback, object asyncState);
        
        string[] EndDirectoriesTrailsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ShiftAdd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginShiftAdd(helpers.replica.services.dbinteract.IdNamePair cPreset, string sSubject, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Shift EndShiftAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ShiftStart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginShiftStart(helpers.replica.services.dbinteract.Shift cShift, System.AsyncCallback callback, object asyncState);
        
        bool EndShiftStart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ShiftStop", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginShiftStop(helpers.replica.services.dbinteract.Shift cShift, System.AsyncCallback callback, object asyncState);
        
        bool EndShiftStop(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ShiftCurrentGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginShiftCurrentGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Shift EndShiftCurrentGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AnnouncementsActualGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAnnouncementsActualGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Announcement[] EndAnnouncementsActualGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/MessagesQueueGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginMessagesQueueGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Message[] EndMessagesQueueGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/MessageMark", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginMessageMark(long nID, System.AsyncCallback callback, object asyncState);
        
        void EndMessageMark(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/MessageUnMark", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginMessageUnMark(long nID, System.AsyncCallback callback, object asyncState);
        
        void EndMessageUnMark(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TimeBlockGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTimeBlockGet(System.DateTime dt, bool bForward, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndTimeBlockGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaqueAdd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaqueAdd(helpers.replica.services.dbinteract.Plaque cPlaque, System.AsyncCallback callback, object asyncState);
        
        int EndPlaqueAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaquesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaquesGet(helpers.replica.services.dbinteract.IdNamePair cPreset, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Plaque[] EndPlaquesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaqueDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaqueDelete(helpers.replica.services.dbinteract.Plaque cPlaque, System.AsyncCallback callback, object asyncState);
        
        bool EndPlaqueDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaqueChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaqueChange(helpers.replica.services.dbinteract.Plaque cPlaque, System.AsyncCallback callback, object asyncState);
        
        bool EndPlaqueChange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/CuesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginCuesGet(long nAssetID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Cues EndCuesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/StorageSCRGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginStorageSCRGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.StoragesMappings[] EndStorageSCRGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/LogoBindingGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginLogoBindingGet(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState);
        
        bool[] EndLogoBindingGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ClipsBDLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginClipsBDLog(long nShiftID, helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState);
        
        void EndClipsBDLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PLFragmentGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPLFragmentGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndPLFragmentGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/StatGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginStatGet(helpers.replica.services.dbinteract.DBFilters cFilters, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndStatGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/MessagesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginMessagesGet(helpers.replica.services.dbinteract.DBFilters cFilters, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Message[] EndMessagesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/WorkerProgressGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginWorkerProgressGet(ulong nWorkerInfoID, System.AsyncCallback callback, object asyncState);
        
        double EndWorkerProgressGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/Export", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginExport(string sTemplate, helpers.replica.services.dbinteract.DBFilters cFilters, System.AsyncCallback callback, object asyncState);
        
        ulong EndExport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ExportResultGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginExportResultGet(ulong nWorkerInfoID, System.AsyncCallback callback, object asyncState);
        
        string EndExportResultGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/RingtonesBindsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginRingtonesBindsGet(helpers.replica.services.dbinteract.RingtonesBindsGetRequest request, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.RingtonesBindsGetResponse EndRingtonesBindsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FrequencyOfOccurrence", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFrequencyOfOccurrence(long nVideoTypeID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndFrequencyOfOccurrence(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/GridGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGridGet(System.AsyncCallback callback, object asyncState);
        
        string EndGridGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/GridSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGridSave(string sXML, System.AsyncCallback callback, object asyncState);
        
        void EndGridSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TransliterationGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTransliterationGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.TransliterationPair[] EndTransliterationGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/DateTimeNowGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDateTimeNowGet(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndDateTimeNowGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ErrorLogging", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginErrorLogging(string sError, System.AsyncCallback callback, object asyncState);
        
        void EndErrorLogging(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/KnownTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginKnownTypes(helpers.replica.services.dbinteract.DBFilter t1, helpers.replica.services.dbinteract.DBFiltersOperators t2, helpers.replica.services.dbinteract.IngestClip t3, helpers.replica.services.dbinteract.IngestAdvertisement t4, helpers.replica.services.dbinteract.IngestProgram t5, helpers.replica.services.dbinteract.IngestDesign t6, System.AsyncCallback callback, object asyncState);
        
        void EndKnownTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/UploadFileBegin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUploadFileBegin(helpers.replica.services.dbinteract.UploadFileBeginRequest request, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.UploadFileBeginResponse EndUploadFileBegin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/UploadFileContinue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUploadFileContinue(helpers.replica.services.dbinteract.UploadFileContinueRequest request, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.UploadFileContinueResponse EndUploadFileContinue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/UploadFileEnd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginUploadFileEnd(int nFileIndx, System.AsyncCallback callback, object asyncState);
        
        string EndUploadFileEnd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/IsThereAnyErrors", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginIsThereAnyErrors(System.AsyncCallback callback, object asyncState);
        
        bool EndIsThereAnyErrors(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ErrorsClear", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginErrorsClear(System.AsyncCallback callback, object asyncState);
        
        void EndErrorsClear(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ErrorsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginErrorsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.WebServiceError[] EndErrorsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ErrorsAllGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginErrorsAllGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.WebServiceError[] EndErrorsAllGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ErrorLastGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginErrorLastGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.WebServiceError EndErrorLastGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/Logger_Notice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginLogger_Notice(string sFrom, string sText, System.AsyncCallback callback, object asyncState);
        
        void EndLogger_Notice(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/Logger_Error", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginLogger_Error(string sFrom, string sEx, System.AsyncCallback callback, object asyncState);
        
        void EndLogger_Error(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/InitSession", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginInitSession(System.AsyncCallback callback, object asyncState);
        
        void EndInitSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/Init", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginInit(string sName, string sPassword, string sClientVersion, System.AsyncCallback callback, object asyncState);
        
        string EndInit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AccessScopesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAccessScopesGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.AccessScope[] EndAccessScopesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ProfileGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginProfileGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Profile EndProfileGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/Ping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState);
        
        bool EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AssetsRemove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAssetsRemove(helpers.replica.services.dbinteract.Asset[] aAssets, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.AlterString[] EndAssetsRemove(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AssetsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAssetsGet(string sVideoTypeFilter, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Asset[] EndAssetsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ProgramsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginProgramsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Program[] EndProgramsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ClipGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginClipGet(long nAssetID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Clip EndClipGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ClipsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginClipsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Clip[] EndClipsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvertisementGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvertisementGet(long nAssetID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Advertisement EndAdvertisementGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvertisementsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvertisementsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Asset[] EndAdvertisementsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/DesignGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDesignGet(long nAssetID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Design EndDesignGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/DesignsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDesignsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Asset[] EndDesignsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AssetVideoTypeGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAssetVideoTypeGet(long nAssetID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair EndAssetVideoTypeGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ClassesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginClassesGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Class[] EndClassesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ClassesSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginClassesSet(helpers.replica.services.dbinteract.Asset[] aAssets, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Asset[] EndClassesSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/RotationsSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginRotationsSet(helpers.replica.services.dbinteract.Clip[] aClips, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Clip[] EndRotationsSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/StatusesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginStatusesGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndStatusesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/StatusesClearGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginStatusesClearGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndStatusesClearGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ChatInOutsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginChatInOutsGet(helpers.replica.services.dbinteract.Asset cAsset, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.ChatInOut[] EndChatInOutsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ChatInOutsSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginChatInOutsSave(helpers.replica.services.dbinteract.Asset cAsset, helpers.replica.services.dbinteract.ChatInOut[] aChatInOuts, System.AsyncCallback callback, object asyncState);
        
        bool EndChatInOutsSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/RingtoneAdd", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginRingtoneAdd(helpers.replica.services.dbinteract.Clip cClip, int nRTCode, System.AsyncCallback callback, object asyncState);
        
        void EndRingtoneAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ClipSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginClipSave(helpers.replica.services.dbinteract.Clip cClip, System.AsyncCallback callback, object asyncState);
        
        long EndClipSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/VideoTypeGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginVideoTypeGet(string sType, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair EndVideoTypeGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/VideoTypesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginVideoTypesGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndVideoTypesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ProgramGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginProgramGet(long nAssetID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Program EndProgramGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AssetsSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAssetsSave(helpers.replica.services.dbinteract.Asset[] aAsset, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.AlterString[] EndAssetsSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AssetParametersToPlaylistSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAssetParametersToPlaylistSave(long nAssetID, System.AsyncCallback callback, object asyncState);
        
        bool EndAssetParametersToPlaylistSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ProgramSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginProgramSave(helpers.replica.services.dbinteract.Program cProgram, System.AsyncCallback callback, object asyncState);
        
        long EndProgramSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AssetsParentAssign", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAssetsParentAssign(helpers.replica.services.dbinteract.Asset[] aAsset, System.AsyncCallback callback, object asyncState);
        
        bool EndAssetsParentAssign(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvertisementSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvertisementSave(helpers.replica.services.dbinteract.Advertisement cAdvertisement, System.AsyncCallback callback, object asyncState);
        
        long EndAdvertisementSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/DesignSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDesignSave(helpers.replica.services.dbinteract.Design cDesign, System.AsyncCallback callback, object asyncState);
        
        long EndDesignSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PersonSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPersonSave(helpers.replica.services.dbinteract.Person cPerson, System.AsyncCallback callback, object asyncState);
        
        long EndPersonSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PersonTypeGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPersonTypeGet(string sPersonTypeFilter, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair EndPersonTypeGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PersonsRemove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPersonsRemove(helpers.replica.services.dbinteract.Person[] aPersons, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Person[] EndPersonsRemove(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PersonsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPersonsGet(string sPersonTypeFilter, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Person[] EndPersonsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ArtistsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginArtistsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Person[] EndArtistsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ArtistsLoad", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginArtistsLoad(long nAssetID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Person[] EndArtistsLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/StylesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginStylesGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndStylesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/StylesLoad", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginStylesLoad(long nAssetID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndStylesLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/RotationsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginRotationsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndRotationsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PalettesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPalettesGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndPalettesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/SexGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginSexGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndSexGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/SoundsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginSoundsGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndSoundsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/CustomsLoad", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginCustomsLoad(helpers.replica.services.dbinteract.CustomsLoadRequest request, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.CustomsLoadResponse EndCustomsLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ArtistsCueNameGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginArtistsCueNameGet(helpers.replica.services.dbinteract.MyInt[] aPersonIDs, System.AsyncCallback callback, object asyncState);
        
        string[] EndArtistsCueNameGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FilesAgeGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFilesAgeGet(helpers.replica.services.dbinteract.FilesAgeGetRequest request, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.FilesAgeGetResponse EndFilesAgeGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FilesAgeSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFilesAgeSet(helpers.replica.services.dbinteract.Asset cAsset, int nAge, System.AsyncCallback callback, object asyncState);
        
        void EndFilesAgeSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/StoragesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginStoragesGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Storage[] EndStoragesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FilesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFilesGet(long nStorageID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.File[] EndFilesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FilesWithSourcesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFilesWithSourcesGet(long nStorageID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.File[] EndFilesWithSourcesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FilesRemove", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFilesRemove(long[] aFileIDs, System.AsyncCallback callback, object asyncState);
        
        void EndFilesRemove(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FileAdditionalInfoGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFileAdditionalInfoGet(helpers.replica.services.dbinteract.File cFile, helpers.replica.services.dbinteract.RegisteredTable cRTStrings, helpers.replica.services.dbinteract.RegisteredTable cRTAssets, helpers.replica.services.dbinteract.RegisteredTable cRTDates, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.File EndFileAdditionalInfoGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FileCheckIsInPlaylist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFileCheckIsInPlaylist(long nFileID, int nMinutes, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.FileIsInPlaylist EndFileCheckIsInPlaylist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FileDurationQuery", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFileDurationQuery(long nFileID, System.AsyncCallback callback, object asyncState);
        
        long EndFileDurationQuery(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/CommandStatusGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginCommandStatusGet(long nCommandsQueueID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair EndCommandStatusGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FramesQtyGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFramesQtyGet(long nCommandsQueueID, System.AsyncCallback callback, object asyncState);
        
        long EndFramesQtyGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/StorageFilesUnusedGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginStorageFilesUnusedGet(long nStorageID, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.File[] EndStorageFilesUnusedGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/FileIDsInStockGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginFileIDsInStockGet(long[] aFileIDs, System.AsyncCallback callback, object asyncState);
        
        long[] EndFileIDsInStockGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/TSRItemsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginTSRItemsGet(string[] aFilenames, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.TSRItem[] EndTSRItemsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/IngestForReplacedFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginIngestForReplacedFile(helpers.replica.services.dbinteract.File cFile, System.AsyncCallback callback, object asyncState);
        
        bool EndIngestForReplacedFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/Ingest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginIngest(helpers.replica.services.dbinteract.Ingest cInfo, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.File EndIngest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/IsThereSameFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginIsThereSameFile(string sFilename, System.AsyncCallback callback, object asyncState);
        
        bool EndIsThereSameFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AreThereSameFiles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAreThereSameFiles(string[] sFilenames, System.AsyncCallback callback, object asyncState);
        
        string[] EndAreThereSameFiles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/IsThereSameCustomValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginIsThereSameCustomValue(string sName, string sValue, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Asset EndIsThereSameCustomValue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/IsThereSameCustomValues", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginIsThereSameCustomValues(string sName, string[] sValues, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Asset[] EndIsThereSameCustomValues(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/RegisteredTablesGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginRegisteredTablesGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.RegisteredTable[] EndRegisteredTablesGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemsGet(helpers.replica.services.dbinteract.IdNamePair[] aStatuses, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistItemsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemMinimumForImmediatePLGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemMinimumForImmediatePLGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem EndPlaylistItemMinimumForImmediatePLGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemsArchGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemsArchGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistItemsArchGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemsPlanGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemsPlanGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistItemsPlanGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemsAdvertsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemsAdvertsGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistItemsAdvertsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/NearestAdvertsBlock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginNearestAdvertsBlock(System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndNearestAdvertsBlock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemsDeleteSince", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemsDeleteSince(System.DateTime dtBegin, System.AsyncCallback callback, object asyncState);
        
        int EndPlaylistItemsDeleteSince(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemsDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemsDelete(helpers.replica.services.dbinteract.IdNamePair[] aIDs, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.IdNamePair[] EndPlaylistItemsDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemsTimingsSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemsTimingsSet(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState);
        
        bool EndPlaylistItemsTimingsSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemStartsSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemStartsSet(long nItemID, System.DateTime dtStartPlanned, System.DateTime dtOld, System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndPlaylistItemStartsSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistRecalculateQuery", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistRecalculateQuery(long nPLitemsID, ushort nHoursQty, System.AsyncCallback callback, object asyncState);
        
        long EndPlaylistRecalculateQuery(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemAdd_ResultGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemAdd_ResultGet(System.AsyncCallback callback, object asyncState);
        
        string EndPlaylistItemAdd_ResultGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistItemsAddWorker", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistItemsAddWorker(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState);
        
        void EndPlaylistItemsAddWorker(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/ComingUpGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginComingUpGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndComingUpGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistInsert(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistInsert(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistInsertCopies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistInsertCopies(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding, int nCopiesQty, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistInsertCopies(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/InsertInBlock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginInsertInBlock(helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToAdd, helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToMove, System.AsyncCallback callback, object asyncState);
        
        string EndInsertInBlock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/GroupMoving", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGroupMoving(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState);
        
        string EndGroupMoving(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PLIPropertiesSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPLIPropertiesSet(helpers.replica.services.dbinteract.PlaylistItem cPLI, System.AsyncCallback callback, object asyncState);
        
        bool EndPLIPropertiesSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistLastElementGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistLastElementGet(System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem EndPlaylistLastElementGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/BeforeAddCheckRange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginBeforeAddCheckRange(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState);
        
        bool EndBeforeAddCheckRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvancedPlaylistsGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvancedPlaylistsGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Playlist[] EndAdvancedPlaylistsGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvancedPlaylistGet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvancedPlaylistGet(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.Playlist EndAdvancedPlaylistGet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvancedPlaylistAddReplace", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvancedPlaylistAddReplace(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState);
        
        long EndAdvancedPlaylistAddReplace(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvancedPlaylistDelete", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvancedPlaylistDelete(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState);
        
        bool EndAdvancedPlaylistDelete(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvancedPlaylistRename", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvancedPlaylistRename(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState);
        
        bool EndAdvancedPlaylistRename(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvancedPlaylistStart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvancedPlaylistStart(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState);
        
        bool EndAdvancedPlaylistStart(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/AdvancedPlaylistItemSave", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginAdvancedPlaylistItemSave(helpers.replica.services.dbinteract.PluginPlaylistItem cPLI, System.AsyncCallback callback, object asyncState);
        
        bool EndAdvancedPlaylistItemSave(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PowerGoldFileParse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPowerGoldFileParse(string sFile, System.AsyncCallback callback, object asyncState);
        
        int EndPowerGoldFileParse(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/VideoInternationalFileParse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginVideoInternationalFileParse(string sFile, System.AsyncCallback callback, object asyncState);
        
        int EndVideoInternationalFileParse(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/DesignFileParse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginDesignFileParse(string sFile, System.AsyncCallback callback, object asyncState);
        
        int EndDesignFileParse(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://replica/services/DBInteract.asmx/PlaylistsMerge", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginPlaylistsMerge(int nPGAssetsHandle, int nVIAssetsHandle, System.DateTime dtAdvertisementBind, int nDesignAssetsHandle, System.AsyncCallback callback, object asyncState);
        
        helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistsMerge(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class RegisteredTable : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sSchemaField;
        
        private string sNameField;
        
        private System.DateTime dtUpdatedField;
        
        private string sNoteField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sSchema {
            get {
                return this.sSchemaField;
            }
            set {
                this.sSchemaField = value;
                this.RaisePropertyChanged("sSchema");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime dtUpdated {
            get {
                return this.dtUpdatedField;
            }
            set {
                this.dtUpdatedField = value;
                this.RaisePropertyChanged("dtUpdated");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string sNote {
            get {
                return this.sNoteField;
            }
            set {
                this.sNoteField = value;
                this.RaisePropertyChanged("sNote");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class PluginPlaylistItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private IdNamePair oStatusField;
        
        private System.DateTime dtStartedField;
        
        private Asset oAssetField;
        
        private long nFramesQtyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IdNamePair oStatus {
            get {
                return this.oStatusField;
            }
            set {
                this.oStatusField = value;
                this.RaisePropertyChanged("oStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime dtStarted {
            get {
                return this.dtStartedField;
            }
            set {
                this.dtStartedField = value;
                this.RaisePropertyChanged("dtStarted");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public Asset oAsset {
            get {
                return this.oAssetField;
            }
            set {
                this.oAssetField = value;
                this.RaisePropertyChanged("oAsset");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public long nFramesQty {
            get {
                return this.nFramesQtyField;
            }
            set {
                this.nFramesQtyField = value;
                this.RaisePropertyChanged("nFramesQty");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Class))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class IdNamePair : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Class : IdNamePair {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Design))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Advertisement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Program))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Clip))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Asset : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sNameField;
        
        private Video stVideoField;
        
        private CustomValue[] aCustomValuesField;
        
        private File cFileField;
        
        private long nFrameOutField;
        
        private long nFramesQtyField;
        
        private System.DateTime dtLastPlayedField;
        
        private bool bEnabledField;
        
        private Class[] aClassesField;
        
        private long nIDParentField;
        
        private Type cTypeField;
        
        private long nFrameInField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Video stVideo {
            get {
                return this.stVideoField;
            }
            set {
                this.stVideoField = value;
                this.RaisePropertyChanged("stVideo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public CustomValue[] aCustomValues {
            get {
                return this.aCustomValuesField;
            }
            set {
                this.aCustomValuesField = value;
                this.RaisePropertyChanged("aCustomValues");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public File cFile {
            get {
                return this.cFileField;
            }
            set {
                this.cFileField = value;
                this.RaisePropertyChanged("cFile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public long nFrameOut {
            get {
                return this.nFrameOutField;
            }
            set {
                this.nFrameOutField = value;
                this.RaisePropertyChanged("nFrameOut");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public long nFramesQty {
            get {
                return this.nFramesQtyField;
            }
            set {
                this.nFramesQtyField = value;
                this.RaisePropertyChanged("nFramesQty");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public System.DateTime dtLastPlayed {
            get {
                return this.dtLastPlayedField;
            }
            set {
                this.dtLastPlayedField = value;
                this.RaisePropertyChanged("dtLastPlayed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool bEnabled {
            get {
                return this.bEnabledField;
            }
            set {
                this.bEnabledField = value;
                this.RaisePropertyChanged("bEnabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=9)]
        public Class[] aClasses {
            get {
                return this.aClassesField;
            }
            set {
                this.aClassesField = value;
                this.RaisePropertyChanged("aClasses");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public long nIDParent {
            get {
                return this.nIDParentField;
            }
            set {
                this.nIDParentField = value;
                this.RaisePropertyChanged("nIDParent");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public Type cType {
            get {
                return this.cTypeField;
            }
            set {
                this.cTypeField = value;
                this.RaisePropertyChanged("cType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public long nFrameIn {
            get {
                return this.nFrameInField;
            }
            set {
                this.nFrameInField = value;
                this.RaisePropertyChanged("nFrameIn");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Video : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sNameField;
        
        private IdNamePair cTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IdNamePair cType {
            get {
                return this.cTypeField;
            }
            set {
                this.cTypeField = value;
                this.RaisePropertyChanged("cType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class CustomValue : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sNameField;
        
        private string sValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sValue {
            get {
                return this.sValueField;
            }
            set {
                this.sValueField = value;
                this.RaisePropertyChanged("sValue");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class File : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sFilenameField;
        
        private Storage cStorageField;
        
        private System.DateTime dtLastEventField;
        
        private System.DateTime dtModificationField;
        
        private Error eErrorField;
        
        private Status eStatusField;
        
        private int nAgeField;
        
        private System.Nullable<int> nFPSField;
        
        private string sSourceFileField;
        
        private string sSongField;
        
        private string sSeriesField;
        
        private string sEpisodeField;
        
        private string sCustomValueField;
        
        private System.Nullable<int> nAspectRatioDivdField;
        
        private System.Nullable<int> nAspectRatioDivrField;
        
        private System.Nullable<long> nPGIDField;
        
        private System.Nullable<int> nWidthField;
        
        private System.Nullable<int> nHeightField;
        
        private System.Nullable<int> nFramesQTYField;
        
        private System.Nullable<bool> bToDeleteField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sFilename {
            get {
                return this.sFilenameField;
            }
            set {
                this.sFilenameField = value;
                this.RaisePropertyChanged("sFilename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Storage cStorage {
            get {
                return this.cStorageField;
            }
            set {
                this.cStorageField = value;
                this.RaisePropertyChanged("cStorage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime dtLastEvent {
            get {
                return this.dtLastEventField;
            }
            set {
                this.dtLastEventField = value;
                this.RaisePropertyChanged("dtLastEvent");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime dtModification {
            get {
                return this.dtModificationField;
            }
            set {
                this.dtModificationField = value;
                this.RaisePropertyChanged("dtModification");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public Error eError {
            get {
                return this.eErrorField;
            }
            set {
                this.eErrorField = value;
                this.RaisePropertyChanged("eError");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public Status eStatus {
            get {
                return this.eStatusField;
            }
            set {
                this.eStatusField = value;
                this.RaisePropertyChanged("eStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int nAge {
            get {
                return this.nAgeField;
            }
            set {
                this.nAgeField = value;
                this.RaisePropertyChanged("nAge");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=8)]
        public System.Nullable<int> nFPS {
            get {
                return this.nFPSField;
            }
            set {
                this.nFPSField = value;
                this.RaisePropertyChanged("nFPS");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string sSourceFile {
            get {
                return this.sSourceFileField;
            }
            set {
                this.sSourceFileField = value;
                this.RaisePropertyChanged("sSourceFile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string sSong {
            get {
                return this.sSongField;
            }
            set {
                this.sSongField = value;
                this.RaisePropertyChanged("sSong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string sSeries {
            get {
                return this.sSeriesField;
            }
            set {
                this.sSeriesField = value;
                this.RaisePropertyChanged("sSeries");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string sEpisode {
            get {
                return this.sEpisodeField;
            }
            set {
                this.sEpisodeField = value;
                this.RaisePropertyChanged("sEpisode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string sCustomValue {
            get {
                return this.sCustomValueField;
            }
            set {
                this.sCustomValueField = value;
                this.RaisePropertyChanged("sCustomValue");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=14)]
        public System.Nullable<int> nAspectRatioDivd {
            get {
                return this.nAspectRatioDivdField;
            }
            set {
                this.nAspectRatioDivdField = value;
                this.RaisePropertyChanged("nAspectRatioDivd");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=15)]
        public System.Nullable<int> nAspectRatioDivr {
            get {
                return this.nAspectRatioDivrField;
            }
            set {
                this.nAspectRatioDivrField = value;
                this.RaisePropertyChanged("nAspectRatioDivr");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=16)]
        public System.Nullable<long> nPGID {
            get {
                return this.nPGIDField;
            }
            set {
                this.nPGIDField = value;
                this.RaisePropertyChanged("nPGID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=17)]
        public System.Nullable<int> nWidth {
            get {
                return this.nWidthField;
            }
            set {
                this.nWidthField = value;
                this.RaisePropertyChanged("nWidth");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=18)]
        public System.Nullable<int> nHeight {
            get {
                return this.nHeightField;
            }
            set {
                this.nHeightField = value;
                this.RaisePropertyChanged("nHeight");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=19)]
        public System.Nullable<int> nFramesQTY {
            get {
                return this.nFramesQTYField;
            }
            set {
                this.nFramesQTYField = value;
                this.RaisePropertyChanged("nFramesQTY");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=20)]
        public System.Nullable<bool> bToDelete {
            get {
                return this.bToDeleteField;
            }
            set {
                this.bToDeleteField = value;
                this.RaisePropertyChanged("bToDelete");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Storage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sNameField;
        
        private string sPathField;
        
        private bool bEnabledField;
        
        private IdNamePair cTypeField;
        
        private IdNamePair cVideoTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sPath {
            get {
                return this.sPathField;
            }
            set {
                this.sPathField = value;
                this.RaisePropertyChanged("sPath");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool bEnabled {
            get {
                return this.bEnabledField;
            }
            set {
                this.bEnabledField = value;
                this.RaisePropertyChanged("bEnabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public IdNamePair cType {
            get {
                return this.cTypeField;
            }
            set {
                this.cTypeField = value;
                this.RaisePropertyChanged("cType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public IdNamePair cVideoType {
            get {
                return this.cVideoTypeField;
            }
            set {
                this.cVideoTypeField = value;
                this.RaisePropertyChanged("cVideoType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public enum Error {
        
        /// <remarks/>
        no,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        missed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public enum Status {
        
        /// <remarks/>
        Waiting,
        
        /// <remarks/>
        InStock,
        
        /// <remarks/>
        MovedToTape,
        
        /// <remarks/>
        Deleted,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Type : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private AssetType eTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AssetType eType {
            get {
                return this.eTypeField;
            }
            set {
                this.eTypeField = value;
                this.RaisePropertyChanged("eType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public enum AssetType {
        
        /// <remarks/>
        part,
        
        /// <remarks/>
        episode,
        
        /// <remarks/>
        series,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Design : Asset {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Advertisement : Asset {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Program : Asset {
        
        private ClipsFragment[] aClipsFragmentsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public ClipsFragment[] aClipsFragments {
            get {
                return this.aClipsFragmentsField;
            }
            set {
                this.aClipsFragmentsField = value;
                this.RaisePropertyChanged("aClipsFragments");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class ClipsFragment : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Clip cClipField;
        
        private long nFramesQtyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Clip cClip {
            get {
                return this.cClipField;
            }
            set {
                this.cClipField = value;
                this.RaisePropertyChanged("cClip");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long nFramesQty {
            get {
                return this.nFramesQtyField;
            }
            set {
                this.nFramesQtyField = value;
                this.RaisePropertyChanged("nFramesQty");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Clip : Asset {
        
        private Person[] aPersonsField;
        
        private IdNamePair[] aStylesField;
        
        private IdNamePair[] aAlbumsField;
        
        private IdNamePair cRotationField;
        
        private IdNamePair cPaletteField;
        
        private IdNamePair cSexField;
        
        private bool bSmokingField;
        
        private SoundLevels stSoundLevelsField;
        
        private Cues stCuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public Person[] aPersons {
            get {
                return this.aPersonsField;
            }
            set {
                this.aPersonsField = value;
                this.RaisePropertyChanged("aPersons");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public IdNamePair[] aStyles {
            get {
                return this.aStylesField;
            }
            set {
                this.aStylesField = value;
                this.RaisePropertyChanged("aStyles");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        public IdNamePair[] aAlbums {
            get {
                return this.aAlbumsField;
            }
            set {
                this.aAlbumsField = value;
                this.RaisePropertyChanged("aAlbums");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public IdNamePair cRotation {
            get {
                return this.cRotationField;
            }
            set {
                this.cRotationField = value;
                this.RaisePropertyChanged("cRotation");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public IdNamePair cPalette {
            get {
                return this.cPaletteField;
            }
            set {
                this.cPaletteField = value;
                this.RaisePropertyChanged("cPalette");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public IdNamePair cSex {
            get {
                return this.cSexField;
            }
            set {
                this.cSexField = value;
                this.RaisePropertyChanged("cSex");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool bSmoking {
            get {
                return this.bSmokingField;
            }
            set {
                this.bSmokingField = value;
                this.RaisePropertyChanged("bSmoking");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public SoundLevels stSoundLevels {
            get {
                return this.stSoundLevelsField;
            }
            set {
                this.stSoundLevelsField = value;
                this.RaisePropertyChanged("stSoundLevels");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public Cues stCues {
            get {
                return this.stCuesField;
            }
            set {
                this.stCuesField = value;
                this.RaisePropertyChanged("stCues");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Person : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sNameField;
        
        private IdNamePair cTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public IdNamePair cType {
            get {
                return this.cTypeField;
            }
            set {
                this.cTypeField = value;
                this.RaisePropertyChanged("cType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class SoundLevels : object, System.ComponentModel.INotifyPropertyChanged {
        
        private IdNamePair cStartField;
        
        private IdNamePair cStopField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public IdNamePair cStart {
            get {
                return this.cStartField;
            }
            set {
                this.cStartField = value;
                this.RaisePropertyChanged("cStart");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IdNamePair cStop {
            get {
                return this.cStopField;
            }
            set {
                this.cStopField = value;
                this.RaisePropertyChanged("cStop");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Cues : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sSongField;
        
        private string sArtistField;
        
        private string sAlbumField;
        
        private string sYearField;
        
        private string sPossessorField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sSong {
            get {
                return this.sSongField;
            }
            set {
                this.sSongField = value;
                this.RaisePropertyChanged("sSong");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sArtist {
            get {
                return this.sArtistField;
            }
            set {
                this.sArtistField = value;
                this.RaisePropertyChanged("sArtist");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string sAlbum {
            get {
                return this.sAlbumField;
            }
            set {
                this.sAlbumField = value;
                this.RaisePropertyChanged("sAlbum");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string sYear {
            get {
                return this.sYearField;
            }
            set {
                this.sYearField = value;
                this.RaisePropertyChanged("sYear");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string sPossessor {
            get {
                return this.sPossessorField;
            }
            set {
                this.sPossessorField = value;
                this.RaisePropertyChanged("sPossessor");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Playlist : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sNameField;
        
        private System.DateTime dtStartField;
        
        private System.DateTime dtStopField;
        
        private PluginPlaylistItem[] aItemsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime dtStart {
            get {
                return this.dtStartField;
            }
            set {
                this.dtStartField = value;
                this.RaisePropertyChanged("dtStart");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime dtStop {
            get {
                return this.dtStopField;
            }
            set {
                this.dtStopField = value;
                this.RaisePropertyChanged("dtStop");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute("oItem")]
        public PluginPlaylistItem[] aItems {
            get {
                return this.aItemsField;
            }
            set {
                this.aItemsField = value;
                this.RaisePropertyChanged("aItems");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class MyInt : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class TimeRange : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nTicksInField;
        
        private long nTicksOutField;
        
        private System.DateTime dtInField;
        
        private System.DateTime dtOutField;
        
        private long nFrameInField;
        
        private long nFrameOutField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nTicksIn {
            get {
                return this.nTicksInField;
            }
            set {
                this.nTicksInField = value;
                this.RaisePropertyChanged("nTicksIn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long nTicksOut {
            get {
                return this.nTicksOutField;
            }
            set {
                this.nTicksOutField = value;
                this.RaisePropertyChanged("nTicksOut");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime dtIn {
            get {
                return this.dtInField;
            }
            set {
                this.dtInField = value;
                this.RaisePropertyChanged("dtIn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime dtOut {
            get {
                return this.dtOutField;
            }
            set {
                this.dtOutField = value;
                this.RaisePropertyChanged("dtOut");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public long nFrameIn {
            get {
                return this.nFrameInField;
            }
            set {
                this.nFrameInField = value;
                this.RaisePropertyChanged("nFrameIn");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public long nFrameOut {
            get {
                return this.nFrameOutField;
            }
            set {
                this.nFrameOutField = value;
                this.RaisePropertyChanged("nFrameOut");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class ChatInOut : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private TimeRange cTimeRangeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public TimeRange cTimeRange {
            get {
                return this.cTimeRangeField;
            }
            set {
                this.cTimeRangeField = value;
                this.RaisePropertyChanged("cTimeRange");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class AlterString : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string sValue {
            get {
                return this.sValueField;
            }
            set {
                this.sValueField = value;
                this.RaisePropertyChanged("sValue");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Profile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sUsernameField;
        
        private string sHomePageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string sUsername {
            get {
                return this.sUsernameField;
            }
            set {
                this.sUsernameField = value;
                this.RaisePropertyChanged("sUsername");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sHomePage {
            get {
                return this.sHomePageField;
            }
            set {
                this.sHomePageField = value;
                this.RaisePropertyChanged("sHomePage");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class AccessScope : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sNameQualifiedField;
        
        private AccessScopePermissions ePermissionsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string sNameQualified {
            get {
                return this.sNameQualifiedField;
            }
            set {
                this.sNameQualifiedField = value;
                this.RaisePropertyChanged("sNameQualified");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public AccessScopePermissions ePermissions {
            get {
                return this.ePermissionsField;
            }
            set {
                this.ePermissionsField = value;
                this.RaisePropertyChanged("ePermissions");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public enum AccessScopePermissions {
        
        /// <remarks/>
        create = 1,
        
        /// <remarks/>
        update = 2,
        
        /// <remarks/>
        delete = 4,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class WebServiceError : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime dtField;
        
        private string sMessageField;
        
        private string sStackTraceField;
        
        private WebServiceError cInnerErrorField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.DateTime dt {
            get {
                return this.dtField;
            }
            set {
                this.dtField = value;
                this.RaisePropertyChanged("dt");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sMessage {
            get {
                return this.sMessageField;
            }
            set {
                this.sMessageField = value;
                this.RaisePropertyChanged("sMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sStackTrace {
            get {
                return this.sStackTraceField;
            }
            set {
                this.sStackTraceField = value;
                this.RaisePropertyChanged("sStackTrace");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public WebServiceError cInnerError {
            get {
                return this.cInnerErrorField;
            }
            set {
                this.cInnerErrorField = value;
                this.RaisePropertyChanged("cInnerError");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class TSRItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sS_CodeField;
        
        private string sVI_CodeField;
        
        private string sNameField;
        
        private object oTagField;
        
        private TSRType eTypeField;
        
        private Block eBlockField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string sS_Code {
            get {
                return this.sS_CodeField;
            }
            set {
                this.sS_CodeField = value;
                this.RaisePropertyChanged("sS_Code");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sVI_Code {
            get {
                return this.sVI_CodeField;
            }
            set {
                this.sVI_CodeField = value;
                this.RaisePropertyChanged("sVI_Code");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public object oTag {
            get {
                return this.oTagField;
            }
            set {
                this.oTagField = value;
                this.RaisePropertyChanged("oTag");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public TSRType eType {
            get {
                return this.eTypeField;
            }
            set {
                this.eTypeField = value;
                this.RaisePropertyChanged("eType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public Block eBlock {
            get {
                return this.eBlockField;
            }
            set {
                this.eBlockField = value;
                this.RaisePropertyChanged("eBlock");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public enum TSRType {
        
        /// <remarks/>
        МОСКВА,
        
        /// <remarks/>
        СЕТЬ,
        
        /// <remarks/>
        NULL,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public enum Block {
        
        /// <remarks/>
        РЕКЛАМА,
        
        /// <remarks/>
        АНОНС,
        
        /// <remarks/>
        NULL,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IngestAdvertisement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IngestProgram))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IngestDesign))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IngestClip))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Ingest : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Storage cStorageField;
        
        private string sFilenameField;
        
        private string sOriginalFileField;
        
        private sbyte nAgeField;
        
        private bool bBroadcastField;
        
        private System.Nullable<byte> nVersionField;
        
        private int nFormatField;
        
        private byte nFPSField;
        
        private bool bCreateAssetField;
        
        private System.DateTime dtSourceModificationField;
        
        private Class[] aClassesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Storage cStorage {
            get {
                return this.cStorageField;
            }
            set {
                this.cStorageField = value;
                this.RaisePropertyChanged("cStorage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sFilename {
            get {
                return this.sFilenameField;
            }
            set {
                this.sFilenameField = value;
                this.RaisePropertyChanged("sFilename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sOriginalFile {
            get {
                return this.sOriginalFileField;
            }
            set {
                this.sOriginalFileField = value;
                this.RaisePropertyChanged("sOriginalFile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public sbyte nAge {
            get {
                return this.nAgeField;
            }
            set {
                this.nAgeField = value;
                this.RaisePropertyChanged("nAge");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool bBroadcast {
            get {
                return this.bBroadcastField;
            }
            set {
                this.bBroadcastField = value;
                this.RaisePropertyChanged("bBroadcast");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=5)]
        public System.Nullable<byte> nVersion {
            get {
                return this.nVersionField;
            }
            set {
                this.nVersionField = value;
                this.RaisePropertyChanged("nVersion");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int nFormat {
            get {
                return this.nFormatField;
            }
            set {
                this.nFormatField = value;
                this.RaisePropertyChanged("nFormat");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public byte nFPS {
            get {
                return this.nFPSField;
            }
            set {
                this.nFPSField = value;
                this.RaisePropertyChanged("nFPS");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool bCreateAsset {
            get {
                return this.bCreateAssetField;
            }
            set {
                this.bCreateAssetField = value;
                this.RaisePropertyChanged("bCreateAsset");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public System.DateTime dtSourceModification {
            get {
                return this.dtSourceModificationField;
            }
            set {
                this.dtSourceModificationField = value;
                this.RaisePropertyChanged("dtSourceModification");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=10)]
        public Class[] aClasses {
            get {
                return this.aClassesField;
            }
            set {
                this.aClassesField = value;
                this.RaisePropertyChanged("aClasses");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class IngestAdvertisement : Ingest {
        
        private string sIDField;
        
        private string sCompanyField;
        
        private string sCampaignField;
        
        private TSRItem cTSRField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string sID {
            get {
                return this.sIDField;
            }
            set {
                this.sIDField = value;
                this.RaisePropertyChanged("sID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sCompany {
            get {
                return this.sCompanyField;
            }
            set {
                this.sCompanyField = value;
                this.RaisePropertyChanged("sCompany");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sCampaign {
            get {
                return this.sCampaignField;
            }
            set {
                this.sCampaignField = value;
                this.RaisePropertyChanged("sCampaign");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public TSRItem cTSR {
            get {
                return this.cTSRField;
            }
            set {
                this.cTSRField = value;
                this.RaisePropertyChanged("cTSR");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class IngestProgram : Ingest {
        
        private Asset cSeriesField;
        
        private Asset cEpisodeField;
        
        private string sPartField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Asset cSeries {
            get {
                return this.cSeriesField;
            }
            set {
                this.cSeriesField = value;
                this.RaisePropertyChanged("cSeries");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Asset cEpisode {
            get {
                return this.cEpisodeField;
            }
            set {
                this.cEpisodeField = value;
                this.RaisePropertyChanged("cEpisode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sPart {
            get {
                return this.sPartField;
            }
            set {
                this.sPartField = value;
                this.RaisePropertyChanged("sPart");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class IngestDesign : Ingest {
        
        private string sSeasonField;
        
        private string sTypeField;
        
        private bool bDTMFField;
        
        private string sNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string sSeason {
            get {
                return this.sSeasonField;
            }
            set {
                this.sSeasonField = value;
                this.RaisePropertyChanged("sSeason");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sType {
            get {
                return this.sTypeField;
            }
            set {
                this.sTypeField = value;
                this.RaisePropertyChanged("sType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool bDTMF {
            get {
                return this.bDTMFField;
            }
            set {
                this.bDTMFField = value;
                this.RaisePropertyChanged("bDTMF");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class IngestClip : Ingest {
        
        private Person[] aArtistsField;
        
        private string sSongNameField;
        
        private byte nQualityField;
        
        private int nPG_IDField;
        
        private bool bLocationField;
        
        private bool bRemixField;
        
        private bool bPromoField;
        
        private bool bCuttedField;
        
        private bool bForeignField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        public Person[] aArtists {
            get {
                return this.aArtistsField;
            }
            set {
                this.aArtistsField = value;
                this.RaisePropertyChanged("aArtists");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sSongName {
            get {
                return this.sSongNameField;
            }
            set {
                this.sSongNameField = value;
                this.RaisePropertyChanged("sSongName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public byte nQuality {
            get {
                return this.nQualityField;
            }
            set {
                this.nQualityField = value;
                this.RaisePropertyChanged("nQuality");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int nPG_ID {
            get {
                return this.nPG_IDField;
            }
            set {
                this.nPG_IDField = value;
                this.RaisePropertyChanged("nPG_ID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool bLocation {
            get {
                return this.bLocationField;
            }
            set {
                this.bLocationField = value;
                this.RaisePropertyChanged("bLocation");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool bRemix {
            get {
                return this.bRemixField;
            }
            set {
                this.bRemixField = value;
                this.RaisePropertyChanged("bRemix");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool bPromo {
            get {
                return this.bPromoField;
            }
            set {
                this.bPromoField = value;
                this.RaisePropertyChanged("bPromo");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool bCutted {
            get {
                return this.bCuttedField;
            }
            set {
                this.bCuttedField = value;
                this.RaisePropertyChanged("bCutted");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool bForeign {
            get {
                return this.bForeignField;
            }
            set {
                this.bForeignField = value;
                this.RaisePropertyChanged("bForeign");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class TransliterationPair : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sSourceField;
        
        private string sTargetField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string sSource {
            get {
                return this.sSourceField;
            }
            set {
                this.sSourceField = value;
                this.RaisePropertyChanged("sSource");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sTarget {
            get {
                return this.sTargetField;
            }
            set {
                this.sTargetField = value;
                this.RaisePropertyChanged("sTarget");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DBFilter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class DBFiltersGroup : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<Binds> eBindField;
        
        private object cValueField;
        
        private DBFiltersGroup cNextField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Order=0)]
        public System.Nullable<Binds> eBind {
            get {
                return this.eBindField;
            }
            set {
                this.eBindField = value;
                this.RaisePropertyChanged("eBind");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public object cValue {
            get {
                return this.cValueField;
            }
            set {
                this.cValueField = value;
                this.RaisePropertyChanged("cValue");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public DBFiltersGroup cNext {
            get {
                return this.cNextField;
            }
            set {
                this.cNextField = value;
                this.RaisePropertyChanged("cNext");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public enum Binds {
        
        /// <remarks/>
        and,
        
        /// <remarks/>
        or,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class DBFilter : DBFiltersGroup {
        
        private string sNameField;
        
        private DBFiltersOperators eOPField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBFiltersOperators eOP {
            get {
                return this.eOPField;
            }
            set {
                this.eOPField = value;
                this.RaisePropertyChanged("eOP");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public enum DBFiltersOperators {
        
        /// <remarks/>
        equal,
        
        /// <remarks/>
        notequal,
        
        /// <remarks/>
        contains,
        
        /// <remarks/>
        notcontains,
        
        /// <remarks/>
        more,
        
        /// <remarks/>
        less,
        
        /// <remarks/>
        tinparraycontainsid,
        
        /// <remarks/>
        tinparraynotcontainsid,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class DBFilters : object, System.ComponentModel.INotifyPropertyChanged {
        
        private DBFiltersGroup cGroupField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public DBFiltersGroup cGroup {
            get {
                return this.cGroupField;
            }
            set {
                this.cGroupField = value;
                this.RaisePropertyChanged("cGroup");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class StoragesMappings : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string sNameField;
        
        private long nIDField;
        
        private string sLocalPathField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sLocalPath {
            get {
                return this.sLocalPathField;
            }
            set {
                this.sLocalPathField = value;
                this.RaisePropertyChanged("sLocalPath");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Plaque : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private IdNamePair cPresetField;
        
        private string sNameField;
        
        private string sFirstLineField;
        
        private string sSecondLineField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IdNamePair cPreset {
            get {
                return this.cPresetField;
            }
            set {
                this.cPresetField = value;
                this.RaisePropertyChanged("cPreset");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string sFirstLine {
            get {
                return this.sFirstLineField;
            }
            set {
                this.sFirstLineField = value;
                this.RaisePropertyChanged("sFirstLine");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string sSecondLine {
            get {
                return this.sSecondLineField;
            }
            set {
                this.sSecondLineField = value;
                this.RaisePropertyChanged("sSecondLine");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class PlaylistItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private bool bCachedField;
        
        private string sNameField;
        
        private long nFramesQtyField;
        
        private long nFrameStartField;
        
        private long nFrameStopField;
        
        private long nFrameCurrentField;
        
        private IdNamePair cStatusField;
        
        private Class[] aClassesField;
        
        private File cFileField;
        
        private string sNoteField;
        
        private bool bPlugField;
        
        private Asset cAssetField;
        
        private System.DateTime dtStartPlannedField;
        
        private System.DateTime dtStartRealField;
        
        private System.DateTime dtStopRealField;
        
        private System.DateTime dtStartHardField;
        
        private System.DateTime dtStartSoftField;
        
        private System.DateTime dtTimingsUpdateField;
        
        private System.DateTime dtStartQueuedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool bCached {
            get {
                return this.bCachedField;
            }
            set {
                this.bCachedField = value;
                this.RaisePropertyChanged("bCached");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public long nFramesQty {
            get {
                return this.nFramesQtyField;
            }
            set {
                this.nFramesQtyField = value;
                this.RaisePropertyChanged("nFramesQty");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public long nFrameStart {
            get {
                return this.nFrameStartField;
            }
            set {
                this.nFrameStartField = value;
                this.RaisePropertyChanged("nFrameStart");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public long nFrameStop {
            get {
                return this.nFrameStopField;
            }
            set {
                this.nFrameStopField = value;
                this.RaisePropertyChanged("nFrameStop");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public long nFrameCurrent {
            get {
                return this.nFrameCurrentField;
            }
            set {
                this.nFrameCurrentField = value;
                this.RaisePropertyChanged("nFrameCurrent");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public IdNamePair cStatus {
            get {
                return this.cStatusField;
            }
            set {
                this.cStatusField = value;
                this.RaisePropertyChanged("cStatus");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=8)]
        public Class[] aClasses {
            get {
                return this.aClassesField;
            }
            set {
                this.aClassesField = value;
                this.RaisePropertyChanged("aClasses");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public File cFile {
            get {
                return this.cFileField;
            }
            set {
                this.cFileField = value;
                this.RaisePropertyChanged("cFile");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string sNote {
            get {
                return this.sNoteField;
            }
            set {
                this.sNoteField = value;
                this.RaisePropertyChanged("sNote");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public bool bPlug {
            get {
                return this.bPlugField;
            }
            set {
                this.bPlugField = value;
                this.RaisePropertyChanged("bPlug");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public Asset cAsset {
            get {
                return this.cAssetField;
            }
            set {
                this.cAssetField = value;
                this.RaisePropertyChanged("cAsset");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public System.DateTime dtStartPlanned {
            get {
                return this.dtStartPlannedField;
            }
            set {
                this.dtStartPlannedField = value;
                this.RaisePropertyChanged("dtStartPlanned");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public System.DateTime dtStartReal {
            get {
                return this.dtStartRealField;
            }
            set {
                this.dtStartRealField = value;
                this.RaisePropertyChanged("dtStartReal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public System.DateTime dtStopReal {
            get {
                return this.dtStopRealField;
            }
            set {
                this.dtStopRealField = value;
                this.RaisePropertyChanged("dtStopReal");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public System.DateTime dtStartHard {
            get {
                return this.dtStartHardField;
            }
            set {
                this.dtStartHardField = value;
                this.RaisePropertyChanged("dtStartHard");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public System.DateTime dtStartSoft {
            get {
                return this.dtStartSoftField;
            }
            set {
                this.dtStartSoftField = value;
                this.RaisePropertyChanged("dtStartSoft");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=18)]
        public System.DateTime dtTimingsUpdate {
            get {
                return this.dtTimingsUpdateField;
            }
            set {
                this.dtTimingsUpdateField = value;
                this.RaisePropertyChanged("dtTimingsUpdate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        public System.DateTime dtStartQueued {
            get {
                return this.dtStartQueuedField;
            }
            set {
                this.dtStartQueuedField = value;
                this.RaisePropertyChanged("dtStartQueued");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Message : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private ulong nSourceNumberField;
        
        private ulong nTargetNumberField;
        
        private string sTextField;
        
        private string sBindIDField;
        
        private string sRegisterDTField;
        
        private string sDisplayDTField;
        
        private bool bMarkField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ulong nSourceNumber {
            get {
                return this.nSourceNumberField;
            }
            set {
                this.nSourceNumberField = value;
                this.RaisePropertyChanged("nSourceNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ulong nTargetNumber {
            get {
                return this.nTargetNumberField;
            }
            set {
                this.nTargetNumberField = value;
                this.RaisePropertyChanged("nTargetNumber");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string sText {
            get {
                return this.sTextField;
            }
            set {
                this.sTextField = value;
                this.RaisePropertyChanged("sText");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string sBindID {
            get {
                return this.sBindIDField;
            }
            set {
                this.sBindIDField = value;
                this.RaisePropertyChanged("sBindID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string sRegisterDT {
            get {
                return this.sRegisterDTField;
            }
            set {
                this.sRegisterDTField = value;
                this.RaisePropertyChanged("sRegisterDT");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string sDisplayDT {
            get {
                return this.sDisplayDTField;
            }
            set {
                this.sDisplayDTField = value;
                this.RaisePropertyChanged("sDisplayDT");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool bMark {
            get {
                return this.bMarkField;
            }
            set {
                this.bMarkField = value;
                this.RaisePropertyChanged("bMark");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Announcement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private Shift cShiftField;
        
        private string sTextField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Shift cShift {
            get {
                return this.cShiftField;
            }
            set {
                this.cShiftField = value;
                this.RaisePropertyChanged("cShift");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sText {
            get {
                return this.sTextField;
            }
            set {
                this.sTextField = value;
                this.RaisePropertyChanged("sText");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Shift : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private IdNamePair cPresetField;
        
        private System.DateTime dtField;
        
        private System.DateTime dtStartField;
        
        private System.DateTime dtStopField;
        
        private string sSubjectField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IdNamePair cPreset {
            get {
                return this.cPresetField;
            }
            set {
                this.cPresetField = value;
                this.RaisePropertyChanged("cPreset");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime dt {
            get {
                return this.dtField;
            }
            set {
                this.dtField = value;
                this.RaisePropertyChanged("dt");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime dtStart {
            get {
                return this.dtStartField;
            }
            set {
                this.dtStartField = value;
                this.RaisePropertyChanged("dtStart");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime dtStop {
            get {
                return this.dtStopField;
            }
            set {
                this.dtStopField = value;
                this.RaisePropertyChanged("dtStop");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string sSubject {
            get {
                return this.sSubjectField;
            }
            set {
                this.sSubjectField = value;
                this.RaisePropertyChanged("sSubject");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class TemplatesSchedule : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime _dtLastField;
        
        private long nIDField;
        
        private TemplateBind cTemplateBindField;
        
        private System.DateTime dtLastField;
        
        private System.DateTime dtStartField;
        
        private int nIntervalInMillisecondsField;
        
        private System.DateTime dtStopField;
        
        private DictionaryElement[] aDictionaryField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public System.DateTime _dtLast {
            get {
                return this._dtLastField;
            }
            set {
                this._dtLastField = value;
                this.RaisePropertyChanged("_dtLast");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public TemplateBind cTemplateBind {
            get {
                return this.cTemplateBindField;
            }
            set {
                this.cTemplateBindField = value;
                this.RaisePropertyChanged("cTemplateBind");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public System.DateTime dtLast {
            get {
                return this.dtLastField;
            }
            set {
                this.dtLastField = value;
                this.RaisePropertyChanged("dtLast");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime dtStart {
            get {
                return this.dtStartField;
            }
            set {
                this.dtStartField = value;
                this.RaisePropertyChanged("dtStart");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int nIntervalInMilliseconds {
            get {
                return this.nIntervalInMillisecondsField;
            }
            set {
                this.nIntervalInMillisecondsField = value;
                this.RaisePropertyChanged("nIntervalInMilliseconds");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public System.DateTime dtStop {
            get {
                return this.dtStopField;
            }
            set {
                this.dtStopField = value;
                this.RaisePropertyChanged("dtStop");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        public DictionaryElement[] aDictionary {
            get {
                return this.aDictionaryField;
            }
            set {
                this.aDictionaryField = value;
                this.RaisePropertyChanged("aDictionary");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class TemplateBind : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private Class cClassField;
        
        private Template cTemplateField;
        
        private RegisteredTable cRegisteredTableField;
        
        private string sKeyField;
        
        private long nValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Class cClass {
            get {
                return this.cClassField;
            }
            set {
                this.cClassField = value;
                this.RaisePropertyChanged("cClass");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Template cTemplate {
            get {
                return this.cTemplateField;
            }
            set {
                this.cTemplateField = value;
                this.RaisePropertyChanged("cTemplate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public RegisteredTable cRegisteredTable {
            get {
                return this.cRegisteredTableField;
            }
            set {
                this.cRegisteredTableField = value;
                this.RaisePropertyChanged("cRegisteredTable");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string sKey {
            get {
                return this.sKeyField;
            }
            set {
                this.sKeyField = value;
                this.RaisePropertyChanged("sKey");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public long nValue {
            get {
                return this.nValueField;
            }
            set {
                this.nValueField = value;
                this.RaisePropertyChanged("nValue");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Template : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private string sNameField;
        
        private string sFileField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sFile {
            get {
                return this.sFileField;
            }
            set {
                this.sFileField = value;
                this.RaisePropertyChanged("sFile");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class DictionaryElement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private long nTargetIDField;
        
        private string sKeyField;
        
        private string sValueField;
        
        private long nRegisteredTablesIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public long nTargetID {
            get {
                return this.nTargetIDField;
            }
            set {
                this.nTargetIDField = value;
                this.RaisePropertyChanged("nTargetID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sKey {
            get {
                return this.sKeyField;
            }
            set {
                this.sKeyField = value;
                this.RaisePropertyChanged("sKey");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string sValue {
            get {
                return this.sValueField;
            }
            set {
                this.sValueField = value;
                this.RaisePropertyChanged("sValue");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public long nRegisteredTablesID {
            get {
                return this.nRegisteredTablesIDField;
            }
            set {
                this.nRegisteredTablesIDField = value;
                this.RaisePropertyChanged("nRegisteredTablesID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public partial class Macro : object, System.ComponentModel.INotifyPropertyChanged {
        
        private long nIDField;
        
        private IdNamePair cTypeField;
        
        private string sNameField;
        
        private string sValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public long nID {
            get {
                return this.nIDField;
            }
            set {
                this.nIDField = value;
                this.RaisePropertyChanged("nID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public IdNamePair cType {
            get {
                return this.cTypeField;
            }
            set {
                this.cTypeField = value;
                this.RaisePropertyChanged("cType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string sName {
            get {
                return this.sNameField;
            }
            set {
                this.sNameField = value;
                this.RaisePropertyChanged("sName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string sValue {
            get {
                return this.sValueField;
            }
            set {
                this.sValueField = value;
                this.RaisePropertyChanged("sValue");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RingtonesBindsGet", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class RingtonesBindsGetRequest {
        
        public RingtonesBindsGetRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RingtonesBindsGetResponse", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class RingtonesBindsGetResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://replica/services/DBInteract.asmx", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfInt")]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public int[][] RingtonesBindsGetResult;
        
        public RingtonesBindsGetResponse() {
        }
        
        public RingtonesBindsGetResponse(int[][] RingtonesBindsGetResult) {
            this.RingtonesBindsGetResult = RingtonesBindsGetResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileBegin", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class UploadFileBeginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://replica/services/DBInteract.asmx", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] aBytes;
        
        public UploadFileBeginRequest() {
        }
        
        public UploadFileBeginRequest(byte[] aBytes) {
            this.aBytes = aBytes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileBeginResponse", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class UploadFileBeginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://replica/services/DBInteract.asmx", Order=0)]
        public int UploadFileBeginResult;
        
        public UploadFileBeginResponse() {
        }
        
        public UploadFileBeginResponse(int UploadFileBeginResult) {
            this.UploadFileBeginResult = UploadFileBeginResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileContinue", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class UploadFileContinueRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://replica/services/DBInteract.asmx", Order=0)]
        public int nFileIndx;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://replica/services/DBInteract.asmx", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] aBytes;
        
        public UploadFileContinueRequest() {
        }
        
        public UploadFileContinueRequest(int nFileIndx, byte[] aBytes) {
            this.nFileIndx = nFileIndx;
            this.aBytes = aBytes;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileContinueResponse", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class UploadFileContinueResponse {
        
        public UploadFileContinueResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CustomsLoad", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class CustomsLoadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://replica/services/DBInteract.asmx", Order=0)]
        public long nAssetID;
        
        public CustomsLoadRequest() {
        }
        
        public CustomsLoadRequest(long nAssetID) {
            this.nAssetID = nAssetID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CustomsLoadResponse", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class CustomsLoadResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://replica/services/DBInteract.asmx", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public helpers.replica.services.dbinteract.CustomValue[] CustomsLoadResult;
        
        public CustomsLoadResponse() {
        }
        
        public CustomsLoadResponse(helpers.replica.services.dbinteract.CustomValue[] CustomsLoadResult) {
            this.CustomsLoadResult = CustomsLoadResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FilesAgeGet", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class FilesAgeGetRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://replica/services/DBInteract.asmx", Order=0)]
        public helpers.replica.services.dbinteract.Asset cAsset;
        
        public FilesAgeGetRequest() {
        }
        
        public FilesAgeGetRequest(helpers.replica.services.dbinteract.Asset cAsset) {
            this.cAsset = cAsset;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FilesAgeGetResponse", WrapperNamespace="http://replica/services/DBInteract.asmx", IsWrapped=true)]
    public partial class FilesAgeGetResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://replica/services/DBInteract.asmx", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> FilesAgeGetResult;
        
        public FilesAgeGetResponse() {
        }
        
        public FilesAgeGetResponse(System.Nullable<int> FilesAgeGetResult) {
            this.FilesAgeGetResult = FilesAgeGetResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3062.0")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://replica/services/DBInteract.asmx")]
    public enum FileIsInPlaylist {
        
        /// <remarks/>
        IsNot,
        
        /// <remarks/>
        YesItIs,
        
        /// <remarks/>
        IsInFragment,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DBInteractSoapChannel : helpers.replica.services.dbinteract.DBInteractSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportLogGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportLogGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemplateRegisteredTableGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TemplateRegisteredTableGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.RegisteredTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.RegisteredTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MacrosCrawlsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MacrosCrawlsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Macro[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Macro[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TempateMessagesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TempateMessagesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Template[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Template[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemplateBindsTrailsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TemplateBindsTrailsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.TemplateBind[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.TemplateBind[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MacrosValuesSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MacrosValuesSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemplateMessagesTextSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TemplateMessagesTextSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemplateMessagesTextGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TemplateMessagesTextGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.DictionaryElement[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.DictionaryElement[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemplatesScheduleAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TemplatesScheduleAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemplatesScheduleGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TemplatesScheduleGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.TemplatesSchedule[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.TemplatesSchedule[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TemplatesScheduleDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TemplatesScheduleDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DirectoriesTrailsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DirectoriesTrailsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShiftAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShiftAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Shift Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Shift)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShiftStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShiftStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShiftStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShiftStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ShiftCurrentGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ShiftCurrentGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Shift Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Shift)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnnouncementsActualGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AnnouncementsActualGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Announcement[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Announcement[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessagesQueueGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MessagesQueueGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Message[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Message[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TimeBlockGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TimeBlockGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaqueAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaqueAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaquesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaquesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Plaque[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Plaque[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaqueDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaqueDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaqueChangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaqueChangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CuesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CuesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Cues Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Cues)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StorageSCRGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StorageSCRGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.StoragesMappings[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.StoragesMappings[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogoBindingGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogoBindingGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PLFragmentGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PLFragmentGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StatGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StatGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessagesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MessagesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Message[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Message[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkerProgressGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public WorkerProgressGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ulong Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ulong)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExportResultGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExportResultGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RingtonesBindsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RingtonesBindsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int[][] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int[][])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FrequencyOfOccurrenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FrequencyOfOccurrenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GridGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GridGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransliterationGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TransliterationGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.TransliterationPair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.TransliterationPair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DateTimeNowGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DateTimeNowGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadFileBeginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadFileBeginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadFileEndCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadFileEndCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsThereAnyErrorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsThereAnyErrorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ErrorsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ErrorsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.WebServiceError[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.WebServiceError[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ErrorsAllGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ErrorsAllGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.WebServiceError[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.WebServiceError[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ErrorLastGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ErrorLastGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.WebServiceError Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.WebServiceError)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccessScopesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AccessScopesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.AccessScope[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.AccessScope[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProfileGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProfileGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Profile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Profile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssetsRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AssetsRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.AlterString[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.AlterString[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssetsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AssetsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Asset[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Asset[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProgramsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProgramsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Program[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Program[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClipGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClipGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Clip Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Clip)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClipsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClipsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Clip[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Clip[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvertisementGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvertisementGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Advertisement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Advertisement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvertisementsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvertisementsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Asset[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Asset[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DesignGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DesignGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Design Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Design)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DesignsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DesignsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Asset[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Asset[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssetVideoTypeGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AssetVideoTypeGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClassesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClassesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Class[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Class[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClassesSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClassesSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Asset[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Asset[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RotationsSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RotationsSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Clip[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Clip[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StatusesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StatusesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StatusesClearGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StatusesClearGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatInOutsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChatInOutsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.ChatInOut[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.ChatInOut[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatInOutsSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChatInOutsSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClipSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ClipSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VideoTypeGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public VideoTypeGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VideoTypesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public VideoTypesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProgramGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProgramGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Program Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Program)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssetsSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AssetsSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.AlterString[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.AlterString[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssetParametersToPlaylistSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AssetParametersToPlaylistSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProgramSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProgramSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AssetsParentAssignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AssetsParentAssignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvertisementSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvertisementSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DesignSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DesignSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersonSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonTypeGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersonTypeGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonsRemoveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersonsRemoveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Person[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Person[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersonsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PersonsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Person[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Person[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ArtistsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ArtistsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Person[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Person[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ArtistsLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ArtistsLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Person[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Person[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StylesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StylesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StylesLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StylesLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RotationsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RotationsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PalettesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PalettesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SexGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SexGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SoundsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SoundsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomsLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomsLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.CustomValue[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.CustomValue[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ArtistsCueNameGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ArtistsCueNameGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilesAgeGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FilesAgeGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StoragesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StoragesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Storage[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Storage[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FilesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.File[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.File[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FilesWithSourcesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FilesWithSourcesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.File[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.File[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileAdditionalInfoGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FileAdditionalInfoGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.File Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.File)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileCheckIsInPlaylistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FileCheckIsInPlaylistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.FileIsInPlaylist Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.FileIsInPlaylist)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileDurationQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FileDurationQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommandStatusGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CommandStatusGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FramesQtyGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FramesQtyGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StorageFilesUnusedGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StorageFilesUnusedGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.File[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.File[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileIDsInStockGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FileIDsInStockGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TSRItemsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TSRItemsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.TSRItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.TSRItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IngestForReplacedFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IngestForReplacedFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IngestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IngestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.File Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.File)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsThereSameFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsThereSameFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AreThereSameFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AreThereSameFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsThereSameCustomValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsThereSameCustomValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Asset Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Asset)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsThereSameCustomValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsThereSameCustomValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Asset[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Asset[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RegisteredTablesGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RegisteredTablesGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.RegisteredTable[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.RegisteredTable[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemMinimumForImmediatePLGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemMinimumForImmediatePLGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemsArchGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemsArchGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemsPlanGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemsPlanGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemsAdvertsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemsAdvertsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NearestAdvertsBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NearestAdvertsBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemsDeleteSinceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemsDeleteSinceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemsDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemsDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.IdNamePair[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.IdNamePair[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemsTimingsSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemsTimingsSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemStartsSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemStartsSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistRecalculateQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistRecalculateQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistItemAdd_ResultGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistItemAdd_ResultGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ComingUpGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ComingUpGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistInsertCopiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistInsertCopiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertInBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertInBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GroupMovingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GroupMovingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PLIPropertiesSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PLIPropertiesSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistLastElementGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistLastElementGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BeforeAddCheckRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BeforeAddCheckRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvancedPlaylistsGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvancedPlaylistsGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Playlist[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Playlist[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvancedPlaylistGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvancedPlaylistGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.Playlist Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.Playlist)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvancedPlaylistAddReplaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvancedPlaylistAddReplaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvancedPlaylistDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvancedPlaylistDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvancedPlaylistRenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvancedPlaylistRenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvancedPlaylistStartCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvancedPlaylistStartCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdvancedPlaylistItemSaveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AdvancedPlaylistItemSaveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PowerGoldFileParseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PowerGoldFileParseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VideoInternationalFileParseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public VideoInternationalFileParseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DesignFileParseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DesignFileParseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlaylistsMergeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlaylistsMergeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public helpers.replica.services.dbinteract.PlaylistItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((helpers.replica.services.dbinteract.PlaylistItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBInteractSoapClient : System.ServiceModel.ClientBase<helpers.replica.services.dbinteract.DBInteractSoap>, helpers.replica.services.dbinteract.DBInteractSoap {
        
        private BeginOperationDelegate onBeginImportLogGetDelegate;
        
        private EndOperationDelegate onEndImportLogGetDelegate;
        
        private System.Threading.SendOrPostCallback onImportLogGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTemplateRegisteredTableGetDelegate;
        
        private EndOperationDelegate onEndTemplateRegisteredTableGetDelegate;
        
        private System.Threading.SendOrPostCallback onTemplateRegisteredTableGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMacrosCrawlsGetDelegate;
        
        private EndOperationDelegate onEndMacrosCrawlsGetDelegate;
        
        private System.Threading.SendOrPostCallback onMacrosCrawlsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTempateMessagesGetDelegate;
        
        private EndOperationDelegate onEndTempateMessagesGetDelegate;
        
        private System.Threading.SendOrPostCallback onTempateMessagesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTemplateBindsTrailsGetDelegate;
        
        private EndOperationDelegate onEndTemplateBindsTrailsGetDelegate;
        
        private System.Threading.SendOrPostCallback onTemplateBindsTrailsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMacrosValuesSetDelegate;
        
        private EndOperationDelegate onEndMacrosValuesSetDelegate;
        
        private System.Threading.SendOrPostCallback onMacrosValuesSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTemplateMessagesTextSaveDelegate;
        
        private EndOperationDelegate onEndTemplateMessagesTextSaveDelegate;
        
        private System.Threading.SendOrPostCallback onTemplateMessagesTextSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTemplateMessagesTextGetDelegate;
        
        private EndOperationDelegate onEndTemplateMessagesTextGetDelegate;
        
        private System.Threading.SendOrPostCallback onTemplateMessagesTextGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTemplatesScheduleAddDelegate;
        
        private EndOperationDelegate onEndTemplatesScheduleAddDelegate;
        
        private System.Threading.SendOrPostCallback onTemplatesScheduleAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginTemplatesScheduleGetDelegate;
        
        private EndOperationDelegate onEndTemplatesScheduleGetDelegate;
        
        private System.Threading.SendOrPostCallback onTemplatesScheduleGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTemplatesScheduleDeleteDelegate;
        
        private EndOperationDelegate onEndTemplatesScheduleDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onTemplatesScheduleDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginDirectoriesTrailsGetDelegate;
        
        private EndOperationDelegate onEndDirectoriesTrailsGetDelegate;
        
        private System.Threading.SendOrPostCallback onDirectoriesTrailsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginShiftAddDelegate;
        
        private EndOperationDelegate onEndShiftAddDelegate;
        
        private System.Threading.SendOrPostCallback onShiftAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginShiftStartDelegate;
        
        private EndOperationDelegate onEndShiftStartDelegate;
        
        private System.Threading.SendOrPostCallback onShiftStartCompletedDelegate;
        
        private BeginOperationDelegate onBeginShiftStopDelegate;
        
        private EndOperationDelegate onEndShiftStopDelegate;
        
        private System.Threading.SendOrPostCallback onShiftStopCompletedDelegate;
        
        private BeginOperationDelegate onBeginShiftCurrentGetDelegate;
        
        private EndOperationDelegate onEndShiftCurrentGetDelegate;
        
        private System.Threading.SendOrPostCallback onShiftCurrentGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginAnnouncementsActualGetDelegate;
        
        private EndOperationDelegate onEndAnnouncementsActualGetDelegate;
        
        private System.Threading.SendOrPostCallback onAnnouncementsActualGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessagesQueueGetDelegate;
        
        private EndOperationDelegate onEndMessagesQueueGetDelegate;
        
        private System.Threading.SendOrPostCallback onMessagesQueueGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessageMarkDelegate;
        
        private EndOperationDelegate onEndMessageMarkDelegate;
        
        private System.Threading.SendOrPostCallback onMessageMarkCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessageUnMarkDelegate;
        
        private EndOperationDelegate onEndMessageUnMarkDelegate;
        
        private System.Threading.SendOrPostCallback onMessageUnMarkCompletedDelegate;
        
        private BeginOperationDelegate onBeginTimeBlockGetDelegate;
        
        private EndOperationDelegate onEndTimeBlockGetDelegate;
        
        private System.Threading.SendOrPostCallback onTimeBlockGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaqueAddDelegate;
        
        private EndOperationDelegate onEndPlaqueAddDelegate;
        
        private System.Threading.SendOrPostCallback onPlaqueAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaquesGetDelegate;
        
        private EndOperationDelegate onEndPlaquesGetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaquesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaqueDeleteDelegate;
        
        private EndOperationDelegate onEndPlaqueDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onPlaqueDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaqueChangeDelegate;
        
        private EndOperationDelegate onEndPlaqueChangeDelegate;
        
        private System.Threading.SendOrPostCallback onPlaqueChangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginCuesGetDelegate;
        
        private EndOperationDelegate onEndCuesGetDelegate;
        
        private System.Threading.SendOrPostCallback onCuesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginStorageSCRGetDelegate;
        
        private EndOperationDelegate onEndStorageSCRGetDelegate;
        
        private System.Threading.SendOrPostCallback onStorageSCRGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogoBindingGetDelegate;
        
        private EndOperationDelegate onEndLogoBindingGetDelegate;
        
        private System.Threading.SendOrPostCallback onLogoBindingGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginClipsBDLogDelegate;
        
        private EndOperationDelegate onEndClipsBDLogDelegate;
        
        private System.Threading.SendOrPostCallback onClipsBDLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginPLFragmentGetDelegate;
        
        private EndOperationDelegate onEndPLFragmentGetDelegate;
        
        private System.Threading.SendOrPostCallback onPLFragmentGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginStatGetDelegate;
        
        private EndOperationDelegate onEndStatGetDelegate;
        
        private System.Threading.SendOrPostCallback onStatGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginMessagesGetDelegate;
        
        private EndOperationDelegate onEndMessagesGetDelegate;
        
        private System.Threading.SendOrPostCallback onMessagesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginWorkerProgressGetDelegate;
        
        private EndOperationDelegate onEndWorkerProgressGetDelegate;
        
        private System.Threading.SendOrPostCallback onWorkerProgressGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportDelegate;
        
        private EndOperationDelegate onEndExportDelegate;
        
        private System.Threading.SendOrPostCallback onExportCompletedDelegate;
        
        private BeginOperationDelegate onBeginExportResultGetDelegate;
        
        private EndOperationDelegate onEndExportResultGetDelegate;
        
        private System.Threading.SendOrPostCallback onExportResultGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginRingtonesBindsGetDelegate;
        
        private EndOperationDelegate onEndRingtonesBindsGetDelegate;
        
        private System.Threading.SendOrPostCallback onRingtonesBindsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFrequencyOfOccurrenceDelegate;
        
        private EndOperationDelegate onEndFrequencyOfOccurrenceDelegate;
        
        private System.Threading.SendOrPostCallback onFrequencyOfOccurrenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGridGetDelegate;
        
        private EndOperationDelegate onEndGridGetDelegate;
        
        private System.Threading.SendOrPostCallback onGridGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginGridSaveDelegate;
        
        private EndOperationDelegate onEndGridSaveDelegate;
        
        private System.Threading.SendOrPostCallback onGridSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginTransliterationGetDelegate;
        
        private EndOperationDelegate onEndTransliterationGetDelegate;
        
        private System.Threading.SendOrPostCallback onTransliterationGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginDateTimeNowGetDelegate;
        
        private EndOperationDelegate onEndDateTimeNowGetDelegate;
        
        private System.Threading.SendOrPostCallback onDateTimeNowGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginErrorLoggingDelegate;
        
        private EndOperationDelegate onEndErrorLoggingDelegate;
        
        private System.Threading.SendOrPostCallback onErrorLoggingCompletedDelegate;
        
        private BeginOperationDelegate onBeginKnownTypesDelegate;
        
        private EndOperationDelegate onEndKnownTypesDelegate;
        
        private System.Threading.SendOrPostCallback onKnownTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFileBeginDelegate;
        
        private EndOperationDelegate onEndUploadFileBeginDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileBeginCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFileContinueDelegate;
        
        private EndOperationDelegate onEndUploadFileContinueDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileContinueCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadFileEndDelegate;
        
        private EndOperationDelegate onEndUploadFileEndDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileEndCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsThereAnyErrorsDelegate;
        
        private EndOperationDelegate onEndIsThereAnyErrorsDelegate;
        
        private System.Threading.SendOrPostCallback onIsThereAnyErrorsCompletedDelegate;
        
        private BeginOperationDelegate onBeginErrorsClearDelegate;
        
        private EndOperationDelegate onEndErrorsClearDelegate;
        
        private System.Threading.SendOrPostCallback onErrorsClearCompletedDelegate;
        
        private BeginOperationDelegate onBeginErrorsGetDelegate;
        
        private EndOperationDelegate onEndErrorsGetDelegate;
        
        private System.Threading.SendOrPostCallback onErrorsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginErrorsAllGetDelegate;
        
        private EndOperationDelegate onEndErrorsAllGetDelegate;
        
        private System.Threading.SendOrPostCallback onErrorsAllGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginErrorLastGetDelegate;
        
        private EndOperationDelegate onEndErrorLastGetDelegate;
        
        private System.Threading.SendOrPostCallback onErrorLastGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogger_NoticeDelegate;
        
        private EndOperationDelegate onEndLogger_NoticeDelegate;
        
        private System.Threading.SendOrPostCallback onLogger_NoticeCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogger_ErrorDelegate;
        
        private EndOperationDelegate onEndLogger_ErrorDelegate;
        
        private System.Threading.SendOrPostCallback onLogger_ErrorCompletedDelegate;
        
        private BeginOperationDelegate onBeginInitSessionDelegate;
        
        private EndOperationDelegate onEndInitSessionDelegate;
        
        private System.Threading.SendOrPostCallback onInitSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginInitDelegate;
        
        private EndOperationDelegate onEndInitDelegate;
        
        private System.Threading.SendOrPostCallback onInitCompletedDelegate;
        
        private BeginOperationDelegate onBeginAccessScopesGetDelegate;
        
        private EndOperationDelegate onEndAccessScopesGetDelegate;
        
        private System.Threading.SendOrPostCallback onAccessScopesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginProfileGetDelegate;
        
        private EndOperationDelegate onEndProfileGetDelegate;
        
        private System.Threading.SendOrPostCallback onProfileGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssetsRemoveDelegate;
        
        private EndOperationDelegate onEndAssetsRemoveDelegate;
        
        private System.Threading.SendOrPostCallback onAssetsRemoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssetsGetDelegate;
        
        private EndOperationDelegate onEndAssetsGetDelegate;
        
        private System.Threading.SendOrPostCallback onAssetsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginProgramsGetDelegate;
        
        private EndOperationDelegate onEndProgramsGetDelegate;
        
        private System.Threading.SendOrPostCallback onProgramsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginClipGetDelegate;
        
        private EndOperationDelegate onEndClipGetDelegate;
        
        private System.Threading.SendOrPostCallback onClipGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginClipsGetDelegate;
        
        private EndOperationDelegate onEndClipsGetDelegate;
        
        private System.Threading.SendOrPostCallback onClipsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvertisementGetDelegate;
        
        private EndOperationDelegate onEndAdvertisementGetDelegate;
        
        private System.Threading.SendOrPostCallback onAdvertisementGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvertisementsGetDelegate;
        
        private EndOperationDelegate onEndAdvertisementsGetDelegate;
        
        private System.Threading.SendOrPostCallback onAdvertisementsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginDesignGetDelegate;
        
        private EndOperationDelegate onEndDesignGetDelegate;
        
        private System.Threading.SendOrPostCallback onDesignGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginDesignsGetDelegate;
        
        private EndOperationDelegate onEndDesignsGetDelegate;
        
        private System.Threading.SendOrPostCallback onDesignsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssetVideoTypeGetDelegate;
        
        private EndOperationDelegate onEndAssetVideoTypeGetDelegate;
        
        private System.Threading.SendOrPostCallback onAssetVideoTypeGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginClassesGetDelegate;
        
        private EndOperationDelegate onEndClassesGetDelegate;
        
        private System.Threading.SendOrPostCallback onClassesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginClassesSetDelegate;
        
        private EndOperationDelegate onEndClassesSetDelegate;
        
        private System.Threading.SendOrPostCallback onClassesSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginRotationsSetDelegate;
        
        private EndOperationDelegate onEndRotationsSetDelegate;
        
        private System.Threading.SendOrPostCallback onRotationsSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginStatusesGetDelegate;
        
        private EndOperationDelegate onEndStatusesGetDelegate;
        
        private System.Threading.SendOrPostCallback onStatusesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginStatusesClearGetDelegate;
        
        private EndOperationDelegate onEndStatusesClearGetDelegate;
        
        private System.Threading.SendOrPostCallback onStatusesClearGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginChatInOutsGetDelegate;
        
        private EndOperationDelegate onEndChatInOutsGetDelegate;
        
        private System.Threading.SendOrPostCallback onChatInOutsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginChatInOutsSaveDelegate;
        
        private EndOperationDelegate onEndChatInOutsSaveDelegate;
        
        private System.Threading.SendOrPostCallback onChatInOutsSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginRingtoneAddDelegate;
        
        private EndOperationDelegate onEndRingtoneAddDelegate;
        
        private System.Threading.SendOrPostCallback onRingtoneAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginClipSaveDelegate;
        
        private EndOperationDelegate onEndClipSaveDelegate;
        
        private System.Threading.SendOrPostCallback onClipSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginVideoTypeGetDelegate;
        
        private EndOperationDelegate onEndVideoTypeGetDelegate;
        
        private System.Threading.SendOrPostCallback onVideoTypeGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginVideoTypesGetDelegate;
        
        private EndOperationDelegate onEndVideoTypesGetDelegate;
        
        private System.Threading.SendOrPostCallback onVideoTypesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginProgramGetDelegate;
        
        private EndOperationDelegate onEndProgramGetDelegate;
        
        private System.Threading.SendOrPostCallback onProgramGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssetsSaveDelegate;
        
        private EndOperationDelegate onEndAssetsSaveDelegate;
        
        private System.Threading.SendOrPostCallback onAssetsSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssetParametersToPlaylistSaveDelegate;
        
        private EndOperationDelegate onEndAssetParametersToPlaylistSaveDelegate;
        
        private System.Threading.SendOrPostCallback onAssetParametersToPlaylistSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginProgramSaveDelegate;
        
        private EndOperationDelegate onEndProgramSaveDelegate;
        
        private System.Threading.SendOrPostCallback onProgramSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginAssetsParentAssignDelegate;
        
        private EndOperationDelegate onEndAssetsParentAssignDelegate;
        
        private System.Threading.SendOrPostCallback onAssetsParentAssignCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvertisementSaveDelegate;
        
        private EndOperationDelegate onEndAdvertisementSaveDelegate;
        
        private System.Threading.SendOrPostCallback onAdvertisementSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginDesignSaveDelegate;
        
        private EndOperationDelegate onEndDesignSaveDelegate;
        
        private System.Threading.SendOrPostCallback onDesignSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginPersonSaveDelegate;
        
        private EndOperationDelegate onEndPersonSaveDelegate;
        
        private System.Threading.SendOrPostCallback onPersonSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginPersonTypeGetDelegate;
        
        private EndOperationDelegate onEndPersonTypeGetDelegate;
        
        private System.Threading.SendOrPostCallback onPersonTypeGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPersonsRemoveDelegate;
        
        private EndOperationDelegate onEndPersonsRemoveDelegate;
        
        private System.Threading.SendOrPostCallback onPersonsRemoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginPersonsGetDelegate;
        
        private EndOperationDelegate onEndPersonsGetDelegate;
        
        private System.Threading.SendOrPostCallback onPersonsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginArtistsGetDelegate;
        
        private EndOperationDelegate onEndArtistsGetDelegate;
        
        private System.Threading.SendOrPostCallback onArtistsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginArtistsLoadDelegate;
        
        private EndOperationDelegate onEndArtistsLoadDelegate;
        
        private System.Threading.SendOrPostCallback onArtistsLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginStylesGetDelegate;
        
        private EndOperationDelegate onEndStylesGetDelegate;
        
        private System.Threading.SendOrPostCallback onStylesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginStylesLoadDelegate;
        
        private EndOperationDelegate onEndStylesLoadDelegate;
        
        private System.Threading.SendOrPostCallback onStylesLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginRotationsGetDelegate;
        
        private EndOperationDelegate onEndRotationsGetDelegate;
        
        private System.Threading.SendOrPostCallback onRotationsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPalettesGetDelegate;
        
        private EndOperationDelegate onEndPalettesGetDelegate;
        
        private System.Threading.SendOrPostCallback onPalettesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginSexGetDelegate;
        
        private EndOperationDelegate onEndSexGetDelegate;
        
        private System.Threading.SendOrPostCallback onSexGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginSoundsGetDelegate;
        
        private EndOperationDelegate onEndSoundsGetDelegate;
        
        private System.Threading.SendOrPostCallback onSoundsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomsLoadDelegate;
        
        private EndOperationDelegate onEndCustomsLoadDelegate;
        
        private System.Threading.SendOrPostCallback onCustomsLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginArtistsCueNameGetDelegate;
        
        private EndOperationDelegate onEndArtistsCueNameGetDelegate;
        
        private System.Threading.SendOrPostCallback onArtistsCueNameGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFilesAgeGetDelegate;
        
        private EndOperationDelegate onEndFilesAgeGetDelegate;
        
        private System.Threading.SendOrPostCallback onFilesAgeGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFilesAgeSetDelegate;
        
        private EndOperationDelegate onEndFilesAgeSetDelegate;
        
        private System.Threading.SendOrPostCallback onFilesAgeSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginStoragesGetDelegate;
        
        private EndOperationDelegate onEndStoragesGetDelegate;
        
        private System.Threading.SendOrPostCallback onStoragesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFilesGetDelegate;
        
        private EndOperationDelegate onEndFilesGetDelegate;
        
        private System.Threading.SendOrPostCallback onFilesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFilesWithSourcesGetDelegate;
        
        private EndOperationDelegate onEndFilesWithSourcesGetDelegate;
        
        private System.Threading.SendOrPostCallback onFilesWithSourcesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFilesRemoveDelegate;
        
        private EndOperationDelegate onEndFilesRemoveDelegate;
        
        private System.Threading.SendOrPostCallback onFilesRemoveCompletedDelegate;
        
        private BeginOperationDelegate onBeginFileAdditionalInfoGetDelegate;
        
        private EndOperationDelegate onEndFileAdditionalInfoGetDelegate;
        
        private System.Threading.SendOrPostCallback onFileAdditionalInfoGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFileCheckIsInPlaylistDelegate;
        
        private EndOperationDelegate onEndFileCheckIsInPlaylistDelegate;
        
        private System.Threading.SendOrPostCallback onFileCheckIsInPlaylistCompletedDelegate;
        
        private BeginOperationDelegate onBeginFileDurationQueryDelegate;
        
        private EndOperationDelegate onEndFileDurationQueryDelegate;
        
        private System.Threading.SendOrPostCallback onFileDurationQueryCompletedDelegate;
        
        private BeginOperationDelegate onBeginCommandStatusGetDelegate;
        
        private EndOperationDelegate onEndCommandStatusGetDelegate;
        
        private System.Threading.SendOrPostCallback onCommandStatusGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFramesQtyGetDelegate;
        
        private EndOperationDelegate onEndFramesQtyGetDelegate;
        
        private System.Threading.SendOrPostCallback onFramesQtyGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginStorageFilesUnusedGetDelegate;
        
        private EndOperationDelegate onEndStorageFilesUnusedGetDelegate;
        
        private System.Threading.SendOrPostCallback onStorageFilesUnusedGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginFileIDsInStockGetDelegate;
        
        private EndOperationDelegate onEndFileIDsInStockGetDelegate;
        
        private System.Threading.SendOrPostCallback onFileIDsInStockGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginTSRItemsGetDelegate;
        
        private EndOperationDelegate onEndTSRItemsGetDelegate;
        
        private System.Threading.SendOrPostCallback onTSRItemsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginIngestForReplacedFileDelegate;
        
        private EndOperationDelegate onEndIngestForReplacedFileDelegate;
        
        private System.Threading.SendOrPostCallback onIngestForReplacedFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginIngestDelegate;
        
        private EndOperationDelegate onEndIngestDelegate;
        
        private System.Threading.SendOrPostCallback onIngestCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsThereSameFileDelegate;
        
        private EndOperationDelegate onEndIsThereSameFileDelegate;
        
        private System.Threading.SendOrPostCallback onIsThereSameFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginAreThereSameFilesDelegate;
        
        private EndOperationDelegate onEndAreThereSameFilesDelegate;
        
        private System.Threading.SendOrPostCallback onAreThereSameFilesCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsThereSameCustomValueDelegate;
        
        private EndOperationDelegate onEndIsThereSameCustomValueDelegate;
        
        private System.Threading.SendOrPostCallback onIsThereSameCustomValueCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsThereSameCustomValuesDelegate;
        
        private EndOperationDelegate onEndIsThereSameCustomValuesDelegate;
        
        private System.Threading.SendOrPostCallback onIsThereSameCustomValuesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRegisteredTablesGetDelegate;
        
        private EndOperationDelegate onEndRegisteredTablesGetDelegate;
        
        private System.Threading.SendOrPostCallback onRegisteredTablesGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemsGetDelegate;
        
        private EndOperationDelegate onEndPlaylistItemsGetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemMinimumForImmediatePLGetDelegate;
        
        private EndOperationDelegate onEndPlaylistItemMinimumForImmediatePLGetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemMinimumForImmediatePLGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemsArchGetDelegate;
        
        private EndOperationDelegate onEndPlaylistItemsArchGetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemsArchGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemsPlanGetDelegate;
        
        private EndOperationDelegate onEndPlaylistItemsPlanGetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemsPlanGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemsAdvertsGetDelegate;
        
        private EndOperationDelegate onEndPlaylistItemsAdvertsGetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemsAdvertsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginNearestAdvertsBlockDelegate;
        
        private EndOperationDelegate onEndNearestAdvertsBlockDelegate;
        
        private System.Threading.SendOrPostCallback onNearestAdvertsBlockCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemsDeleteSinceDelegate;
        
        private EndOperationDelegate onEndPlaylistItemsDeleteSinceDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemsDeleteSinceCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemsDeleteDelegate;
        
        private EndOperationDelegate onEndPlaylistItemsDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemsDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemsTimingsSetDelegate;
        
        private EndOperationDelegate onEndPlaylistItemsTimingsSetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemsTimingsSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemStartsSetDelegate;
        
        private EndOperationDelegate onEndPlaylistItemStartsSetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemStartsSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistRecalculateQueryDelegate;
        
        private EndOperationDelegate onEndPlaylistRecalculateQueryDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistRecalculateQueryCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemAdd_ResultGetDelegate;
        
        private EndOperationDelegate onEndPlaylistItemAdd_ResultGetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemAdd_ResultGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistItemsAddWorkerDelegate;
        
        private EndOperationDelegate onEndPlaylistItemsAddWorkerDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistItemsAddWorkerCompletedDelegate;
        
        private BeginOperationDelegate onBeginComingUpGetDelegate;
        
        private EndOperationDelegate onEndComingUpGetDelegate;
        
        private System.Threading.SendOrPostCallback onComingUpGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistInsertDelegate;
        
        private EndOperationDelegate onEndPlaylistInsertDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistInsertCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistInsertCopiesDelegate;
        
        private EndOperationDelegate onEndPlaylistInsertCopiesDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistInsertCopiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertInBlockDelegate;
        
        private EndOperationDelegate onEndInsertInBlockDelegate;
        
        private System.Threading.SendOrPostCallback onInsertInBlockCompletedDelegate;
        
        private BeginOperationDelegate onBeginGroupMovingDelegate;
        
        private EndOperationDelegate onEndGroupMovingDelegate;
        
        private System.Threading.SendOrPostCallback onGroupMovingCompletedDelegate;
        
        private BeginOperationDelegate onBeginPLIPropertiesSetDelegate;
        
        private EndOperationDelegate onEndPLIPropertiesSetDelegate;
        
        private System.Threading.SendOrPostCallback onPLIPropertiesSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistLastElementGetDelegate;
        
        private EndOperationDelegate onEndPlaylistLastElementGetDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistLastElementGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginBeforeAddCheckRangeDelegate;
        
        private EndOperationDelegate onEndBeforeAddCheckRangeDelegate;
        
        private System.Threading.SendOrPostCallback onBeforeAddCheckRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvancedPlaylistsGetDelegate;
        
        private EndOperationDelegate onEndAdvancedPlaylistsGetDelegate;
        
        private System.Threading.SendOrPostCallback onAdvancedPlaylistsGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvancedPlaylistGetDelegate;
        
        private EndOperationDelegate onEndAdvancedPlaylistGetDelegate;
        
        private System.Threading.SendOrPostCallback onAdvancedPlaylistGetCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvancedPlaylistAddReplaceDelegate;
        
        private EndOperationDelegate onEndAdvancedPlaylistAddReplaceDelegate;
        
        private System.Threading.SendOrPostCallback onAdvancedPlaylistAddReplaceCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvancedPlaylistDeleteDelegate;
        
        private EndOperationDelegate onEndAdvancedPlaylistDeleteDelegate;
        
        private System.Threading.SendOrPostCallback onAdvancedPlaylistDeleteCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvancedPlaylistRenameDelegate;
        
        private EndOperationDelegate onEndAdvancedPlaylistRenameDelegate;
        
        private System.Threading.SendOrPostCallback onAdvancedPlaylistRenameCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvancedPlaylistStartDelegate;
        
        private EndOperationDelegate onEndAdvancedPlaylistStartDelegate;
        
        private System.Threading.SendOrPostCallback onAdvancedPlaylistStartCompletedDelegate;
        
        private BeginOperationDelegate onBeginAdvancedPlaylistItemSaveDelegate;
        
        private EndOperationDelegate onEndAdvancedPlaylistItemSaveDelegate;
        
        private System.Threading.SendOrPostCallback onAdvancedPlaylistItemSaveCompletedDelegate;
        
        private BeginOperationDelegate onBeginPowerGoldFileParseDelegate;
        
        private EndOperationDelegate onEndPowerGoldFileParseDelegate;
        
        private System.Threading.SendOrPostCallback onPowerGoldFileParseCompletedDelegate;
        
        private BeginOperationDelegate onBeginVideoInternationalFileParseDelegate;
        
        private EndOperationDelegate onEndVideoInternationalFileParseDelegate;
        
        private System.Threading.SendOrPostCallback onVideoInternationalFileParseCompletedDelegate;
        
        private BeginOperationDelegate onBeginDesignFileParseDelegate;
        
        private EndOperationDelegate onEndDesignFileParseDelegate;
        
        private System.Threading.SendOrPostCallback onDesignFileParseCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlaylistsMergeDelegate;
        
        private EndOperationDelegate onEndPlaylistsMergeDelegate;
        
        private System.Threading.SendOrPostCallback onPlaylistsMergeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DBInteractSoapClient() {
        }
        
        public DBInteractSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBInteractSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBInteractSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBInteractSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ImportLogGetCompletedEventArgs> ImportLogGetCompleted;
        
        public event System.EventHandler<TemplateRegisteredTableGetCompletedEventArgs> TemplateRegisteredTableGetCompleted;
        
        public event System.EventHandler<MacrosCrawlsGetCompletedEventArgs> MacrosCrawlsGetCompleted;
        
        public event System.EventHandler<TempateMessagesGetCompletedEventArgs> TempateMessagesGetCompleted;
        
        public event System.EventHandler<TemplateBindsTrailsGetCompletedEventArgs> TemplateBindsTrailsGetCompleted;
        
        public event System.EventHandler<MacrosValuesSetCompletedEventArgs> MacrosValuesSetCompleted;
        
        public event System.EventHandler<TemplateMessagesTextSaveCompletedEventArgs> TemplateMessagesTextSaveCompleted;
        
        public event System.EventHandler<TemplateMessagesTextGetCompletedEventArgs> TemplateMessagesTextGetCompleted;
        
        public event System.EventHandler<TemplatesScheduleAddCompletedEventArgs> TemplatesScheduleAddCompleted;
        
        public event System.EventHandler<TemplatesScheduleGetCompletedEventArgs> TemplatesScheduleGetCompleted;
        
        public event System.EventHandler<TemplatesScheduleDeleteCompletedEventArgs> TemplatesScheduleDeleteCompleted;
        
        public event System.EventHandler<DirectoriesTrailsGetCompletedEventArgs> DirectoriesTrailsGetCompleted;
        
        public event System.EventHandler<ShiftAddCompletedEventArgs> ShiftAddCompleted;
        
        public event System.EventHandler<ShiftStartCompletedEventArgs> ShiftStartCompleted;
        
        public event System.EventHandler<ShiftStopCompletedEventArgs> ShiftStopCompleted;
        
        public event System.EventHandler<ShiftCurrentGetCompletedEventArgs> ShiftCurrentGetCompleted;
        
        public event System.EventHandler<AnnouncementsActualGetCompletedEventArgs> AnnouncementsActualGetCompleted;
        
        public event System.EventHandler<MessagesQueueGetCompletedEventArgs> MessagesQueueGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MessageMarkCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MessageUnMarkCompleted;
        
        public event System.EventHandler<TimeBlockGetCompletedEventArgs> TimeBlockGetCompleted;
        
        public event System.EventHandler<PlaqueAddCompletedEventArgs> PlaqueAddCompleted;
        
        public event System.EventHandler<PlaquesGetCompletedEventArgs> PlaquesGetCompleted;
        
        public event System.EventHandler<PlaqueDeleteCompletedEventArgs> PlaqueDeleteCompleted;
        
        public event System.EventHandler<PlaqueChangeCompletedEventArgs> PlaqueChangeCompleted;
        
        public event System.EventHandler<CuesGetCompletedEventArgs> CuesGetCompleted;
        
        public event System.EventHandler<StorageSCRGetCompletedEventArgs> StorageSCRGetCompleted;
        
        public event System.EventHandler<LogoBindingGetCompletedEventArgs> LogoBindingGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ClipsBDLogCompleted;
        
        public event System.EventHandler<PLFragmentGetCompletedEventArgs> PLFragmentGetCompleted;
        
        public event System.EventHandler<StatGetCompletedEventArgs> StatGetCompleted;
        
        public event System.EventHandler<MessagesGetCompletedEventArgs> MessagesGetCompleted;
        
        public event System.EventHandler<WorkerProgressGetCompletedEventArgs> WorkerProgressGetCompleted;
        
        public event System.EventHandler<ExportCompletedEventArgs> ExportCompleted;
        
        public event System.EventHandler<ExportResultGetCompletedEventArgs> ExportResultGetCompleted;
        
        public event System.EventHandler<RingtonesBindsGetCompletedEventArgs> RingtonesBindsGetCompleted;
        
        public event System.EventHandler<FrequencyOfOccurrenceCompletedEventArgs> FrequencyOfOccurrenceCompleted;
        
        public event System.EventHandler<GridGetCompletedEventArgs> GridGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GridSaveCompleted;
        
        public event System.EventHandler<TransliterationGetCompletedEventArgs> TransliterationGetCompleted;
        
        public event System.EventHandler<DateTimeNowGetCompletedEventArgs> DateTimeNowGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ErrorLoggingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> KnownTypesCompleted;
        
        public event System.EventHandler<UploadFileBeginCompletedEventArgs> UploadFileBeginCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadFileContinueCompleted;
        
        public event System.EventHandler<UploadFileEndCompletedEventArgs> UploadFileEndCompleted;
        
        public event System.EventHandler<IsThereAnyErrorsCompletedEventArgs> IsThereAnyErrorsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ErrorsClearCompleted;
        
        public event System.EventHandler<ErrorsGetCompletedEventArgs> ErrorsGetCompleted;
        
        public event System.EventHandler<ErrorsAllGetCompletedEventArgs> ErrorsAllGetCompleted;
        
        public event System.EventHandler<ErrorLastGetCompletedEventArgs> ErrorLastGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Logger_NoticeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Logger_ErrorCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> InitSessionCompleted;
        
        public event System.EventHandler<InitCompletedEventArgs> InitCompleted;
        
        public event System.EventHandler<AccessScopesGetCompletedEventArgs> AccessScopesGetCompleted;
        
        public event System.EventHandler<ProfileGetCompletedEventArgs> ProfileGetCompleted;
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<AssetsRemoveCompletedEventArgs> AssetsRemoveCompleted;
        
        public event System.EventHandler<AssetsGetCompletedEventArgs> AssetsGetCompleted;
        
        public event System.EventHandler<ProgramsGetCompletedEventArgs> ProgramsGetCompleted;
        
        public event System.EventHandler<ClipGetCompletedEventArgs> ClipGetCompleted;
        
        public event System.EventHandler<ClipsGetCompletedEventArgs> ClipsGetCompleted;
        
        public event System.EventHandler<AdvertisementGetCompletedEventArgs> AdvertisementGetCompleted;
        
        public event System.EventHandler<AdvertisementsGetCompletedEventArgs> AdvertisementsGetCompleted;
        
        public event System.EventHandler<DesignGetCompletedEventArgs> DesignGetCompleted;
        
        public event System.EventHandler<DesignsGetCompletedEventArgs> DesignsGetCompleted;
        
        public event System.EventHandler<AssetVideoTypeGetCompletedEventArgs> AssetVideoTypeGetCompleted;
        
        public event System.EventHandler<ClassesGetCompletedEventArgs> ClassesGetCompleted;
        
        public event System.EventHandler<ClassesSetCompletedEventArgs> ClassesSetCompleted;
        
        public event System.EventHandler<RotationsSetCompletedEventArgs> RotationsSetCompleted;
        
        public event System.EventHandler<StatusesGetCompletedEventArgs> StatusesGetCompleted;
        
        public event System.EventHandler<StatusesClearGetCompletedEventArgs> StatusesClearGetCompleted;
        
        public event System.EventHandler<ChatInOutsGetCompletedEventArgs> ChatInOutsGetCompleted;
        
        public event System.EventHandler<ChatInOutsSaveCompletedEventArgs> ChatInOutsSaveCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RingtoneAddCompleted;
        
        public event System.EventHandler<ClipSaveCompletedEventArgs> ClipSaveCompleted;
        
        public event System.EventHandler<VideoTypeGetCompletedEventArgs> VideoTypeGetCompleted;
        
        public event System.EventHandler<VideoTypesGetCompletedEventArgs> VideoTypesGetCompleted;
        
        public event System.EventHandler<ProgramGetCompletedEventArgs> ProgramGetCompleted;
        
        public event System.EventHandler<AssetsSaveCompletedEventArgs> AssetsSaveCompleted;
        
        public event System.EventHandler<AssetParametersToPlaylistSaveCompletedEventArgs> AssetParametersToPlaylistSaveCompleted;
        
        public event System.EventHandler<ProgramSaveCompletedEventArgs> ProgramSaveCompleted;
        
        public event System.EventHandler<AssetsParentAssignCompletedEventArgs> AssetsParentAssignCompleted;
        
        public event System.EventHandler<AdvertisementSaveCompletedEventArgs> AdvertisementSaveCompleted;
        
        public event System.EventHandler<DesignSaveCompletedEventArgs> DesignSaveCompleted;
        
        public event System.EventHandler<PersonSaveCompletedEventArgs> PersonSaveCompleted;
        
        public event System.EventHandler<PersonTypeGetCompletedEventArgs> PersonTypeGetCompleted;
        
        public event System.EventHandler<PersonsRemoveCompletedEventArgs> PersonsRemoveCompleted;
        
        public event System.EventHandler<PersonsGetCompletedEventArgs> PersonsGetCompleted;
        
        public event System.EventHandler<ArtistsGetCompletedEventArgs> ArtistsGetCompleted;
        
        public event System.EventHandler<ArtistsLoadCompletedEventArgs> ArtistsLoadCompleted;
        
        public event System.EventHandler<StylesGetCompletedEventArgs> StylesGetCompleted;
        
        public event System.EventHandler<StylesLoadCompletedEventArgs> StylesLoadCompleted;
        
        public event System.EventHandler<RotationsGetCompletedEventArgs> RotationsGetCompleted;
        
        public event System.EventHandler<PalettesGetCompletedEventArgs> PalettesGetCompleted;
        
        public event System.EventHandler<SexGetCompletedEventArgs> SexGetCompleted;
        
        public event System.EventHandler<SoundsGetCompletedEventArgs> SoundsGetCompleted;
        
        public event System.EventHandler<CustomsLoadCompletedEventArgs> CustomsLoadCompleted;
        
        public event System.EventHandler<ArtistsCueNameGetCompletedEventArgs> ArtistsCueNameGetCompleted;
        
        public event System.EventHandler<FilesAgeGetCompletedEventArgs> FilesAgeGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> FilesAgeSetCompleted;
        
        public event System.EventHandler<StoragesGetCompletedEventArgs> StoragesGetCompleted;
        
        public event System.EventHandler<FilesGetCompletedEventArgs> FilesGetCompleted;
        
        public event System.EventHandler<FilesWithSourcesGetCompletedEventArgs> FilesWithSourcesGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> FilesRemoveCompleted;
        
        public event System.EventHandler<FileAdditionalInfoGetCompletedEventArgs> FileAdditionalInfoGetCompleted;
        
        public event System.EventHandler<FileCheckIsInPlaylistCompletedEventArgs> FileCheckIsInPlaylistCompleted;
        
        public event System.EventHandler<FileDurationQueryCompletedEventArgs> FileDurationQueryCompleted;
        
        public event System.EventHandler<CommandStatusGetCompletedEventArgs> CommandStatusGetCompleted;
        
        public event System.EventHandler<FramesQtyGetCompletedEventArgs> FramesQtyGetCompleted;
        
        public event System.EventHandler<StorageFilesUnusedGetCompletedEventArgs> StorageFilesUnusedGetCompleted;
        
        public event System.EventHandler<FileIDsInStockGetCompletedEventArgs> FileIDsInStockGetCompleted;
        
        public event System.EventHandler<TSRItemsGetCompletedEventArgs> TSRItemsGetCompleted;
        
        public event System.EventHandler<IngestForReplacedFileCompletedEventArgs> IngestForReplacedFileCompleted;
        
        public event System.EventHandler<IngestCompletedEventArgs> IngestCompleted;
        
        public event System.EventHandler<IsThereSameFileCompletedEventArgs> IsThereSameFileCompleted;
        
        public event System.EventHandler<AreThereSameFilesCompletedEventArgs> AreThereSameFilesCompleted;
        
        public event System.EventHandler<IsThereSameCustomValueCompletedEventArgs> IsThereSameCustomValueCompleted;
        
        public event System.EventHandler<IsThereSameCustomValuesCompletedEventArgs> IsThereSameCustomValuesCompleted;
        
        public event System.EventHandler<RegisteredTablesGetCompletedEventArgs> RegisteredTablesGetCompleted;
        
        public event System.EventHandler<PlaylistItemsGetCompletedEventArgs> PlaylistItemsGetCompleted;
        
        public event System.EventHandler<PlaylistItemMinimumForImmediatePLGetCompletedEventArgs> PlaylistItemMinimumForImmediatePLGetCompleted;
        
        public event System.EventHandler<PlaylistItemsArchGetCompletedEventArgs> PlaylistItemsArchGetCompleted;
        
        public event System.EventHandler<PlaylistItemsPlanGetCompletedEventArgs> PlaylistItemsPlanGetCompleted;
        
        public event System.EventHandler<PlaylistItemsAdvertsGetCompletedEventArgs> PlaylistItemsAdvertsGetCompleted;
        
        public event System.EventHandler<NearestAdvertsBlockCompletedEventArgs> NearestAdvertsBlockCompleted;
        
        public event System.EventHandler<PlaylistItemsDeleteSinceCompletedEventArgs> PlaylistItemsDeleteSinceCompleted;
        
        public event System.EventHandler<PlaylistItemsDeleteCompletedEventArgs> PlaylistItemsDeleteCompleted;
        
        public event System.EventHandler<PlaylistItemsTimingsSetCompletedEventArgs> PlaylistItemsTimingsSetCompleted;
        
        public event System.EventHandler<PlaylistItemStartsSetCompletedEventArgs> PlaylistItemStartsSetCompleted;
        
        public event System.EventHandler<PlaylistRecalculateQueryCompletedEventArgs> PlaylistRecalculateQueryCompleted;
        
        public event System.EventHandler<PlaylistItemAdd_ResultGetCompletedEventArgs> PlaylistItemAdd_ResultGetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> PlaylistItemsAddWorkerCompleted;
        
        public event System.EventHandler<ComingUpGetCompletedEventArgs> ComingUpGetCompleted;
        
        public event System.EventHandler<PlaylistInsertCompletedEventArgs> PlaylistInsertCompleted;
        
        public event System.EventHandler<PlaylistInsertCopiesCompletedEventArgs> PlaylistInsertCopiesCompleted;
        
        public event System.EventHandler<InsertInBlockCompletedEventArgs> InsertInBlockCompleted;
        
        public event System.EventHandler<GroupMovingCompletedEventArgs> GroupMovingCompleted;
        
        public event System.EventHandler<PLIPropertiesSetCompletedEventArgs> PLIPropertiesSetCompleted;
        
        public event System.EventHandler<PlaylistLastElementGetCompletedEventArgs> PlaylistLastElementGetCompleted;
        
        public event System.EventHandler<BeforeAddCheckRangeCompletedEventArgs> BeforeAddCheckRangeCompleted;
        
        public event System.EventHandler<AdvancedPlaylistsGetCompletedEventArgs> AdvancedPlaylistsGetCompleted;
        
        public event System.EventHandler<AdvancedPlaylistGetCompletedEventArgs> AdvancedPlaylistGetCompleted;
        
        public event System.EventHandler<AdvancedPlaylistAddReplaceCompletedEventArgs> AdvancedPlaylistAddReplaceCompleted;
        
        public event System.EventHandler<AdvancedPlaylistDeleteCompletedEventArgs> AdvancedPlaylistDeleteCompleted;
        
        public event System.EventHandler<AdvancedPlaylistRenameCompletedEventArgs> AdvancedPlaylistRenameCompleted;
        
        public event System.EventHandler<AdvancedPlaylistStartCompletedEventArgs> AdvancedPlaylistStartCompleted;
        
        public event System.EventHandler<AdvancedPlaylistItemSaveCompletedEventArgs> AdvancedPlaylistItemSaveCompleted;
        
        public event System.EventHandler<PowerGoldFileParseCompletedEventArgs> PowerGoldFileParseCompleted;
        
        public event System.EventHandler<VideoInternationalFileParseCompletedEventArgs> VideoInternationalFileParseCompleted;
        
        public event System.EventHandler<DesignFileParseCompletedEventArgs> DesignFileParseCompleted;
        
        public event System.EventHandler<PlaylistsMergeCompletedEventArgs> PlaylistsMergeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginImportLogGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportLogGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string helpers.replica.services.dbinteract.DBInteractSoap.EndImportLogGet(System.IAsyncResult result) {
            return base.Channel.EndImportLogGet(result);
        }
        
        private System.IAsyncResult OnBeginImportLogGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginImportLogGet(callback, asyncState);
        }
        
        private object[] OnEndImportLogGet(System.IAsyncResult result) {
            string retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndImportLogGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportLogGetCompleted(object state) {
            if ((this.ImportLogGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportLogGetCompleted(this, new ImportLogGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportLogGetAsync() {
            this.ImportLogGetAsync(null);
        }
        
        public void ImportLogGetAsync(object userState) {
            if ((this.onBeginImportLogGetDelegate == null)) {
                this.onBeginImportLogGetDelegate = new BeginOperationDelegate(this.OnBeginImportLogGet);
            }
            if ((this.onEndImportLogGetDelegate == null)) {
                this.onEndImportLogGetDelegate = new EndOperationDelegate(this.OnEndImportLogGet);
            }
            if ((this.onImportLogGetCompletedDelegate == null)) {
                this.onImportLogGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportLogGetCompleted);
            }
            base.InvokeAsync(this.onBeginImportLogGetDelegate, null, this.onEndImportLogGetDelegate, this.onImportLogGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTemplateRegisteredTableGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemplateRegisteredTableGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.RegisteredTable helpers.replica.services.dbinteract.DBInteractSoap.EndTemplateRegisteredTableGet(System.IAsyncResult result) {
            return base.Channel.EndTemplateRegisteredTableGet(result);
        }
        
        private System.IAsyncResult OnBeginTemplateRegisteredTableGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTemplateRegisteredTableGet(callback, asyncState);
        }
        
        private object[] OnEndTemplateRegisteredTableGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.RegisteredTable retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTemplateRegisteredTableGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTemplateRegisteredTableGetCompleted(object state) {
            if ((this.TemplateRegisteredTableGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TemplateRegisteredTableGetCompleted(this, new TemplateRegisteredTableGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TemplateRegisteredTableGetAsync() {
            this.TemplateRegisteredTableGetAsync(null);
        }
        
        public void TemplateRegisteredTableGetAsync(object userState) {
            if ((this.onBeginTemplateRegisteredTableGetDelegate == null)) {
                this.onBeginTemplateRegisteredTableGetDelegate = new BeginOperationDelegate(this.OnBeginTemplateRegisteredTableGet);
            }
            if ((this.onEndTemplateRegisteredTableGetDelegate == null)) {
                this.onEndTemplateRegisteredTableGetDelegate = new EndOperationDelegate(this.OnEndTemplateRegisteredTableGet);
            }
            if ((this.onTemplateRegisteredTableGetCompletedDelegate == null)) {
                this.onTemplateRegisteredTableGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTemplateRegisteredTableGetCompleted);
            }
            base.InvokeAsync(this.onBeginTemplateRegisteredTableGetDelegate, null, this.onEndTemplateRegisteredTableGetDelegate, this.onTemplateRegisteredTableGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginMacrosCrawlsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMacrosCrawlsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Macro[] helpers.replica.services.dbinteract.DBInteractSoap.EndMacrosCrawlsGet(System.IAsyncResult result) {
            return base.Channel.EndMacrosCrawlsGet(result);
        }
        
        private System.IAsyncResult OnBeginMacrosCrawlsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginMacrosCrawlsGet(callback, asyncState);
        }
        
        private object[] OnEndMacrosCrawlsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Macro[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndMacrosCrawlsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMacrosCrawlsGetCompleted(object state) {
            if ((this.MacrosCrawlsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MacrosCrawlsGetCompleted(this, new MacrosCrawlsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MacrosCrawlsGetAsync() {
            this.MacrosCrawlsGetAsync(null);
        }
        
        public void MacrosCrawlsGetAsync(object userState) {
            if ((this.onBeginMacrosCrawlsGetDelegate == null)) {
                this.onBeginMacrosCrawlsGetDelegate = new BeginOperationDelegate(this.OnBeginMacrosCrawlsGet);
            }
            if ((this.onEndMacrosCrawlsGetDelegate == null)) {
                this.onEndMacrosCrawlsGetDelegate = new EndOperationDelegate(this.OnEndMacrosCrawlsGet);
            }
            if ((this.onMacrosCrawlsGetCompletedDelegate == null)) {
                this.onMacrosCrawlsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMacrosCrawlsGetCompleted);
            }
            base.InvokeAsync(this.onBeginMacrosCrawlsGetDelegate, null, this.onEndMacrosCrawlsGetDelegate, this.onMacrosCrawlsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTempateMessagesGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTempateMessagesGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Template[] helpers.replica.services.dbinteract.DBInteractSoap.EndTempateMessagesGet(System.IAsyncResult result) {
            return base.Channel.EndTempateMessagesGet(result);
        }
        
        private System.IAsyncResult OnBeginTempateMessagesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTempateMessagesGet(callback, asyncState);
        }
        
        private object[] OnEndTempateMessagesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Template[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTempateMessagesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTempateMessagesGetCompleted(object state) {
            if ((this.TempateMessagesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TempateMessagesGetCompleted(this, new TempateMessagesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TempateMessagesGetAsync() {
            this.TempateMessagesGetAsync(null);
        }
        
        public void TempateMessagesGetAsync(object userState) {
            if ((this.onBeginTempateMessagesGetDelegate == null)) {
                this.onBeginTempateMessagesGetDelegate = new BeginOperationDelegate(this.OnBeginTempateMessagesGet);
            }
            if ((this.onEndTempateMessagesGetDelegate == null)) {
                this.onEndTempateMessagesGetDelegate = new EndOperationDelegate(this.OnEndTempateMessagesGet);
            }
            if ((this.onTempateMessagesGetCompletedDelegate == null)) {
                this.onTempateMessagesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTempateMessagesGetCompleted);
            }
            base.InvokeAsync(this.onBeginTempateMessagesGetDelegate, null, this.onEndTempateMessagesGetDelegate, this.onTempateMessagesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTemplateBindsTrailsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemplateBindsTrailsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.TemplateBind[] helpers.replica.services.dbinteract.DBInteractSoap.EndTemplateBindsTrailsGet(System.IAsyncResult result) {
            return base.Channel.EndTemplateBindsTrailsGet(result);
        }
        
        private System.IAsyncResult OnBeginTemplateBindsTrailsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTemplateBindsTrailsGet(callback, asyncState);
        }
        
        private object[] OnEndTemplateBindsTrailsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.TemplateBind[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTemplateBindsTrailsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTemplateBindsTrailsGetCompleted(object state) {
            if ((this.TemplateBindsTrailsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TemplateBindsTrailsGetCompleted(this, new TemplateBindsTrailsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TemplateBindsTrailsGetAsync() {
            this.TemplateBindsTrailsGetAsync(null);
        }
        
        public void TemplateBindsTrailsGetAsync(object userState) {
            if ((this.onBeginTemplateBindsTrailsGetDelegate == null)) {
                this.onBeginTemplateBindsTrailsGetDelegate = new BeginOperationDelegate(this.OnBeginTemplateBindsTrailsGet);
            }
            if ((this.onEndTemplateBindsTrailsGetDelegate == null)) {
                this.onEndTemplateBindsTrailsGetDelegate = new EndOperationDelegate(this.OnEndTemplateBindsTrailsGet);
            }
            if ((this.onTemplateBindsTrailsGetCompletedDelegate == null)) {
                this.onTemplateBindsTrailsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTemplateBindsTrailsGetCompleted);
            }
            base.InvokeAsync(this.onBeginTemplateBindsTrailsGetDelegate, null, this.onEndTemplateBindsTrailsGetDelegate, this.onTemplateBindsTrailsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginMacrosValuesSet(helpers.replica.services.dbinteract.Macro[] aMacros, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMacrosValuesSet(aMacros, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndMacrosValuesSet(System.IAsyncResult result) {
            return base.Channel.EndMacrosValuesSet(result);
        }
        
        private System.IAsyncResult OnBeginMacrosValuesSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Macro[] aMacros = ((helpers.replica.services.dbinteract.Macro[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginMacrosValuesSet(aMacros, callback, asyncState);
        }
        
        private object[] OnEndMacrosValuesSet(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndMacrosValuesSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMacrosValuesSetCompleted(object state) {
            if ((this.MacrosValuesSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MacrosValuesSetCompleted(this, new MacrosValuesSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MacrosValuesSetAsync(helpers.replica.services.dbinteract.Macro[] aMacros) {
            this.MacrosValuesSetAsync(aMacros, null);
        }
        
        public void MacrosValuesSetAsync(helpers.replica.services.dbinteract.Macro[] aMacros, object userState) {
            if ((this.onBeginMacrosValuesSetDelegate == null)) {
                this.onBeginMacrosValuesSetDelegate = new BeginOperationDelegate(this.OnBeginMacrosValuesSet);
            }
            if ((this.onEndMacrosValuesSetDelegate == null)) {
                this.onEndMacrosValuesSetDelegate = new EndOperationDelegate(this.OnEndMacrosValuesSet);
            }
            if ((this.onMacrosValuesSetCompletedDelegate == null)) {
                this.onMacrosValuesSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMacrosValuesSetCompleted);
            }
            base.InvokeAsync(this.onBeginMacrosValuesSetDelegate, new object[] {
                        aMacros}, this.onEndMacrosValuesSetDelegate, this.onMacrosValuesSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTemplateMessagesTextSave(helpers.replica.services.dbinteract.DictionaryElement[] aDict, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemplateMessagesTextSave(aDict, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndTemplateMessagesTextSave(System.IAsyncResult result) {
            return base.Channel.EndTemplateMessagesTextSave(result);
        }
        
        private System.IAsyncResult OnBeginTemplateMessagesTextSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.DictionaryElement[] aDict = ((helpers.replica.services.dbinteract.DictionaryElement[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTemplateMessagesTextSave(aDict, callback, asyncState);
        }
        
        private object[] OnEndTemplateMessagesTextSave(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTemplateMessagesTextSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTemplateMessagesTextSaveCompleted(object state) {
            if ((this.TemplateMessagesTextSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TemplateMessagesTextSaveCompleted(this, new TemplateMessagesTextSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TemplateMessagesTextSaveAsync(helpers.replica.services.dbinteract.DictionaryElement[] aDict) {
            this.TemplateMessagesTextSaveAsync(aDict, null);
        }
        
        public void TemplateMessagesTextSaveAsync(helpers.replica.services.dbinteract.DictionaryElement[] aDict, object userState) {
            if ((this.onBeginTemplateMessagesTextSaveDelegate == null)) {
                this.onBeginTemplateMessagesTextSaveDelegate = new BeginOperationDelegate(this.OnBeginTemplateMessagesTextSave);
            }
            if ((this.onEndTemplateMessagesTextSaveDelegate == null)) {
                this.onEndTemplateMessagesTextSaveDelegate = new EndOperationDelegate(this.OnEndTemplateMessagesTextSave);
            }
            if ((this.onTemplateMessagesTextSaveCompletedDelegate == null)) {
                this.onTemplateMessagesTextSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTemplateMessagesTextSaveCompleted);
            }
            base.InvokeAsync(this.onBeginTemplateMessagesTextSaveDelegate, new object[] {
                        aDict}, this.onEndTemplateMessagesTextSaveDelegate, this.onTemplateMessagesTextSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTemplateMessagesTextGet(helpers.replica.services.dbinteract.Template[] aMessages, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemplateMessagesTextGet(aMessages, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.DictionaryElement[] helpers.replica.services.dbinteract.DBInteractSoap.EndTemplateMessagesTextGet(System.IAsyncResult result) {
            return base.Channel.EndTemplateMessagesTextGet(result);
        }
        
        private System.IAsyncResult OnBeginTemplateMessagesTextGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Template[] aMessages = ((helpers.replica.services.dbinteract.Template[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTemplateMessagesTextGet(aMessages, callback, asyncState);
        }
        
        private object[] OnEndTemplateMessagesTextGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.DictionaryElement[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTemplateMessagesTextGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTemplateMessagesTextGetCompleted(object state) {
            if ((this.TemplateMessagesTextGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TemplateMessagesTextGetCompleted(this, new TemplateMessagesTextGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TemplateMessagesTextGetAsync(helpers.replica.services.dbinteract.Template[] aMessages) {
            this.TemplateMessagesTextGetAsync(aMessages, null);
        }
        
        public void TemplateMessagesTextGetAsync(helpers.replica.services.dbinteract.Template[] aMessages, object userState) {
            if ((this.onBeginTemplateMessagesTextGetDelegate == null)) {
                this.onBeginTemplateMessagesTextGetDelegate = new BeginOperationDelegate(this.OnBeginTemplateMessagesTextGet);
            }
            if ((this.onEndTemplateMessagesTextGetDelegate == null)) {
                this.onEndTemplateMessagesTextGetDelegate = new EndOperationDelegate(this.OnEndTemplateMessagesTextGet);
            }
            if ((this.onTemplateMessagesTextGetCompletedDelegate == null)) {
                this.onTemplateMessagesTextGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTemplateMessagesTextGetCompleted);
            }
            base.InvokeAsync(this.onBeginTemplateMessagesTextGetDelegate, new object[] {
                        aMessages}, this.onEndTemplateMessagesTextGetDelegate, this.onTemplateMessagesTextGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTemplatesScheduleAdd(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemplatesScheduleAdd(aTemplatesSchedule, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndTemplatesScheduleAdd(System.IAsyncResult result) {
            return base.Channel.EndTemplatesScheduleAdd(result);
        }
        
        private System.IAsyncResult OnBeginTemplatesScheduleAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule = ((helpers.replica.services.dbinteract.TemplatesSchedule[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTemplatesScheduleAdd(aTemplatesSchedule, callback, asyncState);
        }
        
        private object[] OnEndTemplatesScheduleAdd(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTemplatesScheduleAdd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTemplatesScheduleAddCompleted(object state) {
            if ((this.TemplatesScheduleAddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TemplatesScheduleAddCompleted(this, new TemplatesScheduleAddCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TemplatesScheduleAddAsync(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule) {
            this.TemplatesScheduleAddAsync(aTemplatesSchedule, null);
        }
        
        public void TemplatesScheduleAddAsync(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule, object userState) {
            if ((this.onBeginTemplatesScheduleAddDelegate == null)) {
                this.onBeginTemplatesScheduleAddDelegate = new BeginOperationDelegate(this.OnBeginTemplatesScheduleAdd);
            }
            if ((this.onEndTemplatesScheduleAddDelegate == null)) {
                this.onEndTemplatesScheduleAddDelegate = new EndOperationDelegate(this.OnEndTemplatesScheduleAdd);
            }
            if ((this.onTemplatesScheduleAddCompletedDelegate == null)) {
                this.onTemplatesScheduleAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTemplatesScheduleAddCompleted);
            }
            base.InvokeAsync(this.onBeginTemplatesScheduleAddDelegate, new object[] {
                        aTemplatesSchedule}, this.onEndTemplatesScheduleAddDelegate, this.onTemplatesScheduleAddCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTemplatesScheduleGet(helpers.replica.services.dbinteract.TemplateBind[] aTemplateBinds, System.DateTime dtBegin, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemplatesScheduleGet(aTemplateBinds, dtBegin, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.TemplatesSchedule[] helpers.replica.services.dbinteract.DBInteractSoap.EndTemplatesScheduleGet(System.IAsyncResult result) {
            return base.Channel.EndTemplatesScheduleGet(result);
        }
        
        private System.IAsyncResult OnBeginTemplatesScheduleGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.TemplateBind[] aTemplateBinds = ((helpers.replica.services.dbinteract.TemplateBind[])(inValues[0]));
            System.DateTime dtBegin = ((System.DateTime)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTemplatesScheduleGet(aTemplateBinds, dtBegin, callback, asyncState);
        }
        
        private object[] OnEndTemplatesScheduleGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.TemplatesSchedule[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTemplatesScheduleGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTemplatesScheduleGetCompleted(object state) {
            if ((this.TemplatesScheduleGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TemplatesScheduleGetCompleted(this, new TemplatesScheduleGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TemplatesScheduleGetAsync(helpers.replica.services.dbinteract.TemplateBind[] aTemplateBinds, System.DateTime dtBegin) {
            this.TemplatesScheduleGetAsync(aTemplateBinds, dtBegin, null);
        }
        
        public void TemplatesScheduleGetAsync(helpers.replica.services.dbinteract.TemplateBind[] aTemplateBinds, System.DateTime dtBegin, object userState) {
            if ((this.onBeginTemplatesScheduleGetDelegate == null)) {
                this.onBeginTemplatesScheduleGetDelegate = new BeginOperationDelegate(this.OnBeginTemplatesScheduleGet);
            }
            if ((this.onEndTemplatesScheduleGetDelegate == null)) {
                this.onEndTemplatesScheduleGetDelegate = new EndOperationDelegate(this.OnEndTemplatesScheduleGet);
            }
            if ((this.onTemplatesScheduleGetCompletedDelegate == null)) {
                this.onTemplatesScheduleGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTemplatesScheduleGetCompleted);
            }
            base.InvokeAsync(this.onBeginTemplatesScheduleGetDelegate, new object[] {
                        aTemplateBinds,
                        dtBegin}, this.onEndTemplatesScheduleGetDelegate, this.onTemplatesScheduleGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTemplatesScheduleDelete(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTemplatesScheduleDelete(aTemplatesSchedule, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndTemplatesScheduleDelete(System.IAsyncResult result) {
            return base.Channel.EndTemplatesScheduleDelete(result);
        }
        
        private System.IAsyncResult OnBeginTemplatesScheduleDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule = ((helpers.replica.services.dbinteract.TemplatesSchedule[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTemplatesScheduleDelete(aTemplatesSchedule, callback, asyncState);
        }
        
        private object[] OnEndTemplatesScheduleDelete(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTemplatesScheduleDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTemplatesScheduleDeleteCompleted(object state) {
            if ((this.TemplatesScheduleDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TemplatesScheduleDeleteCompleted(this, new TemplatesScheduleDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TemplatesScheduleDeleteAsync(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule) {
            this.TemplatesScheduleDeleteAsync(aTemplatesSchedule, null);
        }
        
        public void TemplatesScheduleDeleteAsync(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule, object userState) {
            if ((this.onBeginTemplatesScheduleDeleteDelegate == null)) {
                this.onBeginTemplatesScheduleDeleteDelegate = new BeginOperationDelegate(this.OnBeginTemplatesScheduleDelete);
            }
            if ((this.onEndTemplatesScheduleDeleteDelegate == null)) {
                this.onEndTemplatesScheduleDeleteDelegate = new EndOperationDelegate(this.OnEndTemplatesScheduleDelete);
            }
            if ((this.onTemplatesScheduleDeleteCompletedDelegate == null)) {
                this.onTemplatesScheduleDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTemplatesScheduleDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginTemplatesScheduleDeleteDelegate, new object[] {
                        aTemplatesSchedule}, this.onEndTemplatesScheduleDeleteDelegate, this.onTemplatesScheduleDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginDirectoriesTrailsGet(string sPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDirectoriesTrailsGet(sPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] helpers.replica.services.dbinteract.DBInteractSoap.EndDirectoriesTrailsGet(System.IAsyncResult result) {
            return base.Channel.EndDirectoriesTrailsGet(result);
        }
        
        private System.IAsyncResult OnBeginDirectoriesTrailsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sPath = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginDirectoriesTrailsGet(sPath, callback, asyncState);
        }
        
        private object[] OnEndDirectoriesTrailsGet(System.IAsyncResult result) {
            string[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndDirectoriesTrailsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDirectoriesTrailsGetCompleted(object state) {
            if ((this.DirectoriesTrailsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DirectoriesTrailsGetCompleted(this, new DirectoriesTrailsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DirectoriesTrailsGetAsync(string sPath) {
            this.DirectoriesTrailsGetAsync(sPath, null);
        }
        
        public void DirectoriesTrailsGetAsync(string sPath, object userState) {
            if ((this.onBeginDirectoriesTrailsGetDelegate == null)) {
                this.onBeginDirectoriesTrailsGetDelegate = new BeginOperationDelegate(this.OnBeginDirectoriesTrailsGet);
            }
            if ((this.onEndDirectoriesTrailsGetDelegate == null)) {
                this.onEndDirectoriesTrailsGetDelegate = new EndOperationDelegate(this.OnEndDirectoriesTrailsGet);
            }
            if ((this.onDirectoriesTrailsGetCompletedDelegate == null)) {
                this.onDirectoriesTrailsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDirectoriesTrailsGetCompleted);
            }
            base.InvokeAsync(this.onBeginDirectoriesTrailsGetDelegate, new object[] {
                        sPath}, this.onEndDirectoriesTrailsGetDelegate, this.onDirectoriesTrailsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginShiftAdd(helpers.replica.services.dbinteract.IdNamePair cPreset, string sSubject, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShiftAdd(cPreset, sSubject, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Shift helpers.replica.services.dbinteract.DBInteractSoap.EndShiftAdd(System.IAsyncResult result) {
            return base.Channel.EndShiftAdd(result);
        }
        
        private System.IAsyncResult OnBeginShiftAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.IdNamePair cPreset = ((helpers.replica.services.dbinteract.IdNamePair)(inValues[0]));
            string sSubject = ((string)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginShiftAdd(cPreset, sSubject, callback, asyncState);
        }
        
        private object[] OnEndShiftAdd(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Shift retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndShiftAdd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShiftAddCompleted(object state) {
            if ((this.ShiftAddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShiftAddCompleted(this, new ShiftAddCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShiftAddAsync(helpers.replica.services.dbinteract.IdNamePair cPreset, string sSubject) {
            this.ShiftAddAsync(cPreset, sSubject, null);
        }
        
        public void ShiftAddAsync(helpers.replica.services.dbinteract.IdNamePair cPreset, string sSubject, object userState) {
            if ((this.onBeginShiftAddDelegate == null)) {
                this.onBeginShiftAddDelegate = new BeginOperationDelegate(this.OnBeginShiftAdd);
            }
            if ((this.onEndShiftAddDelegate == null)) {
                this.onEndShiftAddDelegate = new EndOperationDelegate(this.OnEndShiftAdd);
            }
            if ((this.onShiftAddCompletedDelegate == null)) {
                this.onShiftAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShiftAddCompleted);
            }
            base.InvokeAsync(this.onBeginShiftAddDelegate, new object[] {
                        cPreset,
                        sSubject}, this.onEndShiftAddDelegate, this.onShiftAddCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginShiftStart(helpers.replica.services.dbinteract.Shift cShift, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShiftStart(cShift, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndShiftStart(System.IAsyncResult result) {
            return base.Channel.EndShiftStart(result);
        }
        
        private System.IAsyncResult OnBeginShiftStart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Shift cShift = ((helpers.replica.services.dbinteract.Shift)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginShiftStart(cShift, callback, asyncState);
        }
        
        private object[] OnEndShiftStart(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndShiftStart(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShiftStartCompleted(object state) {
            if ((this.ShiftStartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShiftStartCompleted(this, new ShiftStartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShiftStartAsync(helpers.replica.services.dbinteract.Shift cShift) {
            this.ShiftStartAsync(cShift, null);
        }
        
        public void ShiftStartAsync(helpers.replica.services.dbinteract.Shift cShift, object userState) {
            if ((this.onBeginShiftStartDelegate == null)) {
                this.onBeginShiftStartDelegate = new BeginOperationDelegate(this.OnBeginShiftStart);
            }
            if ((this.onEndShiftStartDelegate == null)) {
                this.onEndShiftStartDelegate = new EndOperationDelegate(this.OnEndShiftStart);
            }
            if ((this.onShiftStartCompletedDelegate == null)) {
                this.onShiftStartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShiftStartCompleted);
            }
            base.InvokeAsync(this.onBeginShiftStartDelegate, new object[] {
                        cShift}, this.onEndShiftStartDelegate, this.onShiftStartCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginShiftStop(helpers.replica.services.dbinteract.Shift cShift, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShiftStop(cShift, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndShiftStop(System.IAsyncResult result) {
            return base.Channel.EndShiftStop(result);
        }
        
        private System.IAsyncResult OnBeginShiftStop(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Shift cShift = ((helpers.replica.services.dbinteract.Shift)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginShiftStop(cShift, callback, asyncState);
        }
        
        private object[] OnEndShiftStop(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndShiftStop(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShiftStopCompleted(object state) {
            if ((this.ShiftStopCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShiftStopCompleted(this, new ShiftStopCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShiftStopAsync(helpers.replica.services.dbinteract.Shift cShift) {
            this.ShiftStopAsync(cShift, null);
        }
        
        public void ShiftStopAsync(helpers.replica.services.dbinteract.Shift cShift, object userState) {
            if ((this.onBeginShiftStopDelegate == null)) {
                this.onBeginShiftStopDelegate = new BeginOperationDelegate(this.OnBeginShiftStop);
            }
            if ((this.onEndShiftStopDelegate == null)) {
                this.onEndShiftStopDelegate = new EndOperationDelegate(this.OnEndShiftStop);
            }
            if ((this.onShiftStopCompletedDelegate == null)) {
                this.onShiftStopCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShiftStopCompleted);
            }
            base.InvokeAsync(this.onBeginShiftStopDelegate, new object[] {
                        cShift}, this.onEndShiftStopDelegate, this.onShiftStopCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginShiftCurrentGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShiftCurrentGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Shift helpers.replica.services.dbinteract.DBInteractSoap.EndShiftCurrentGet(System.IAsyncResult result) {
            return base.Channel.EndShiftCurrentGet(result);
        }
        
        private System.IAsyncResult OnBeginShiftCurrentGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginShiftCurrentGet(callback, asyncState);
        }
        
        private object[] OnEndShiftCurrentGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Shift retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndShiftCurrentGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnShiftCurrentGetCompleted(object state) {
            if ((this.ShiftCurrentGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShiftCurrentGetCompleted(this, new ShiftCurrentGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShiftCurrentGetAsync() {
            this.ShiftCurrentGetAsync(null);
        }
        
        public void ShiftCurrentGetAsync(object userState) {
            if ((this.onBeginShiftCurrentGetDelegate == null)) {
                this.onBeginShiftCurrentGetDelegate = new BeginOperationDelegate(this.OnBeginShiftCurrentGet);
            }
            if ((this.onEndShiftCurrentGetDelegate == null)) {
                this.onEndShiftCurrentGetDelegate = new EndOperationDelegate(this.OnEndShiftCurrentGet);
            }
            if ((this.onShiftCurrentGetCompletedDelegate == null)) {
                this.onShiftCurrentGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShiftCurrentGetCompleted);
            }
            base.InvokeAsync(this.onBeginShiftCurrentGetDelegate, null, this.onEndShiftCurrentGetDelegate, this.onShiftCurrentGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAnnouncementsActualGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAnnouncementsActualGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Announcement[] helpers.replica.services.dbinteract.DBInteractSoap.EndAnnouncementsActualGet(System.IAsyncResult result) {
            return base.Channel.EndAnnouncementsActualGet(result);
        }
        
        private System.IAsyncResult OnBeginAnnouncementsActualGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAnnouncementsActualGet(callback, asyncState);
        }
        
        private object[] OnEndAnnouncementsActualGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Announcement[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAnnouncementsActualGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAnnouncementsActualGetCompleted(object state) {
            if ((this.AnnouncementsActualGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AnnouncementsActualGetCompleted(this, new AnnouncementsActualGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AnnouncementsActualGetAsync() {
            this.AnnouncementsActualGetAsync(null);
        }
        
        public void AnnouncementsActualGetAsync(object userState) {
            if ((this.onBeginAnnouncementsActualGetDelegate == null)) {
                this.onBeginAnnouncementsActualGetDelegate = new BeginOperationDelegate(this.OnBeginAnnouncementsActualGet);
            }
            if ((this.onEndAnnouncementsActualGetDelegate == null)) {
                this.onEndAnnouncementsActualGetDelegate = new EndOperationDelegate(this.OnEndAnnouncementsActualGet);
            }
            if ((this.onAnnouncementsActualGetCompletedDelegate == null)) {
                this.onAnnouncementsActualGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAnnouncementsActualGetCompleted);
            }
            base.InvokeAsync(this.onBeginAnnouncementsActualGetDelegate, null, this.onEndAnnouncementsActualGetDelegate, this.onAnnouncementsActualGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginMessagesQueueGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessagesQueueGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Message[] helpers.replica.services.dbinteract.DBInteractSoap.EndMessagesQueueGet(System.IAsyncResult result) {
            return base.Channel.EndMessagesQueueGet(result);
        }
        
        private System.IAsyncResult OnBeginMessagesQueueGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginMessagesQueueGet(callback, asyncState);
        }
        
        private object[] OnEndMessagesQueueGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Message[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndMessagesQueueGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessagesQueueGetCompleted(object state) {
            if ((this.MessagesQueueGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MessagesQueueGetCompleted(this, new MessagesQueueGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MessagesQueueGetAsync() {
            this.MessagesQueueGetAsync(null);
        }
        
        public void MessagesQueueGetAsync(object userState) {
            if ((this.onBeginMessagesQueueGetDelegate == null)) {
                this.onBeginMessagesQueueGetDelegate = new BeginOperationDelegate(this.OnBeginMessagesQueueGet);
            }
            if ((this.onEndMessagesQueueGetDelegate == null)) {
                this.onEndMessagesQueueGetDelegate = new EndOperationDelegate(this.OnEndMessagesQueueGet);
            }
            if ((this.onMessagesQueueGetCompletedDelegate == null)) {
                this.onMessagesQueueGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessagesQueueGetCompleted);
            }
            base.InvokeAsync(this.onBeginMessagesQueueGetDelegate, null, this.onEndMessagesQueueGetDelegate, this.onMessagesQueueGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginMessageMark(long nID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessageMark(nID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndMessageMark(System.IAsyncResult result) {
            base.Channel.EndMessageMark(result);
        }
        
        private System.IAsyncResult OnBeginMessageMark(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginMessageMark(nID, callback, asyncState);
        }
        
        private object[] OnEndMessageMark(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndMessageMark(result);
            return null;
        }
        
        private void OnMessageMarkCompleted(object state) {
            if ((this.MessageMarkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MessageMarkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MessageMarkAsync(long nID) {
            this.MessageMarkAsync(nID, null);
        }
        
        public void MessageMarkAsync(long nID, object userState) {
            if ((this.onBeginMessageMarkDelegate == null)) {
                this.onBeginMessageMarkDelegate = new BeginOperationDelegate(this.OnBeginMessageMark);
            }
            if ((this.onEndMessageMarkDelegate == null)) {
                this.onEndMessageMarkDelegate = new EndOperationDelegate(this.OnEndMessageMark);
            }
            if ((this.onMessageMarkCompletedDelegate == null)) {
                this.onMessageMarkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessageMarkCompleted);
            }
            base.InvokeAsync(this.onBeginMessageMarkDelegate, new object[] {
                        nID}, this.onEndMessageMarkDelegate, this.onMessageMarkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginMessageUnMark(long nID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessageUnMark(nID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndMessageUnMark(System.IAsyncResult result) {
            base.Channel.EndMessageUnMark(result);
        }
        
        private System.IAsyncResult OnBeginMessageUnMark(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginMessageUnMark(nID, callback, asyncState);
        }
        
        private object[] OnEndMessageUnMark(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndMessageUnMark(result);
            return null;
        }
        
        private void OnMessageUnMarkCompleted(object state) {
            if ((this.MessageUnMarkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MessageUnMarkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MessageUnMarkAsync(long nID) {
            this.MessageUnMarkAsync(nID, null);
        }
        
        public void MessageUnMarkAsync(long nID, object userState) {
            if ((this.onBeginMessageUnMarkDelegate == null)) {
                this.onBeginMessageUnMarkDelegate = new BeginOperationDelegate(this.OnBeginMessageUnMark);
            }
            if ((this.onEndMessageUnMarkDelegate == null)) {
                this.onEndMessageUnMarkDelegate = new EndOperationDelegate(this.OnEndMessageUnMark);
            }
            if ((this.onMessageUnMarkCompletedDelegate == null)) {
                this.onMessageUnMarkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessageUnMarkCompleted);
            }
            base.InvokeAsync(this.onBeginMessageUnMarkDelegate, new object[] {
                        nID}, this.onEndMessageUnMarkDelegate, this.onMessageUnMarkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTimeBlockGet(System.DateTime dt, bool bForward, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTimeBlockGet(dt, bForward, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndTimeBlockGet(System.IAsyncResult result) {
            return base.Channel.EndTimeBlockGet(result);
        }
        
        private System.IAsyncResult OnBeginTimeBlockGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dt = ((System.DateTime)(inValues[0]));
            bool bForward = ((bool)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTimeBlockGet(dt, bForward, callback, asyncState);
        }
        
        private object[] OnEndTimeBlockGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTimeBlockGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTimeBlockGetCompleted(object state) {
            if ((this.TimeBlockGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TimeBlockGetCompleted(this, new TimeBlockGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TimeBlockGetAsync(System.DateTime dt, bool bForward) {
            this.TimeBlockGetAsync(dt, bForward, null);
        }
        
        public void TimeBlockGetAsync(System.DateTime dt, bool bForward, object userState) {
            if ((this.onBeginTimeBlockGetDelegate == null)) {
                this.onBeginTimeBlockGetDelegate = new BeginOperationDelegate(this.OnBeginTimeBlockGet);
            }
            if ((this.onEndTimeBlockGetDelegate == null)) {
                this.onEndTimeBlockGetDelegate = new EndOperationDelegate(this.OnEndTimeBlockGet);
            }
            if ((this.onTimeBlockGetCompletedDelegate == null)) {
                this.onTimeBlockGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTimeBlockGetCompleted);
            }
            base.InvokeAsync(this.onBeginTimeBlockGetDelegate, new object[] {
                        dt,
                        bForward}, this.onEndTimeBlockGetDelegate, this.onTimeBlockGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaqueAdd(helpers.replica.services.dbinteract.Plaque cPlaque, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaqueAdd(cPlaque, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int helpers.replica.services.dbinteract.DBInteractSoap.EndPlaqueAdd(System.IAsyncResult result) {
            return base.Channel.EndPlaqueAdd(result);
        }
        
        private System.IAsyncResult OnBeginPlaqueAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Plaque cPlaque = ((helpers.replica.services.dbinteract.Plaque)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaqueAdd(cPlaque, callback, asyncState);
        }
        
        private object[] OnEndPlaqueAdd(System.IAsyncResult result) {
            int retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaqueAdd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaqueAddCompleted(object state) {
            if ((this.PlaqueAddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaqueAddCompleted(this, new PlaqueAddCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaqueAddAsync(helpers.replica.services.dbinteract.Plaque cPlaque) {
            this.PlaqueAddAsync(cPlaque, null);
        }
        
        public void PlaqueAddAsync(helpers.replica.services.dbinteract.Plaque cPlaque, object userState) {
            if ((this.onBeginPlaqueAddDelegate == null)) {
                this.onBeginPlaqueAddDelegate = new BeginOperationDelegate(this.OnBeginPlaqueAdd);
            }
            if ((this.onEndPlaqueAddDelegate == null)) {
                this.onEndPlaqueAddDelegate = new EndOperationDelegate(this.OnEndPlaqueAdd);
            }
            if ((this.onPlaqueAddCompletedDelegate == null)) {
                this.onPlaqueAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaqueAddCompleted);
            }
            base.InvokeAsync(this.onBeginPlaqueAddDelegate, new object[] {
                        cPlaque}, this.onEndPlaqueAddDelegate, this.onPlaqueAddCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaquesGet(helpers.replica.services.dbinteract.IdNamePair cPreset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaquesGet(cPreset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Plaque[] helpers.replica.services.dbinteract.DBInteractSoap.EndPlaquesGet(System.IAsyncResult result) {
            return base.Channel.EndPlaquesGet(result);
        }
        
        private System.IAsyncResult OnBeginPlaquesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.IdNamePair cPreset = ((helpers.replica.services.dbinteract.IdNamePair)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaquesGet(cPreset, callback, asyncState);
        }
        
        private object[] OnEndPlaquesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Plaque[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaquesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaquesGetCompleted(object state) {
            if ((this.PlaquesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaquesGetCompleted(this, new PlaquesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaquesGetAsync(helpers.replica.services.dbinteract.IdNamePair cPreset) {
            this.PlaquesGetAsync(cPreset, null);
        }
        
        public void PlaquesGetAsync(helpers.replica.services.dbinteract.IdNamePair cPreset, object userState) {
            if ((this.onBeginPlaquesGetDelegate == null)) {
                this.onBeginPlaquesGetDelegate = new BeginOperationDelegate(this.OnBeginPlaquesGet);
            }
            if ((this.onEndPlaquesGetDelegate == null)) {
                this.onEndPlaquesGetDelegate = new EndOperationDelegate(this.OnEndPlaquesGet);
            }
            if ((this.onPlaquesGetCompletedDelegate == null)) {
                this.onPlaquesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaquesGetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaquesGetDelegate, new object[] {
                        cPreset}, this.onEndPlaquesGetDelegate, this.onPlaquesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaqueDelete(helpers.replica.services.dbinteract.Plaque cPlaque, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaqueDelete(cPlaque, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndPlaqueDelete(System.IAsyncResult result) {
            return base.Channel.EndPlaqueDelete(result);
        }
        
        private System.IAsyncResult OnBeginPlaqueDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Plaque cPlaque = ((helpers.replica.services.dbinteract.Plaque)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaqueDelete(cPlaque, callback, asyncState);
        }
        
        private object[] OnEndPlaqueDelete(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaqueDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaqueDeleteCompleted(object state) {
            if ((this.PlaqueDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaqueDeleteCompleted(this, new PlaqueDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaqueDeleteAsync(helpers.replica.services.dbinteract.Plaque cPlaque) {
            this.PlaqueDeleteAsync(cPlaque, null);
        }
        
        public void PlaqueDeleteAsync(helpers.replica.services.dbinteract.Plaque cPlaque, object userState) {
            if ((this.onBeginPlaqueDeleteDelegate == null)) {
                this.onBeginPlaqueDeleteDelegate = new BeginOperationDelegate(this.OnBeginPlaqueDelete);
            }
            if ((this.onEndPlaqueDeleteDelegate == null)) {
                this.onEndPlaqueDeleteDelegate = new EndOperationDelegate(this.OnEndPlaqueDelete);
            }
            if ((this.onPlaqueDeleteCompletedDelegate == null)) {
                this.onPlaqueDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaqueDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginPlaqueDeleteDelegate, new object[] {
                        cPlaque}, this.onEndPlaqueDeleteDelegate, this.onPlaqueDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaqueChange(helpers.replica.services.dbinteract.Plaque cPlaque, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaqueChange(cPlaque, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndPlaqueChange(System.IAsyncResult result) {
            return base.Channel.EndPlaqueChange(result);
        }
        
        private System.IAsyncResult OnBeginPlaqueChange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Plaque cPlaque = ((helpers.replica.services.dbinteract.Plaque)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaqueChange(cPlaque, callback, asyncState);
        }
        
        private object[] OnEndPlaqueChange(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaqueChange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaqueChangeCompleted(object state) {
            if ((this.PlaqueChangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaqueChangeCompleted(this, new PlaqueChangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaqueChangeAsync(helpers.replica.services.dbinteract.Plaque cPlaque) {
            this.PlaqueChangeAsync(cPlaque, null);
        }
        
        public void PlaqueChangeAsync(helpers.replica.services.dbinteract.Plaque cPlaque, object userState) {
            if ((this.onBeginPlaqueChangeDelegate == null)) {
                this.onBeginPlaqueChangeDelegate = new BeginOperationDelegate(this.OnBeginPlaqueChange);
            }
            if ((this.onEndPlaqueChangeDelegate == null)) {
                this.onEndPlaqueChangeDelegate = new EndOperationDelegate(this.OnEndPlaqueChange);
            }
            if ((this.onPlaqueChangeCompletedDelegate == null)) {
                this.onPlaqueChangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaqueChangeCompleted);
            }
            base.InvokeAsync(this.onBeginPlaqueChangeDelegate, new object[] {
                        cPlaque}, this.onEndPlaqueChangeDelegate, this.onPlaqueChangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginCuesGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCuesGet(nAssetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Cues helpers.replica.services.dbinteract.DBInteractSoap.EndCuesGet(System.IAsyncResult result) {
            return base.Channel.EndCuesGet(result);
        }
        
        private System.IAsyncResult OnBeginCuesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginCuesGet(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndCuesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Cues retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndCuesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCuesGetCompleted(object state) {
            if ((this.CuesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CuesGetCompleted(this, new CuesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CuesGetAsync(long nAssetID) {
            this.CuesGetAsync(nAssetID, null);
        }
        
        public void CuesGetAsync(long nAssetID, object userState) {
            if ((this.onBeginCuesGetDelegate == null)) {
                this.onBeginCuesGetDelegate = new BeginOperationDelegate(this.OnBeginCuesGet);
            }
            if ((this.onEndCuesGetDelegate == null)) {
                this.onEndCuesGetDelegate = new EndOperationDelegate(this.OnEndCuesGet);
            }
            if ((this.onCuesGetCompletedDelegate == null)) {
                this.onCuesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCuesGetCompleted);
            }
            base.InvokeAsync(this.onBeginCuesGetDelegate, new object[] {
                        nAssetID}, this.onEndCuesGetDelegate, this.onCuesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginStorageSCRGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStorageSCRGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.StoragesMappings[] helpers.replica.services.dbinteract.DBInteractSoap.EndStorageSCRGet(System.IAsyncResult result) {
            return base.Channel.EndStorageSCRGet(result);
        }
        
        private System.IAsyncResult OnBeginStorageSCRGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginStorageSCRGet(callback, asyncState);
        }
        
        private object[] OnEndStorageSCRGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.StoragesMappings[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndStorageSCRGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStorageSCRGetCompleted(object state) {
            if ((this.StorageSCRGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StorageSCRGetCompleted(this, new StorageSCRGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StorageSCRGetAsync() {
            this.StorageSCRGetAsync(null);
        }
        
        public void StorageSCRGetAsync(object userState) {
            if ((this.onBeginStorageSCRGetDelegate == null)) {
                this.onBeginStorageSCRGetDelegate = new BeginOperationDelegate(this.OnBeginStorageSCRGet);
            }
            if ((this.onEndStorageSCRGetDelegate == null)) {
                this.onEndStorageSCRGetDelegate = new EndOperationDelegate(this.OnEndStorageSCRGet);
            }
            if ((this.onStorageSCRGetCompletedDelegate == null)) {
                this.onStorageSCRGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStorageSCRGetCompleted);
            }
            base.InvokeAsync(this.onBeginStorageSCRGetDelegate, null, this.onEndStorageSCRGetDelegate, this.onStorageSCRGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginLogoBindingGet(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogoBindingGet(aPLIs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool[] helpers.replica.services.dbinteract.DBInteractSoap.EndLogoBindingGet(System.IAsyncResult result) {
            return base.Channel.EndLogoBindingGet(result);
        }
        
        private System.IAsyncResult OnBeginLogoBindingGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.PlaylistItem[] aPLIs = ((helpers.replica.services.dbinteract.PlaylistItem[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginLogoBindingGet(aPLIs, callback, asyncState);
        }
        
        private object[] OnEndLogoBindingGet(System.IAsyncResult result) {
            bool[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndLogoBindingGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogoBindingGetCompleted(object state) {
            if ((this.LogoBindingGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogoBindingGetCompleted(this, new LogoBindingGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogoBindingGetAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs) {
            this.LogoBindingGetAsync(aPLIs, null);
        }
        
        public void LogoBindingGetAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, object userState) {
            if ((this.onBeginLogoBindingGetDelegate == null)) {
                this.onBeginLogoBindingGetDelegate = new BeginOperationDelegate(this.OnBeginLogoBindingGet);
            }
            if ((this.onEndLogoBindingGetDelegate == null)) {
                this.onEndLogoBindingGetDelegate = new EndOperationDelegate(this.OnEndLogoBindingGet);
            }
            if ((this.onLogoBindingGetCompletedDelegate == null)) {
                this.onLogoBindingGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogoBindingGetCompleted);
            }
            base.InvokeAsync(this.onBeginLogoBindingGetDelegate, new object[] {
                        aPLIs}, this.onEndLogoBindingGetDelegate, this.onLogoBindingGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginClipsBDLog(long nShiftID, helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClipsBDLog(nShiftID, aPLIs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndClipsBDLog(System.IAsyncResult result) {
            base.Channel.EndClipsBDLog(result);
        }
        
        private System.IAsyncResult OnBeginClipsBDLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nShiftID = ((long)(inValues[0]));
            helpers.replica.services.dbinteract.PlaylistItem[] aPLIs = ((helpers.replica.services.dbinteract.PlaylistItem[])(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginClipsBDLog(nShiftID, aPLIs, callback, asyncState);
        }
        
        private object[] OnEndClipsBDLog(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndClipsBDLog(result);
            return null;
        }
        
        private void OnClipsBDLogCompleted(object state) {
            if ((this.ClipsBDLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClipsBDLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClipsBDLogAsync(long nShiftID, helpers.replica.services.dbinteract.PlaylistItem[] aPLIs) {
            this.ClipsBDLogAsync(nShiftID, aPLIs, null);
        }
        
        public void ClipsBDLogAsync(long nShiftID, helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, object userState) {
            if ((this.onBeginClipsBDLogDelegate == null)) {
                this.onBeginClipsBDLogDelegate = new BeginOperationDelegate(this.OnBeginClipsBDLog);
            }
            if ((this.onEndClipsBDLogDelegate == null)) {
                this.onEndClipsBDLogDelegate = new EndOperationDelegate(this.OnEndClipsBDLog);
            }
            if ((this.onClipsBDLogCompletedDelegate == null)) {
                this.onClipsBDLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClipsBDLogCompleted);
            }
            base.InvokeAsync(this.onBeginClipsBDLogDelegate, new object[] {
                        nShiftID,
                        aPLIs}, this.onEndClipsBDLogDelegate, this.onClipsBDLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPLFragmentGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPLFragmentGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndPLFragmentGet(System.IAsyncResult result) {
            return base.Channel.EndPLFragmentGet(result);
        }
        
        private System.IAsyncResult OnBeginPLFragmentGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dtBegin = ((System.DateTime)(inValues[0]));
            System.DateTime dtEnd = ((System.DateTime)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPLFragmentGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        private object[] OnEndPLFragmentGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPLFragmentGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPLFragmentGetCompleted(object state) {
            if ((this.PLFragmentGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PLFragmentGetCompleted(this, new PLFragmentGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PLFragmentGetAsync(System.DateTime dtBegin, System.DateTime dtEnd) {
            this.PLFragmentGetAsync(dtBegin, dtEnd, null);
        }
        
        public void PLFragmentGetAsync(System.DateTime dtBegin, System.DateTime dtEnd, object userState) {
            if ((this.onBeginPLFragmentGetDelegate == null)) {
                this.onBeginPLFragmentGetDelegate = new BeginOperationDelegate(this.OnBeginPLFragmentGet);
            }
            if ((this.onEndPLFragmentGetDelegate == null)) {
                this.onEndPLFragmentGetDelegate = new EndOperationDelegate(this.OnEndPLFragmentGet);
            }
            if ((this.onPLFragmentGetCompletedDelegate == null)) {
                this.onPLFragmentGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPLFragmentGetCompleted);
            }
            base.InvokeAsync(this.onBeginPLFragmentGetDelegate, new object[] {
                        dtBegin,
                        dtEnd}, this.onEndPLFragmentGetDelegate, this.onPLFragmentGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginStatGet(helpers.replica.services.dbinteract.DBFilters cFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStatGet(cFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndStatGet(System.IAsyncResult result) {
            return base.Channel.EndStatGet(result);
        }
        
        private System.IAsyncResult OnBeginStatGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.DBFilters cFilters = ((helpers.replica.services.dbinteract.DBFilters)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginStatGet(cFilters, callback, asyncState);
        }
        
        private object[] OnEndStatGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndStatGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStatGetCompleted(object state) {
            if ((this.StatGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StatGetCompleted(this, new StatGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StatGetAsync(helpers.replica.services.dbinteract.DBFilters cFilters) {
            this.StatGetAsync(cFilters, null);
        }
        
        public void StatGetAsync(helpers.replica.services.dbinteract.DBFilters cFilters, object userState) {
            if ((this.onBeginStatGetDelegate == null)) {
                this.onBeginStatGetDelegate = new BeginOperationDelegate(this.OnBeginStatGet);
            }
            if ((this.onEndStatGetDelegate == null)) {
                this.onEndStatGetDelegate = new EndOperationDelegate(this.OnEndStatGet);
            }
            if ((this.onStatGetCompletedDelegate == null)) {
                this.onStatGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStatGetCompleted);
            }
            base.InvokeAsync(this.onBeginStatGetDelegate, new object[] {
                        cFilters}, this.onEndStatGetDelegate, this.onStatGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginMessagesGet(helpers.replica.services.dbinteract.DBFilters cFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMessagesGet(cFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Message[] helpers.replica.services.dbinteract.DBInteractSoap.EndMessagesGet(System.IAsyncResult result) {
            return base.Channel.EndMessagesGet(result);
        }
        
        private System.IAsyncResult OnBeginMessagesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.DBFilters cFilters = ((helpers.replica.services.dbinteract.DBFilters)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginMessagesGet(cFilters, callback, asyncState);
        }
        
        private object[] OnEndMessagesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Message[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndMessagesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMessagesGetCompleted(object state) {
            if ((this.MessagesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MessagesGetCompleted(this, new MessagesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MessagesGetAsync(helpers.replica.services.dbinteract.DBFilters cFilters) {
            this.MessagesGetAsync(cFilters, null);
        }
        
        public void MessagesGetAsync(helpers.replica.services.dbinteract.DBFilters cFilters, object userState) {
            if ((this.onBeginMessagesGetDelegate == null)) {
                this.onBeginMessagesGetDelegate = new BeginOperationDelegate(this.OnBeginMessagesGet);
            }
            if ((this.onEndMessagesGetDelegate == null)) {
                this.onEndMessagesGetDelegate = new EndOperationDelegate(this.OnEndMessagesGet);
            }
            if ((this.onMessagesGetCompletedDelegate == null)) {
                this.onMessagesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMessagesGetCompleted);
            }
            base.InvokeAsync(this.onBeginMessagesGetDelegate, new object[] {
                        cFilters}, this.onEndMessagesGetDelegate, this.onMessagesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginWorkerProgressGet(ulong nWorkerInfoID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWorkerProgressGet(nWorkerInfoID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double helpers.replica.services.dbinteract.DBInteractSoap.EndWorkerProgressGet(System.IAsyncResult result) {
            return base.Channel.EndWorkerProgressGet(result);
        }
        
        private System.IAsyncResult OnBeginWorkerProgressGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ulong nWorkerInfoID = ((ulong)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginWorkerProgressGet(nWorkerInfoID, callback, asyncState);
        }
        
        private object[] OnEndWorkerProgressGet(System.IAsyncResult result) {
            double retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndWorkerProgressGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnWorkerProgressGetCompleted(object state) {
            if ((this.WorkerProgressGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WorkerProgressGetCompleted(this, new WorkerProgressGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WorkerProgressGetAsync(ulong nWorkerInfoID) {
            this.WorkerProgressGetAsync(nWorkerInfoID, null);
        }
        
        public void WorkerProgressGetAsync(ulong nWorkerInfoID, object userState) {
            if ((this.onBeginWorkerProgressGetDelegate == null)) {
                this.onBeginWorkerProgressGetDelegate = new BeginOperationDelegate(this.OnBeginWorkerProgressGet);
            }
            if ((this.onEndWorkerProgressGetDelegate == null)) {
                this.onEndWorkerProgressGetDelegate = new EndOperationDelegate(this.OnEndWorkerProgressGet);
            }
            if ((this.onWorkerProgressGetCompletedDelegate == null)) {
                this.onWorkerProgressGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWorkerProgressGetCompleted);
            }
            base.InvokeAsync(this.onBeginWorkerProgressGetDelegate, new object[] {
                        nWorkerInfoID}, this.onEndWorkerProgressGetDelegate, this.onWorkerProgressGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginExport(string sTemplate, helpers.replica.services.dbinteract.DBFilters cFilters, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExport(sTemplate, cFilters, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ulong helpers.replica.services.dbinteract.DBInteractSoap.EndExport(System.IAsyncResult result) {
            return base.Channel.EndExport(result);
        }
        
        private System.IAsyncResult OnBeginExport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sTemplate = ((string)(inValues[0]));
            helpers.replica.services.dbinteract.DBFilters cFilters = ((helpers.replica.services.dbinteract.DBFilters)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginExport(sTemplate, cFilters, callback, asyncState);
        }
        
        private object[] OnEndExport(System.IAsyncResult result) {
            ulong retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndExport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExportCompleted(object state) {
            if ((this.ExportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportCompleted(this, new ExportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportAsync(string sTemplate, helpers.replica.services.dbinteract.DBFilters cFilters) {
            this.ExportAsync(sTemplate, cFilters, null);
        }
        
        public void ExportAsync(string sTemplate, helpers.replica.services.dbinteract.DBFilters cFilters, object userState) {
            if ((this.onBeginExportDelegate == null)) {
                this.onBeginExportDelegate = new BeginOperationDelegate(this.OnBeginExport);
            }
            if ((this.onEndExportDelegate == null)) {
                this.onEndExportDelegate = new EndOperationDelegate(this.OnEndExport);
            }
            if ((this.onExportCompletedDelegate == null)) {
                this.onExportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportCompleted);
            }
            base.InvokeAsync(this.onBeginExportDelegate, new object[] {
                        sTemplate,
                        cFilters}, this.onEndExportDelegate, this.onExportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginExportResultGet(ulong nWorkerInfoID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExportResultGet(nWorkerInfoID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string helpers.replica.services.dbinteract.DBInteractSoap.EndExportResultGet(System.IAsyncResult result) {
            return base.Channel.EndExportResultGet(result);
        }
        
        private System.IAsyncResult OnBeginExportResultGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ulong nWorkerInfoID = ((ulong)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginExportResultGet(nWorkerInfoID, callback, asyncState);
        }
        
        private object[] OnEndExportResultGet(System.IAsyncResult result) {
            string retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndExportResultGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExportResultGetCompleted(object state) {
            if ((this.ExportResultGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExportResultGetCompleted(this, new ExportResultGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExportResultGetAsync(ulong nWorkerInfoID) {
            this.ExportResultGetAsync(nWorkerInfoID, null);
        }
        
        public void ExportResultGetAsync(ulong nWorkerInfoID, object userState) {
            if ((this.onBeginExportResultGetDelegate == null)) {
                this.onBeginExportResultGetDelegate = new BeginOperationDelegate(this.OnBeginExportResultGet);
            }
            if ((this.onEndExportResultGetDelegate == null)) {
                this.onEndExportResultGetDelegate = new EndOperationDelegate(this.OnEndExportResultGet);
            }
            if ((this.onExportResultGetCompletedDelegate == null)) {
                this.onExportResultGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExportResultGetCompleted);
            }
            base.InvokeAsync(this.onBeginExportResultGetDelegate, new object[] {
                        nWorkerInfoID}, this.onEndExportResultGetDelegate, this.onExportResultGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginRingtonesBindsGet(helpers.replica.services.dbinteract.RingtonesBindsGetRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRingtonesBindsGet(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginRingtonesBindsGet(System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.RingtonesBindsGetRequest inValue = new helpers.replica.services.dbinteract.RingtonesBindsGetRequest();
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginRingtonesBindsGet(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.RingtonesBindsGetResponse helpers.replica.services.dbinteract.DBInteractSoap.EndRingtonesBindsGet(System.IAsyncResult result) {
            return base.Channel.EndRingtonesBindsGet(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private int[][] EndRingtonesBindsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.RingtonesBindsGetResponse retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndRingtonesBindsGet(result);
            return retVal.RingtonesBindsGetResult;
        }
        
        private System.IAsyncResult OnBeginRingtonesBindsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginRingtonesBindsGet(callback, asyncState);
        }
        
        private object[] OnEndRingtonesBindsGet(System.IAsyncResult result) {
            int[][] retVal = this.EndRingtonesBindsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRingtonesBindsGetCompleted(object state) {
            if ((this.RingtonesBindsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RingtonesBindsGetCompleted(this, new RingtonesBindsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RingtonesBindsGetAsync() {
            this.RingtonesBindsGetAsync(null);
        }
        
        public void RingtonesBindsGetAsync(object userState) {
            if ((this.onBeginRingtonesBindsGetDelegate == null)) {
                this.onBeginRingtonesBindsGetDelegate = new BeginOperationDelegate(this.OnBeginRingtonesBindsGet);
            }
            if ((this.onEndRingtonesBindsGetDelegate == null)) {
                this.onEndRingtonesBindsGetDelegate = new EndOperationDelegate(this.OnEndRingtonesBindsGet);
            }
            if ((this.onRingtonesBindsGetCompletedDelegate == null)) {
                this.onRingtonesBindsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRingtonesBindsGetCompleted);
            }
            base.InvokeAsync(this.onBeginRingtonesBindsGetDelegate, null, this.onEndRingtonesBindsGetDelegate, this.onRingtonesBindsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFrequencyOfOccurrence(long nVideoTypeID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFrequencyOfOccurrence(nVideoTypeID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndFrequencyOfOccurrence(System.IAsyncResult result) {
            return base.Channel.EndFrequencyOfOccurrence(result);
        }
        
        private System.IAsyncResult OnBeginFrequencyOfOccurrence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nVideoTypeID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFrequencyOfOccurrence(nVideoTypeID, callback, asyncState);
        }
        
        private object[] OnEndFrequencyOfOccurrence(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFrequencyOfOccurrence(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFrequencyOfOccurrenceCompleted(object state) {
            if ((this.FrequencyOfOccurrenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FrequencyOfOccurrenceCompleted(this, new FrequencyOfOccurrenceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FrequencyOfOccurrenceAsync(long nVideoTypeID) {
            this.FrequencyOfOccurrenceAsync(nVideoTypeID, null);
        }
        
        public void FrequencyOfOccurrenceAsync(long nVideoTypeID, object userState) {
            if ((this.onBeginFrequencyOfOccurrenceDelegate == null)) {
                this.onBeginFrequencyOfOccurrenceDelegate = new BeginOperationDelegate(this.OnBeginFrequencyOfOccurrence);
            }
            if ((this.onEndFrequencyOfOccurrenceDelegate == null)) {
                this.onEndFrequencyOfOccurrenceDelegate = new EndOperationDelegate(this.OnEndFrequencyOfOccurrence);
            }
            if ((this.onFrequencyOfOccurrenceCompletedDelegate == null)) {
                this.onFrequencyOfOccurrenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFrequencyOfOccurrenceCompleted);
            }
            base.InvokeAsync(this.onBeginFrequencyOfOccurrenceDelegate, new object[] {
                        nVideoTypeID}, this.onEndFrequencyOfOccurrenceDelegate, this.onFrequencyOfOccurrenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginGridGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGridGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string helpers.replica.services.dbinteract.DBInteractSoap.EndGridGet(System.IAsyncResult result) {
            return base.Channel.EndGridGet(result);
        }
        
        private System.IAsyncResult OnBeginGridGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginGridGet(callback, asyncState);
        }
        
        private object[] OnEndGridGet(System.IAsyncResult result) {
            string retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndGridGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGridGetCompleted(object state) {
            if ((this.GridGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GridGetCompleted(this, new GridGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GridGetAsync() {
            this.GridGetAsync(null);
        }
        
        public void GridGetAsync(object userState) {
            if ((this.onBeginGridGetDelegate == null)) {
                this.onBeginGridGetDelegate = new BeginOperationDelegate(this.OnBeginGridGet);
            }
            if ((this.onEndGridGetDelegate == null)) {
                this.onEndGridGetDelegate = new EndOperationDelegate(this.OnEndGridGet);
            }
            if ((this.onGridGetCompletedDelegate == null)) {
                this.onGridGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGridGetCompleted);
            }
            base.InvokeAsync(this.onBeginGridGetDelegate, null, this.onEndGridGetDelegate, this.onGridGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginGridSave(string sXML, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGridSave(sXML, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndGridSave(System.IAsyncResult result) {
            base.Channel.EndGridSave(result);
        }
        
        private System.IAsyncResult OnBeginGridSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sXML = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginGridSave(sXML, callback, asyncState);
        }
        
        private object[] OnEndGridSave(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndGridSave(result);
            return null;
        }
        
        private void OnGridSaveCompleted(object state) {
            if ((this.GridSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GridSaveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GridSaveAsync(string sXML) {
            this.GridSaveAsync(sXML, null);
        }
        
        public void GridSaveAsync(string sXML, object userState) {
            if ((this.onBeginGridSaveDelegate == null)) {
                this.onBeginGridSaveDelegate = new BeginOperationDelegate(this.OnBeginGridSave);
            }
            if ((this.onEndGridSaveDelegate == null)) {
                this.onEndGridSaveDelegate = new EndOperationDelegate(this.OnEndGridSave);
            }
            if ((this.onGridSaveCompletedDelegate == null)) {
                this.onGridSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGridSaveCompleted);
            }
            base.InvokeAsync(this.onBeginGridSaveDelegate, new object[] {
                        sXML}, this.onEndGridSaveDelegate, this.onGridSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTransliterationGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTransliterationGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.TransliterationPair[] helpers.replica.services.dbinteract.DBInteractSoap.EndTransliterationGet(System.IAsyncResult result) {
            return base.Channel.EndTransliterationGet(result);
        }
        
        private System.IAsyncResult OnBeginTransliterationGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTransliterationGet(callback, asyncState);
        }
        
        private object[] OnEndTransliterationGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.TransliterationPair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTransliterationGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTransliterationGetCompleted(object state) {
            if ((this.TransliterationGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TransliterationGetCompleted(this, new TransliterationGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TransliterationGetAsync() {
            this.TransliterationGetAsync(null);
        }
        
        public void TransliterationGetAsync(object userState) {
            if ((this.onBeginTransliterationGetDelegate == null)) {
                this.onBeginTransliterationGetDelegate = new BeginOperationDelegate(this.OnBeginTransliterationGet);
            }
            if ((this.onEndTransliterationGetDelegate == null)) {
                this.onEndTransliterationGetDelegate = new EndOperationDelegate(this.OnEndTransliterationGet);
            }
            if ((this.onTransliterationGetCompletedDelegate == null)) {
                this.onTransliterationGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTransliterationGetCompleted);
            }
            base.InvokeAsync(this.onBeginTransliterationGetDelegate, null, this.onEndTransliterationGetDelegate, this.onTransliterationGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginDateTimeNowGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDateTimeNowGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime helpers.replica.services.dbinteract.DBInteractSoap.EndDateTimeNowGet(System.IAsyncResult result) {
            return base.Channel.EndDateTimeNowGet(result);
        }
        
        private System.IAsyncResult OnBeginDateTimeNowGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginDateTimeNowGet(callback, asyncState);
        }
        
        private object[] OnEndDateTimeNowGet(System.IAsyncResult result) {
            System.DateTime retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndDateTimeNowGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDateTimeNowGetCompleted(object state) {
            if ((this.DateTimeNowGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DateTimeNowGetCompleted(this, new DateTimeNowGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DateTimeNowGetAsync() {
            this.DateTimeNowGetAsync(null);
        }
        
        public void DateTimeNowGetAsync(object userState) {
            if ((this.onBeginDateTimeNowGetDelegate == null)) {
                this.onBeginDateTimeNowGetDelegate = new BeginOperationDelegate(this.OnBeginDateTimeNowGet);
            }
            if ((this.onEndDateTimeNowGetDelegate == null)) {
                this.onEndDateTimeNowGetDelegate = new EndOperationDelegate(this.OnEndDateTimeNowGet);
            }
            if ((this.onDateTimeNowGetCompletedDelegate == null)) {
                this.onDateTimeNowGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDateTimeNowGetCompleted);
            }
            base.InvokeAsync(this.onBeginDateTimeNowGetDelegate, null, this.onEndDateTimeNowGetDelegate, this.onDateTimeNowGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginErrorLogging(string sError, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginErrorLogging(sError, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndErrorLogging(System.IAsyncResult result) {
            base.Channel.EndErrorLogging(result);
        }
        
        private System.IAsyncResult OnBeginErrorLogging(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sError = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginErrorLogging(sError, callback, asyncState);
        }
        
        private object[] OnEndErrorLogging(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndErrorLogging(result);
            return null;
        }
        
        private void OnErrorLoggingCompleted(object state) {
            if ((this.ErrorLoggingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ErrorLoggingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ErrorLoggingAsync(string sError) {
            this.ErrorLoggingAsync(sError, null);
        }
        
        public void ErrorLoggingAsync(string sError, object userState) {
            if ((this.onBeginErrorLoggingDelegate == null)) {
                this.onBeginErrorLoggingDelegate = new BeginOperationDelegate(this.OnBeginErrorLogging);
            }
            if ((this.onEndErrorLoggingDelegate == null)) {
                this.onEndErrorLoggingDelegate = new EndOperationDelegate(this.OnEndErrorLogging);
            }
            if ((this.onErrorLoggingCompletedDelegate == null)) {
                this.onErrorLoggingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnErrorLoggingCompleted);
            }
            base.InvokeAsync(this.onBeginErrorLoggingDelegate, new object[] {
                        sError}, this.onEndErrorLoggingDelegate, this.onErrorLoggingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginKnownTypes(helpers.replica.services.dbinteract.DBFilter t1, helpers.replica.services.dbinteract.DBFiltersOperators t2, helpers.replica.services.dbinteract.IngestClip t3, helpers.replica.services.dbinteract.IngestAdvertisement t4, helpers.replica.services.dbinteract.IngestProgram t5, helpers.replica.services.dbinteract.IngestDesign t6, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginKnownTypes(t1, t2, t3, t4, t5, t6, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndKnownTypes(System.IAsyncResult result) {
            base.Channel.EndKnownTypes(result);
        }
        
        private System.IAsyncResult OnBeginKnownTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.DBFilter t1 = ((helpers.replica.services.dbinteract.DBFilter)(inValues[0]));
            helpers.replica.services.dbinteract.DBFiltersOperators t2 = ((helpers.replica.services.dbinteract.DBFiltersOperators)(inValues[1]));
            helpers.replica.services.dbinteract.IngestClip t3 = ((helpers.replica.services.dbinteract.IngestClip)(inValues[2]));
            helpers.replica.services.dbinteract.IngestAdvertisement t4 = ((helpers.replica.services.dbinteract.IngestAdvertisement)(inValues[3]));
            helpers.replica.services.dbinteract.IngestProgram t5 = ((helpers.replica.services.dbinteract.IngestProgram)(inValues[4]));
            helpers.replica.services.dbinteract.IngestDesign t6 = ((helpers.replica.services.dbinteract.IngestDesign)(inValues[5]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginKnownTypes(t1, t2, t3, t4, t5, t6, callback, asyncState);
        }
        
        private object[] OnEndKnownTypes(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndKnownTypes(result);
            return null;
        }
        
        private void OnKnownTypesCompleted(object state) {
            if ((this.KnownTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.KnownTypesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void KnownTypesAsync(helpers.replica.services.dbinteract.DBFilter t1, helpers.replica.services.dbinteract.DBFiltersOperators t2, helpers.replica.services.dbinteract.IngestClip t3, helpers.replica.services.dbinteract.IngestAdvertisement t4, helpers.replica.services.dbinteract.IngestProgram t5, helpers.replica.services.dbinteract.IngestDesign t6) {
            this.KnownTypesAsync(t1, t2, t3, t4, t5, t6, null);
        }
        
        public void KnownTypesAsync(helpers.replica.services.dbinteract.DBFilter t1, helpers.replica.services.dbinteract.DBFiltersOperators t2, helpers.replica.services.dbinteract.IngestClip t3, helpers.replica.services.dbinteract.IngestAdvertisement t4, helpers.replica.services.dbinteract.IngestProgram t5, helpers.replica.services.dbinteract.IngestDesign t6, object userState) {
            if ((this.onBeginKnownTypesDelegate == null)) {
                this.onBeginKnownTypesDelegate = new BeginOperationDelegate(this.OnBeginKnownTypes);
            }
            if ((this.onEndKnownTypesDelegate == null)) {
                this.onEndKnownTypesDelegate = new EndOperationDelegate(this.OnEndKnownTypes);
            }
            if ((this.onKnownTypesCompletedDelegate == null)) {
                this.onKnownTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnKnownTypesCompleted);
            }
            base.InvokeAsync(this.onBeginKnownTypesDelegate, new object[] {
                        t1,
                        t2,
                        t3,
                        t4,
                        t5,
                        t6}, this.onEndKnownTypesDelegate, this.onKnownTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginUploadFileBegin(helpers.replica.services.dbinteract.UploadFileBeginRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFileBegin(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginUploadFileBegin(byte[] aBytes, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.UploadFileBeginRequest inValue = new helpers.replica.services.dbinteract.UploadFileBeginRequest();
            inValue.aBytes = aBytes;
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginUploadFileBegin(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.UploadFileBeginResponse helpers.replica.services.dbinteract.DBInteractSoap.EndUploadFileBegin(System.IAsyncResult result) {
            return base.Channel.EndUploadFileBegin(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private int EndUploadFileBegin(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.UploadFileBeginResponse retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndUploadFileBegin(result);
            return retVal.UploadFileBeginResult;
        }
        
        private System.IAsyncResult OnBeginUploadFileBegin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] aBytes = ((byte[])(inValues[0]));
            return this.BeginUploadFileBegin(aBytes, callback, asyncState);
        }
        
        private object[] OnEndUploadFileBegin(System.IAsyncResult result) {
            int retVal = this.EndUploadFileBegin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadFileBeginCompleted(object state) {
            if ((this.UploadFileBeginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileBeginCompleted(this, new UploadFileBeginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileBeginAsync(byte[] aBytes) {
            this.UploadFileBeginAsync(aBytes, null);
        }
        
        public void UploadFileBeginAsync(byte[] aBytes, object userState) {
            if ((this.onBeginUploadFileBeginDelegate == null)) {
                this.onBeginUploadFileBeginDelegate = new BeginOperationDelegate(this.OnBeginUploadFileBegin);
            }
            if ((this.onEndUploadFileBeginDelegate == null)) {
                this.onEndUploadFileBeginDelegate = new EndOperationDelegate(this.OnEndUploadFileBegin);
            }
            if ((this.onUploadFileBeginCompletedDelegate == null)) {
                this.onUploadFileBeginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileBeginCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileBeginDelegate, new object[] {
                        aBytes}, this.onEndUploadFileBeginDelegate, this.onUploadFileBeginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginUploadFileContinue(helpers.replica.services.dbinteract.UploadFileContinueRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFileContinue(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginUploadFileContinue(int nFileIndx, byte[] aBytes, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.UploadFileContinueRequest inValue = new helpers.replica.services.dbinteract.UploadFileContinueRequest();
            inValue.nFileIndx = nFileIndx;
            inValue.aBytes = aBytes;
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginUploadFileContinue(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.UploadFileContinueResponse helpers.replica.services.dbinteract.DBInteractSoap.EndUploadFileContinue(System.IAsyncResult result) {
            return base.Channel.EndUploadFileContinue(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private void EndUploadFileContinue(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.UploadFileContinueResponse retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndUploadFileContinue(result);
        }
        
        private System.IAsyncResult OnBeginUploadFileContinue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int nFileIndx = ((int)(inValues[0]));
            byte[] aBytes = ((byte[])(inValues[1]));
            return this.BeginUploadFileContinue(nFileIndx, aBytes, callback, asyncState);
        }
        
        private object[] OnEndUploadFileContinue(System.IAsyncResult result) {
            this.EndUploadFileContinue(result);
            return null;
        }
        
        private void OnUploadFileContinueCompleted(object state) {
            if ((this.UploadFileContinueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileContinueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileContinueAsync(int nFileIndx, byte[] aBytes) {
            this.UploadFileContinueAsync(nFileIndx, aBytes, null);
        }
        
        public void UploadFileContinueAsync(int nFileIndx, byte[] aBytes, object userState) {
            if ((this.onBeginUploadFileContinueDelegate == null)) {
                this.onBeginUploadFileContinueDelegate = new BeginOperationDelegate(this.OnBeginUploadFileContinue);
            }
            if ((this.onEndUploadFileContinueDelegate == null)) {
                this.onEndUploadFileContinueDelegate = new EndOperationDelegate(this.OnEndUploadFileContinue);
            }
            if ((this.onUploadFileContinueCompletedDelegate == null)) {
                this.onUploadFileContinueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileContinueCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileContinueDelegate, new object[] {
                        nFileIndx,
                        aBytes}, this.onEndUploadFileContinueDelegate, this.onUploadFileContinueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginUploadFileEnd(int nFileIndx, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFileEnd(nFileIndx, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string helpers.replica.services.dbinteract.DBInteractSoap.EndUploadFileEnd(System.IAsyncResult result) {
            return base.Channel.EndUploadFileEnd(result);
        }
        
        private System.IAsyncResult OnBeginUploadFileEnd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int nFileIndx = ((int)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginUploadFileEnd(nFileIndx, callback, asyncState);
        }
        
        private object[] OnEndUploadFileEnd(System.IAsyncResult result) {
            string retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndUploadFileEnd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadFileEndCompleted(object state) {
            if ((this.UploadFileEndCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileEndCompleted(this, new UploadFileEndCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileEndAsync(int nFileIndx) {
            this.UploadFileEndAsync(nFileIndx, null);
        }
        
        public void UploadFileEndAsync(int nFileIndx, object userState) {
            if ((this.onBeginUploadFileEndDelegate == null)) {
                this.onBeginUploadFileEndDelegate = new BeginOperationDelegate(this.OnBeginUploadFileEnd);
            }
            if ((this.onEndUploadFileEndDelegate == null)) {
                this.onEndUploadFileEndDelegate = new EndOperationDelegate(this.OnEndUploadFileEnd);
            }
            if ((this.onUploadFileEndCompletedDelegate == null)) {
                this.onUploadFileEndCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileEndCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileEndDelegate, new object[] {
                        nFileIndx}, this.onEndUploadFileEndDelegate, this.onUploadFileEndCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginIsThereAnyErrors(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsThereAnyErrors(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndIsThereAnyErrors(System.IAsyncResult result) {
            return base.Channel.EndIsThereAnyErrors(result);
        }
        
        private System.IAsyncResult OnBeginIsThereAnyErrors(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginIsThereAnyErrors(callback, asyncState);
        }
        
        private object[] OnEndIsThereAnyErrors(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndIsThereAnyErrors(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsThereAnyErrorsCompleted(object state) {
            if ((this.IsThereAnyErrorsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsThereAnyErrorsCompleted(this, new IsThereAnyErrorsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsThereAnyErrorsAsync() {
            this.IsThereAnyErrorsAsync(null);
        }
        
        public void IsThereAnyErrorsAsync(object userState) {
            if ((this.onBeginIsThereAnyErrorsDelegate == null)) {
                this.onBeginIsThereAnyErrorsDelegate = new BeginOperationDelegate(this.OnBeginIsThereAnyErrors);
            }
            if ((this.onEndIsThereAnyErrorsDelegate == null)) {
                this.onEndIsThereAnyErrorsDelegate = new EndOperationDelegate(this.OnEndIsThereAnyErrors);
            }
            if ((this.onIsThereAnyErrorsCompletedDelegate == null)) {
                this.onIsThereAnyErrorsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsThereAnyErrorsCompleted);
            }
            base.InvokeAsync(this.onBeginIsThereAnyErrorsDelegate, null, this.onEndIsThereAnyErrorsDelegate, this.onIsThereAnyErrorsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginErrorsClear(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginErrorsClear(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndErrorsClear(System.IAsyncResult result) {
            base.Channel.EndErrorsClear(result);
        }
        
        private System.IAsyncResult OnBeginErrorsClear(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginErrorsClear(callback, asyncState);
        }
        
        private object[] OnEndErrorsClear(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndErrorsClear(result);
            return null;
        }
        
        private void OnErrorsClearCompleted(object state) {
            if ((this.ErrorsClearCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ErrorsClearCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ErrorsClearAsync() {
            this.ErrorsClearAsync(null);
        }
        
        public void ErrorsClearAsync(object userState) {
            if ((this.onBeginErrorsClearDelegate == null)) {
                this.onBeginErrorsClearDelegate = new BeginOperationDelegate(this.OnBeginErrorsClear);
            }
            if ((this.onEndErrorsClearDelegate == null)) {
                this.onEndErrorsClearDelegate = new EndOperationDelegate(this.OnEndErrorsClear);
            }
            if ((this.onErrorsClearCompletedDelegate == null)) {
                this.onErrorsClearCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnErrorsClearCompleted);
            }
            base.InvokeAsync(this.onBeginErrorsClearDelegate, null, this.onEndErrorsClearDelegate, this.onErrorsClearCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginErrorsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginErrorsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.WebServiceError[] helpers.replica.services.dbinteract.DBInteractSoap.EndErrorsGet(System.IAsyncResult result) {
            return base.Channel.EndErrorsGet(result);
        }
        
        private System.IAsyncResult OnBeginErrorsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginErrorsGet(callback, asyncState);
        }
        
        private object[] OnEndErrorsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.WebServiceError[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndErrorsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnErrorsGetCompleted(object state) {
            if ((this.ErrorsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ErrorsGetCompleted(this, new ErrorsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ErrorsGetAsync() {
            this.ErrorsGetAsync(null);
        }
        
        public void ErrorsGetAsync(object userState) {
            if ((this.onBeginErrorsGetDelegate == null)) {
                this.onBeginErrorsGetDelegate = new BeginOperationDelegate(this.OnBeginErrorsGet);
            }
            if ((this.onEndErrorsGetDelegate == null)) {
                this.onEndErrorsGetDelegate = new EndOperationDelegate(this.OnEndErrorsGet);
            }
            if ((this.onErrorsGetCompletedDelegate == null)) {
                this.onErrorsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnErrorsGetCompleted);
            }
            base.InvokeAsync(this.onBeginErrorsGetDelegate, null, this.onEndErrorsGetDelegate, this.onErrorsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginErrorsAllGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginErrorsAllGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.WebServiceError[] helpers.replica.services.dbinteract.DBInteractSoap.EndErrorsAllGet(System.IAsyncResult result) {
            return base.Channel.EndErrorsAllGet(result);
        }
        
        private System.IAsyncResult OnBeginErrorsAllGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginErrorsAllGet(callback, asyncState);
        }
        
        private object[] OnEndErrorsAllGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.WebServiceError[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndErrorsAllGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnErrorsAllGetCompleted(object state) {
            if ((this.ErrorsAllGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ErrorsAllGetCompleted(this, new ErrorsAllGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ErrorsAllGetAsync() {
            this.ErrorsAllGetAsync(null);
        }
        
        public void ErrorsAllGetAsync(object userState) {
            if ((this.onBeginErrorsAllGetDelegate == null)) {
                this.onBeginErrorsAllGetDelegate = new BeginOperationDelegate(this.OnBeginErrorsAllGet);
            }
            if ((this.onEndErrorsAllGetDelegate == null)) {
                this.onEndErrorsAllGetDelegate = new EndOperationDelegate(this.OnEndErrorsAllGet);
            }
            if ((this.onErrorsAllGetCompletedDelegate == null)) {
                this.onErrorsAllGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnErrorsAllGetCompleted);
            }
            base.InvokeAsync(this.onBeginErrorsAllGetDelegate, null, this.onEndErrorsAllGetDelegate, this.onErrorsAllGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginErrorLastGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginErrorLastGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.WebServiceError helpers.replica.services.dbinteract.DBInteractSoap.EndErrorLastGet(System.IAsyncResult result) {
            return base.Channel.EndErrorLastGet(result);
        }
        
        private System.IAsyncResult OnBeginErrorLastGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginErrorLastGet(callback, asyncState);
        }
        
        private object[] OnEndErrorLastGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.WebServiceError retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndErrorLastGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnErrorLastGetCompleted(object state) {
            if ((this.ErrorLastGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ErrorLastGetCompleted(this, new ErrorLastGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ErrorLastGetAsync() {
            this.ErrorLastGetAsync(null);
        }
        
        public void ErrorLastGetAsync(object userState) {
            if ((this.onBeginErrorLastGetDelegate == null)) {
                this.onBeginErrorLastGetDelegate = new BeginOperationDelegate(this.OnBeginErrorLastGet);
            }
            if ((this.onEndErrorLastGetDelegate == null)) {
                this.onEndErrorLastGetDelegate = new EndOperationDelegate(this.OnEndErrorLastGet);
            }
            if ((this.onErrorLastGetCompletedDelegate == null)) {
                this.onErrorLastGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnErrorLastGetCompleted);
            }
            base.InvokeAsync(this.onBeginErrorLastGetDelegate, null, this.onEndErrorLastGetDelegate, this.onErrorLastGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginLogger_Notice(string sFrom, string sText, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogger_Notice(sFrom, sText, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndLogger_Notice(System.IAsyncResult result) {
            base.Channel.EndLogger_Notice(result);
        }
        
        private System.IAsyncResult OnBeginLogger_Notice(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sFrom = ((string)(inValues[0]));
            string sText = ((string)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginLogger_Notice(sFrom, sText, callback, asyncState);
        }
        
        private object[] OnEndLogger_Notice(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndLogger_Notice(result);
            return null;
        }
        
        private void OnLogger_NoticeCompleted(object state) {
            if ((this.Logger_NoticeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Logger_NoticeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Logger_NoticeAsync(string sFrom, string sText) {
            this.Logger_NoticeAsync(sFrom, sText, null);
        }
        
        public void Logger_NoticeAsync(string sFrom, string sText, object userState) {
            if ((this.onBeginLogger_NoticeDelegate == null)) {
                this.onBeginLogger_NoticeDelegate = new BeginOperationDelegate(this.OnBeginLogger_Notice);
            }
            if ((this.onEndLogger_NoticeDelegate == null)) {
                this.onEndLogger_NoticeDelegate = new EndOperationDelegate(this.OnEndLogger_Notice);
            }
            if ((this.onLogger_NoticeCompletedDelegate == null)) {
                this.onLogger_NoticeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogger_NoticeCompleted);
            }
            base.InvokeAsync(this.onBeginLogger_NoticeDelegate, new object[] {
                        sFrom,
                        sText}, this.onEndLogger_NoticeDelegate, this.onLogger_NoticeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginLogger_Error(string sFrom, string sEx, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogger_Error(sFrom, sEx, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndLogger_Error(System.IAsyncResult result) {
            base.Channel.EndLogger_Error(result);
        }
        
        private System.IAsyncResult OnBeginLogger_Error(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sFrom = ((string)(inValues[0]));
            string sEx = ((string)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginLogger_Error(sFrom, sEx, callback, asyncState);
        }
        
        private object[] OnEndLogger_Error(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndLogger_Error(result);
            return null;
        }
        
        private void OnLogger_ErrorCompleted(object state) {
            if ((this.Logger_ErrorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Logger_ErrorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Logger_ErrorAsync(string sFrom, string sEx) {
            this.Logger_ErrorAsync(sFrom, sEx, null);
        }
        
        public void Logger_ErrorAsync(string sFrom, string sEx, object userState) {
            if ((this.onBeginLogger_ErrorDelegate == null)) {
                this.onBeginLogger_ErrorDelegate = new BeginOperationDelegate(this.OnBeginLogger_Error);
            }
            if ((this.onEndLogger_ErrorDelegate == null)) {
                this.onEndLogger_ErrorDelegate = new EndOperationDelegate(this.OnEndLogger_Error);
            }
            if ((this.onLogger_ErrorCompletedDelegate == null)) {
                this.onLogger_ErrorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogger_ErrorCompleted);
            }
            base.InvokeAsync(this.onBeginLogger_ErrorDelegate, new object[] {
                        sFrom,
                        sEx}, this.onEndLogger_ErrorDelegate, this.onLogger_ErrorCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginInitSession(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInitSession(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndInitSession(System.IAsyncResult result) {
            base.Channel.EndInitSession(result);
        }
        
        private System.IAsyncResult OnBeginInitSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginInitSession(callback, asyncState);
        }
        
        private object[] OnEndInitSession(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndInitSession(result);
            return null;
        }
        
        private void OnInitSessionCompleted(object state) {
            if ((this.InitSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InitSessionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InitSessionAsync() {
            this.InitSessionAsync(null);
        }
        
        public void InitSessionAsync(object userState) {
            if ((this.onBeginInitSessionDelegate == null)) {
                this.onBeginInitSessionDelegate = new BeginOperationDelegate(this.OnBeginInitSession);
            }
            if ((this.onEndInitSessionDelegate == null)) {
                this.onEndInitSessionDelegate = new EndOperationDelegate(this.OnEndInitSession);
            }
            if ((this.onInitSessionCompletedDelegate == null)) {
                this.onInitSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInitSessionCompleted);
            }
            base.InvokeAsync(this.onBeginInitSessionDelegate, null, this.onEndInitSessionDelegate, this.onInitSessionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginInit(string sName, string sPassword, string sClientVersion, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInit(sName, sPassword, sClientVersion, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string helpers.replica.services.dbinteract.DBInteractSoap.EndInit(System.IAsyncResult result) {
            return base.Channel.EndInit(result);
        }
        
        private System.IAsyncResult OnBeginInit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sName = ((string)(inValues[0]));
            string sPassword = ((string)(inValues[1]));
            string sClientVersion = ((string)(inValues[2]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginInit(sName, sPassword, sClientVersion, callback, asyncState);
        }
        
        private object[] OnEndInit(System.IAsyncResult result) {
            string retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndInit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInitCompleted(object state) {
            if ((this.InitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InitCompleted(this, new InitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InitAsync(string sName, string sPassword, string sClientVersion) {
            this.InitAsync(sName, sPassword, sClientVersion, null);
        }
        
        public void InitAsync(string sName, string sPassword, string sClientVersion, object userState) {
            if ((this.onBeginInitDelegate == null)) {
                this.onBeginInitDelegate = new BeginOperationDelegate(this.OnBeginInit);
            }
            if ((this.onEndInitDelegate == null)) {
                this.onEndInitDelegate = new EndOperationDelegate(this.OnEndInit);
            }
            if ((this.onInitCompletedDelegate == null)) {
                this.onInitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInitCompleted);
            }
            base.InvokeAsync(this.onBeginInitDelegate, new object[] {
                        sName,
                        sPassword,
                        sClientVersion}, this.onEndInitDelegate, this.onInitCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAccessScopesGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAccessScopesGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.AccessScope[] helpers.replica.services.dbinteract.DBInteractSoap.EndAccessScopesGet(System.IAsyncResult result) {
            return base.Channel.EndAccessScopesGet(result);
        }
        
        private System.IAsyncResult OnBeginAccessScopesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAccessScopesGet(callback, asyncState);
        }
        
        private object[] OnEndAccessScopesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.AccessScope[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAccessScopesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAccessScopesGetCompleted(object state) {
            if ((this.AccessScopesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AccessScopesGetCompleted(this, new AccessScopesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AccessScopesGetAsync() {
            this.AccessScopesGetAsync(null);
        }
        
        public void AccessScopesGetAsync(object userState) {
            if ((this.onBeginAccessScopesGetDelegate == null)) {
                this.onBeginAccessScopesGetDelegate = new BeginOperationDelegate(this.OnBeginAccessScopesGet);
            }
            if ((this.onEndAccessScopesGetDelegate == null)) {
                this.onEndAccessScopesGetDelegate = new EndOperationDelegate(this.OnEndAccessScopesGet);
            }
            if ((this.onAccessScopesGetCompletedDelegate == null)) {
                this.onAccessScopesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAccessScopesGetCompleted);
            }
            base.InvokeAsync(this.onBeginAccessScopesGetDelegate, null, this.onEndAccessScopesGetDelegate, this.onAccessScopesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginProfileGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProfileGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Profile helpers.replica.services.dbinteract.DBInteractSoap.EndProfileGet(System.IAsyncResult result) {
            return base.Channel.EndProfileGet(result);
        }
        
        private System.IAsyncResult OnBeginProfileGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginProfileGet(callback, asyncState);
        }
        
        private object[] OnEndProfileGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Profile retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndProfileGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProfileGetCompleted(object state) {
            if ((this.ProfileGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProfileGetCompleted(this, new ProfileGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProfileGetAsync() {
            this.ProfileGetAsync(null);
        }
        
        public void ProfileGetAsync(object userState) {
            if ((this.onBeginProfileGetDelegate == null)) {
                this.onBeginProfileGetDelegate = new BeginOperationDelegate(this.OnBeginProfileGet);
            }
            if ((this.onEndProfileGetDelegate == null)) {
                this.onEndProfileGetDelegate = new EndOperationDelegate(this.OnEndProfileGet);
            }
            if ((this.onProfileGetCompletedDelegate == null)) {
                this.onProfileGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProfileGetCompleted);
            }
            base.InvokeAsync(this.onBeginProfileGetDelegate, null, this.onEndProfileGetDelegate, this.onProfileGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPing(callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        public void PingAsync(object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, null, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAssetsRemove(helpers.replica.services.dbinteract.Asset[] aAssets, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssetsRemove(aAssets, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.AlterString[] helpers.replica.services.dbinteract.DBInteractSoap.EndAssetsRemove(System.IAsyncResult result) {
            return base.Channel.EndAssetsRemove(result);
        }
        
        private System.IAsyncResult OnBeginAssetsRemove(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset[] aAssets = ((helpers.replica.services.dbinteract.Asset[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAssetsRemove(aAssets, callback, asyncState);
        }
        
        private object[] OnEndAssetsRemove(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.AlterString[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAssetsRemove(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssetsRemoveCompleted(object state) {
            if ((this.AssetsRemoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AssetsRemoveCompleted(this, new AssetsRemoveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AssetsRemoveAsync(helpers.replica.services.dbinteract.Asset[] aAssets) {
            this.AssetsRemoveAsync(aAssets, null);
        }
        
        public void AssetsRemoveAsync(helpers.replica.services.dbinteract.Asset[] aAssets, object userState) {
            if ((this.onBeginAssetsRemoveDelegate == null)) {
                this.onBeginAssetsRemoveDelegate = new BeginOperationDelegate(this.OnBeginAssetsRemove);
            }
            if ((this.onEndAssetsRemoveDelegate == null)) {
                this.onEndAssetsRemoveDelegate = new EndOperationDelegate(this.OnEndAssetsRemove);
            }
            if ((this.onAssetsRemoveCompletedDelegate == null)) {
                this.onAssetsRemoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssetsRemoveCompleted);
            }
            base.InvokeAsync(this.onBeginAssetsRemoveDelegate, new object[] {
                        aAssets}, this.onEndAssetsRemoveDelegate, this.onAssetsRemoveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAssetsGet(string sVideoTypeFilter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssetsGet(sVideoTypeFilter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Asset[] helpers.replica.services.dbinteract.DBInteractSoap.EndAssetsGet(System.IAsyncResult result) {
            return base.Channel.EndAssetsGet(result);
        }
        
        private System.IAsyncResult OnBeginAssetsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sVideoTypeFilter = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAssetsGet(sVideoTypeFilter, callback, asyncState);
        }
        
        private object[] OnEndAssetsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Asset[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAssetsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssetsGetCompleted(object state) {
            if ((this.AssetsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AssetsGetCompleted(this, new AssetsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AssetsGetAsync(string sVideoTypeFilter) {
            this.AssetsGetAsync(sVideoTypeFilter, null);
        }
        
        public void AssetsGetAsync(string sVideoTypeFilter, object userState) {
            if ((this.onBeginAssetsGetDelegate == null)) {
                this.onBeginAssetsGetDelegate = new BeginOperationDelegate(this.OnBeginAssetsGet);
            }
            if ((this.onEndAssetsGetDelegate == null)) {
                this.onEndAssetsGetDelegate = new EndOperationDelegate(this.OnEndAssetsGet);
            }
            if ((this.onAssetsGetCompletedDelegate == null)) {
                this.onAssetsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssetsGetCompleted);
            }
            base.InvokeAsync(this.onBeginAssetsGetDelegate, new object[] {
                        sVideoTypeFilter}, this.onEndAssetsGetDelegate, this.onAssetsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginProgramsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProgramsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Program[] helpers.replica.services.dbinteract.DBInteractSoap.EndProgramsGet(System.IAsyncResult result) {
            return base.Channel.EndProgramsGet(result);
        }
        
        private System.IAsyncResult OnBeginProgramsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginProgramsGet(callback, asyncState);
        }
        
        private object[] OnEndProgramsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Program[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndProgramsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProgramsGetCompleted(object state) {
            if ((this.ProgramsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProgramsGetCompleted(this, new ProgramsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProgramsGetAsync() {
            this.ProgramsGetAsync(null);
        }
        
        public void ProgramsGetAsync(object userState) {
            if ((this.onBeginProgramsGetDelegate == null)) {
                this.onBeginProgramsGetDelegate = new BeginOperationDelegate(this.OnBeginProgramsGet);
            }
            if ((this.onEndProgramsGetDelegate == null)) {
                this.onEndProgramsGetDelegate = new EndOperationDelegate(this.OnEndProgramsGet);
            }
            if ((this.onProgramsGetCompletedDelegate == null)) {
                this.onProgramsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProgramsGetCompleted);
            }
            base.InvokeAsync(this.onBeginProgramsGetDelegate, null, this.onEndProgramsGetDelegate, this.onProgramsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginClipGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClipGet(nAssetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Clip helpers.replica.services.dbinteract.DBInteractSoap.EndClipGet(System.IAsyncResult result) {
            return base.Channel.EndClipGet(result);
        }
        
        private System.IAsyncResult OnBeginClipGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginClipGet(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndClipGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Clip retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndClipGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClipGetCompleted(object state) {
            if ((this.ClipGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClipGetCompleted(this, new ClipGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClipGetAsync(long nAssetID) {
            this.ClipGetAsync(nAssetID, null);
        }
        
        public void ClipGetAsync(long nAssetID, object userState) {
            if ((this.onBeginClipGetDelegate == null)) {
                this.onBeginClipGetDelegate = new BeginOperationDelegate(this.OnBeginClipGet);
            }
            if ((this.onEndClipGetDelegate == null)) {
                this.onEndClipGetDelegate = new EndOperationDelegate(this.OnEndClipGet);
            }
            if ((this.onClipGetCompletedDelegate == null)) {
                this.onClipGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClipGetCompleted);
            }
            base.InvokeAsync(this.onBeginClipGetDelegate, new object[] {
                        nAssetID}, this.onEndClipGetDelegate, this.onClipGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginClipsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClipsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Clip[] helpers.replica.services.dbinteract.DBInteractSoap.EndClipsGet(System.IAsyncResult result) {
            return base.Channel.EndClipsGet(result);
        }
        
        private System.IAsyncResult OnBeginClipsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginClipsGet(callback, asyncState);
        }
        
        private object[] OnEndClipsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Clip[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndClipsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClipsGetCompleted(object state) {
            if ((this.ClipsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClipsGetCompleted(this, new ClipsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClipsGetAsync() {
            this.ClipsGetAsync(null);
        }
        
        public void ClipsGetAsync(object userState) {
            if ((this.onBeginClipsGetDelegate == null)) {
                this.onBeginClipsGetDelegate = new BeginOperationDelegate(this.OnBeginClipsGet);
            }
            if ((this.onEndClipsGetDelegate == null)) {
                this.onEndClipsGetDelegate = new EndOperationDelegate(this.OnEndClipsGet);
            }
            if ((this.onClipsGetCompletedDelegate == null)) {
                this.onClipsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClipsGetCompleted);
            }
            base.InvokeAsync(this.onBeginClipsGetDelegate, null, this.onEndClipsGetDelegate, this.onClipsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvertisementGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvertisementGet(nAssetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Advertisement helpers.replica.services.dbinteract.DBInteractSoap.EndAdvertisementGet(System.IAsyncResult result) {
            return base.Channel.EndAdvertisementGet(result);
        }
        
        private System.IAsyncResult OnBeginAdvertisementGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvertisementGet(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndAdvertisementGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Advertisement retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvertisementGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvertisementGetCompleted(object state) {
            if ((this.AdvertisementGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvertisementGetCompleted(this, new AdvertisementGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvertisementGetAsync(long nAssetID) {
            this.AdvertisementGetAsync(nAssetID, null);
        }
        
        public void AdvertisementGetAsync(long nAssetID, object userState) {
            if ((this.onBeginAdvertisementGetDelegate == null)) {
                this.onBeginAdvertisementGetDelegate = new BeginOperationDelegate(this.OnBeginAdvertisementGet);
            }
            if ((this.onEndAdvertisementGetDelegate == null)) {
                this.onEndAdvertisementGetDelegate = new EndOperationDelegate(this.OnEndAdvertisementGet);
            }
            if ((this.onAdvertisementGetCompletedDelegate == null)) {
                this.onAdvertisementGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvertisementGetCompleted);
            }
            base.InvokeAsync(this.onBeginAdvertisementGetDelegate, new object[] {
                        nAssetID}, this.onEndAdvertisementGetDelegate, this.onAdvertisementGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvertisementsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvertisementsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Asset[] helpers.replica.services.dbinteract.DBInteractSoap.EndAdvertisementsGet(System.IAsyncResult result) {
            return base.Channel.EndAdvertisementsGet(result);
        }
        
        private System.IAsyncResult OnBeginAdvertisementsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvertisementsGet(callback, asyncState);
        }
        
        private object[] OnEndAdvertisementsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Asset[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvertisementsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvertisementsGetCompleted(object state) {
            if ((this.AdvertisementsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvertisementsGetCompleted(this, new AdvertisementsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvertisementsGetAsync() {
            this.AdvertisementsGetAsync(null);
        }
        
        public void AdvertisementsGetAsync(object userState) {
            if ((this.onBeginAdvertisementsGetDelegate == null)) {
                this.onBeginAdvertisementsGetDelegate = new BeginOperationDelegate(this.OnBeginAdvertisementsGet);
            }
            if ((this.onEndAdvertisementsGetDelegate == null)) {
                this.onEndAdvertisementsGetDelegate = new EndOperationDelegate(this.OnEndAdvertisementsGet);
            }
            if ((this.onAdvertisementsGetCompletedDelegate == null)) {
                this.onAdvertisementsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvertisementsGetCompleted);
            }
            base.InvokeAsync(this.onBeginAdvertisementsGetDelegate, null, this.onEndAdvertisementsGetDelegate, this.onAdvertisementsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginDesignGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDesignGet(nAssetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Design helpers.replica.services.dbinteract.DBInteractSoap.EndDesignGet(System.IAsyncResult result) {
            return base.Channel.EndDesignGet(result);
        }
        
        private System.IAsyncResult OnBeginDesignGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginDesignGet(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndDesignGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Design retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndDesignGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDesignGetCompleted(object state) {
            if ((this.DesignGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DesignGetCompleted(this, new DesignGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DesignGetAsync(long nAssetID) {
            this.DesignGetAsync(nAssetID, null);
        }
        
        public void DesignGetAsync(long nAssetID, object userState) {
            if ((this.onBeginDesignGetDelegate == null)) {
                this.onBeginDesignGetDelegate = new BeginOperationDelegate(this.OnBeginDesignGet);
            }
            if ((this.onEndDesignGetDelegate == null)) {
                this.onEndDesignGetDelegate = new EndOperationDelegate(this.OnEndDesignGet);
            }
            if ((this.onDesignGetCompletedDelegate == null)) {
                this.onDesignGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDesignGetCompleted);
            }
            base.InvokeAsync(this.onBeginDesignGetDelegate, new object[] {
                        nAssetID}, this.onEndDesignGetDelegate, this.onDesignGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginDesignsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDesignsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Asset[] helpers.replica.services.dbinteract.DBInteractSoap.EndDesignsGet(System.IAsyncResult result) {
            return base.Channel.EndDesignsGet(result);
        }
        
        private System.IAsyncResult OnBeginDesignsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginDesignsGet(callback, asyncState);
        }
        
        private object[] OnEndDesignsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Asset[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndDesignsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDesignsGetCompleted(object state) {
            if ((this.DesignsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DesignsGetCompleted(this, new DesignsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DesignsGetAsync() {
            this.DesignsGetAsync(null);
        }
        
        public void DesignsGetAsync(object userState) {
            if ((this.onBeginDesignsGetDelegate == null)) {
                this.onBeginDesignsGetDelegate = new BeginOperationDelegate(this.OnBeginDesignsGet);
            }
            if ((this.onEndDesignsGetDelegate == null)) {
                this.onEndDesignsGetDelegate = new EndOperationDelegate(this.OnEndDesignsGet);
            }
            if ((this.onDesignsGetCompletedDelegate == null)) {
                this.onDesignsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDesignsGetCompleted);
            }
            base.InvokeAsync(this.onBeginDesignsGetDelegate, null, this.onEndDesignsGetDelegate, this.onDesignsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAssetVideoTypeGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssetVideoTypeGet(nAssetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair helpers.replica.services.dbinteract.DBInteractSoap.EndAssetVideoTypeGet(System.IAsyncResult result) {
            return base.Channel.EndAssetVideoTypeGet(result);
        }
        
        private System.IAsyncResult OnBeginAssetVideoTypeGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAssetVideoTypeGet(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndAssetVideoTypeGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAssetVideoTypeGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssetVideoTypeGetCompleted(object state) {
            if ((this.AssetVideoTypeGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AssetVideoTypeGetCompleted(this, new AssetVideoTypeGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AssetVideoTypeGetAsync(long nAssetID) {
            this.AssetVideoTypeGetAsync(nAssetID, null);
        }
        
        public void AssetVideoTypeGetAsync(long nAssetID, object userState) {
            if ((this.onBeginAssetVideoTypeGetDelegate == null)) {
                this.onBeginAssetVideoTypeGetDelegate = new BeginOperationDelegate(this.OnBeginAssetVideoTypeGet);
            }
            if ((this.onEndAssetVideoTypeGetDelegate == null)) {
                this.onEndAssetVideoTypeGetDelegate = new EndOperationDelegate(this.OnEndAssetVideoTypeGet);
            }
            if ((this.onAssetVideoTypeGetCompletedDelegate == null)) {
                this.onAssetVideoTypeGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssetVideoTypeGetCompleted);
            }
            base.InvokeAsync(this.onBeginAssetVideoTypeGetDelegate, new object[] {
                        nAssetID}, this.onEndAssetVideoTypeGetDelegate, this.onAssetVideoTypeGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginClassesGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClassesGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Class[] helpers.replica.services.dbinteract.DBInteractSoap.EndClassesGet(System.IAsyncResult result) {
            return base.Channel.EndClassesGet(result);
        }
        
        private System.IAsyncResult OnBeginClassesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginClassesGet(callback, asyncState);
        }
        
        private object[] OnEndClassesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Class[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndClassesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClassesGetCompleted(object state) {
            if ((this.ClassesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClassesGetCompleted(this, new ClassesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClassesGetAsync() {
            this.ClassesGetAsync(null);
        }
        
        public void ClassesGetAsync(object userState) {
            if ((this.onBeginClassesGetDelegate == null)) {
                this.onBeginClassesGetDelegate = new BeginOperationDelegate(this.OnBeginClassesGet);
            }
            if ((this.onEndClassesGetDelegate == null)) {
                this.onEndClassesGetDelegate = new EndOperationDelegate(this.OnEndClassesGet);
            }
            if ((this.onClassesGetCompletedDelegate == null)) {
                this.onClassesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClassesGetCompleted);
            }
            base.InvokeAsync(this.onBeginClassesGetDelegate, null, this.onEndClassesGetDelegate, this.onClassesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginClassesSet(helpers.replica.services.dbinteract.Asset[] aAssets, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClassesSet(aAssets, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Asset[] helpers.replica.services.dbinteract.DBInteractSoap.EndClassesSet(System.IAsyncResult result) {
            return base.Channel.EndClassesSet(result);
        }
        
        private System.IAsyncResult OnBeginClassesSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset[] aAssets = ((helpers.replica.services.dbinteract.Asset[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginClassesSet(aAssets, callback, asyncState);
        }
        
        private object[] OnEndClassesSet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Asset[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndClassesSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClassesSetCompleted(object state) {
            if ((this.ClassesSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClassesSetCompleted(this, new ClassesSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClassesSetAsync(helpers.replica.services.dbinteract.Asset[] aAssets) {
            this.ClassesSetAsync(aAssets, null);
        }
        
        public void ClassesSetAsync(helpers.replica.services.dbinteract.Asset[] aAssets, object userState) {
            if ((this.onBeginClassesSetDelegate == null)) {
                this.onBeginClassesSetDelegate = new BeginOperationDelegate(this.OnBeginClassesSet);
            }
            if ((this.onEndClassesSetDelegate == null)) {
                this.onEndClassesSetDelegate = new EndOperationDelegate(this.OnEndClassesSet);
            }
            if ((this.onClassesSetCompletedDelegate == null)) {
                this.onClassesSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClassesSetCompleted);
            }
            base.InvokeAsync(this.onBeginClassesSetDelegate, new object[] {
                        aAssets}, this.onEndClassesSetDelegate, this.onClassesSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginRotationsSet(helpers.replica.services.dbinteract.Clip[] aClips, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRotationsSet(aClips, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Clip[] helpers.replica.services.dbinteract.DBInteractSoap.EndRotationsSet(System.IAsyncResult result) {
            return base.Channel.EndRotationsSet(result);
        }
        
        private System.IAsyncResult OnBeginRotationsSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Clip[] aClips = ((helpers.replica.services.dbinteract.Clip[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginRotationsSet(aClips, callback, asyncState);
        }
        
        private object[] OnEndRotationsSet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Clip[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndRotationsSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRotationsSetCompleted(object state) {
            if ((this.RotationsSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RotationsSetCompleted(this, new RotationsSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RotationsSetAsync(helpers.replica.services.dbinteract.Clip[] aClips) {
            this.RotationsSetAsync(aClips, null);
        }
        
        public void RotationsSetAsync(helpers.replica.services.dbinteract.Clip[] aClips, object userState) {
            if ((this.onBeginRotationsSetDelegate == null)) {
                this.onBeginRotationsSetDelegate = new BeginOperationDelegate(this.OnBeginRotationsSet);
            }
            if ((this.onEndRotationsSetDelegate == null)) {
                this.onEndRotationsSetDelegate = new EndOperationDelegate(this.OnEndRotationsSet);
            }
            if ((this.onRotationsSetCompletedDelegate == null)) {
                this.onRotationsSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRotationsSetCompleted);
            }
            base.InvokeAsync(this.onBeginRotationsSetDelegate, new object[] {
                        aClips}, this.onEndRotationsSetDelegate, this.onRotationsSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginStatusesGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStatusesGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndStatusesGet(System.IAsyncResult result) {
            return base.Channel.EndStatusesGet(result);
        }
        
        private System.IAsyncResult OnBeginStatusesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginStatusesGet(callback, asyncState);
        }
        
        private object[] OnEndStatusesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndStatusesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStatusesGetCompleted(object state) {
            if ((this.StatusesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StatusesGetCompleted(this, new StatusesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StatusesGetAsync() {
            this.StatusesGetAsync(null);
        }
        
        public void StatusesGetAsync(object userState) {
            if ((this.onBeginStatusesGetDelegate == null)) {
                this.onBeginStatusesGetDelegate = new BeginOperationDelegate(this.OnBeginStatusesGet);
            }
            if ((this.onEndStatusesGetDelegate == null)) {
                this.onEndStatusesGetDelegate = new EndOperationDelegate(this.OnEndStatusesGet);
            }
            if ((this.onStatusesGetCompletedDelegate == null)) {
                this.onStatusesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStatusesGetCompleted);
            }
            base.InvokeAsync(this.onBeginStatusesGetDelegate, null, this.onEndStatusesGetDelegate, this.onStatusesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginStatusesClearGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStatusesClearGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndStatusesClearGet(System.IAsyncResult result) {
            return base.Channel.EndStatusesClearGet(result);
        }
        
        private System.IAsyncResult OnBeginStatusesClearGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginStatusesClearGet(callback, asyncState);
        }
        
        private object[] OnEndStatusesClearGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndStatusesClearGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStatusesClearGetCompleted(object state) {
            if ((this.StatusesClearGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StatusesClearGetCompleted(this, new StatusesClearGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StatusesClearGetAsync() {
            this.StatusesClearGetAsync(null);
        }
        
        public void StatusesClearGetAsync(object userState) {
            if ((this.onBeginStatusesClearGetDelegate == null)) {
                this.onBeginStatusesClearGetDelegate = new BeginOperationDelegate(this.OnBeginStatusesClearGet);
            }
            if ((this.onEndStatusesClearGetDelegate == null)) {
                this.onEndStatusesClearGetDelegate = new EndOperationDelegate(this.OnEndStatusesClearGet);
            }
            if ((this.onStatusesClearGetCompletedDelegate == null)) {
                this.onStatusesClearGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStatusesClearGetCompleted);
            }
            base.InvokeAsync(this.onBeginStatusesClearGetDelegate, null, this.onEndStatusesClearGetDelegate, this.onStatusesClearGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginChatInOutsGet(helpers.replica.services.dbinteract.Asset cAsset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChatInOutsGet(cAsset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.ChatInOut[] helpers.replica.services.dbinteract.DBInteractSoap.EndChatInOutsGet(System.IAsyncResult result) {
            return base.Channel.EndChatInOutsGet(result);
        }
        
        private System.IAsyncResult OnBeginChatInOutsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset cAsset = ((helpers.replica.services.dbinteract.Asset)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginChatInOutsGet(cAsset, callback, asyncState);
        }
        
        private object[] OnEndChatInOutsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.ChatInOut[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndChatInOutsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChatInOutsGetCompleted(object state) {
            if ((this.ChatInOutsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChatInOutsGetCompleted(this, new ChatInOutsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChatInOutsGetAsync(helpers.replica.services.dbinteract.Asset cAsset) {
            this.ChatInOutsGetAsync(cAsset, null);
        }
        
        public void ChatInOutsGetAsync(helpers.replica.services.dbinteract.Asset cAsset, object userState) {
            if ((this.onBeginChatInOutsGetDelegate == null)) {
                this.onBeginChatInOutsGetDelegate = new BeginOperationDelegate(this.OnBeginChatInOutsGet);
            }
            if ((this.onEndChatInOutsGetDelegate == null)) {
                this.onEndChatInOutsGetDelegate = new EndOperationDelegate(this.OnEndChatInOutsGet);
            }
            if ((this.onChatInOutsGetCompletedDelegate == null)) {
                this.onChatInOutsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChatInOutsGetCompleted);
            }
            base.InvokeAsync(this.onBeginChatInOutsGetDelegate, new object[] {
                        cAsset}, this.onEndChatInOutsGetDelegate, this.onChatInOutsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginChatInOutsSave(helpers.replica.services.dbinteract.Asset cAsset, helpers.replica.services.dbinteract.ChatInOut[] aChatInOuts, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChatInOutsSave(cAsset, aChatInOuts, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndChatInOutsSave(System.IAsyncResult result) {
            return base.Channel.EndChatInOutsSave(result);
        }
        
        private System.IAsyncResult OnBeginChatInOutsSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset cAsset = ((helpers.replica.services.dbinteract.Asset)(inValues[0]));
            helpers.replica.services.dbinteract.ChatInOut[] aChatInOuts = ((helpers.replica.services.dbinteract.ChatInOut[])(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginChatInOutsSave(cAsset, aChatInOuts, callback, asyncState);
        }
        
        private object[] OnEndChatInOutsSave(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndChatInOutsSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChatInOutsSaveCompleted(object state) {
            if ((this.ChatInOutsSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChatInOutsSaveCompleted(this, new ChatInOutsSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChatInOutsSaveAsync(helpers.replica.services.dbinteract.Asset cAsset, helpers.replica.services.dbinteract.ChatInOut[] aChatInOuts) {
            this.ChatInOutsSaveAsync(cAsset, aChatInOuts, null);
        }
        
        public void ChatInOutsSaveAsync(helpers.replica.services.dbinteract.Asset cAsset, helpers.replica.services.dbinteract.ChatInOut[] aChatInOuts, object userState) {
            if ((this.onBeginChatInOutsSaveDelegate == null)) {
                this.onBeginChatInOutsSaveDelegate = new BeginOperationDelegate(this.OnBeginChatInOutsSave);
            }
            if ((this.onEndChatInOutsSaveDelegate == null)) {
                this.onEndChatInOutsSaveDelegate = new EndOperationDelegate(this.OnEndChatInOutsSave);
            }
            if ((this.onChatInOutsSaveCompletedDelegate == null)) {
                this.onChatInOutsSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChatInOutsSaveCompleted);
            }
            base.InvokeAsync(this.onBeginChatInOutsSaveDelegate, new object[] {
                        cAsset,
                        aChatInOuts}, this.onEndChatInOutsSaveDelegate, this.onChatInOutsSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginRingtoneAdd(helpers.replica.services.dbinteract.Clip cClip, int nRTCode, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRingtoneAdd(cClip, nRTCode, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndRingtoneAdd(System.IAsyncResult result) {
            base.Channel.EndRingtoneAdd(result);
        }
        
        private System.IAsyncResult OnBeginRingtoneAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Clip cClip = ((helpers.replica.services.dbinteract.Clip)(inValues[0]));
            int nRTCode = ((int)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginRingtoneAdd(cClip, nRTCode, callback, asyncState);
        }
        
        private object[] OnEndRingtoneAdd(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndRingtoneAdd(result);
            return null;
        }
        
        private void OnRingtoneAddCompleted(object state) {
            if ((this.RingtoneAddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RingtoneAddCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RingtoneAddAsync(helpers.replica.services.dbinteract.Clip cClip, int nRTCode) {
            this.RingtoneAddAsync(cClip, nRTCode, null);
        }
        
        public void RingtoneAddAsync(helpers.replica.services.dbinteract.Clip cClip, int nRTCode, object userState) {
            if ((this.onBeginRingtoneAddDelegate == null)) {
                this.onBeginRingtoneAddDelegate = new BeginOperationDelegate(this.OnBeginRingtoneAdd);
            }
            if ((this.onEndRingtoneAddDelegate == null)) {
                this.onEndRingtoneAddDelegate = new EndOperationDelegate(this.OnEndRingtoneAdd);
            }
            if ((this.onRingtoneAddCompletedDelegate == null)) {
                this.onRingtoneAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRingtoneAddCompleted);
            }
            base.InvokeAsync(this.onBeginRingtoneAddDelegate, new object[] {
                        cClip,
                        nRTCode}, this.onEndRingtoneAddDelegate, this.onRingtoneAddCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginClipSave(helpers.replica.services.dbinteract.Clip cClip, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginClipSave(cClip, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long helpers.replica.services.dbinteract.DBInteractSoap.EndClipSave(System.IAsyncResult result) {
            return base.Channel.EndClipSave(result);
        }
        
        private System.IAsyncResult OnBeginClipSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Clip cClip = ((helpers.replica.services.dbinteract.Clip)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginClipSave(cClip, callback, asyncState);
        }
        
        private object[] OnEndClipSave(System.IAsyncResult result) {
            long retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndClipSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnClipSaveCompleted(object state) {
            if ((this.ClipSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ClipSaveCompleted(this, new ClipSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ClipSaveAsync(helpers.replica.services.dbinteract.Clip cClip) {
            this.ClipSaveAsync(cClip, null);
        }
        
        public void ClipSaveAsync(helpers.replica.services.dbinteract.Clip cClip, object userState) {
            if ((this.onBeginClipSaveDelegate == null)) {
                this.onBeginClipSaveDelegate = new BeginOperationDelegate(this.OnBeginClipSave);
            }
            if ((this.onEndClipSaveDelegate == null)) {
                this.onEndClipSaveDelegate = new EndOperationDelegate(this.OnEndClipSave);
            }
            if ((this.onClipSaveCompletedDelegate == null)) {
                this.onClipSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnClipSaveCompleted);
            }
            base.InvokeAsync(this.onBeginClipSaveDelegate, new object[] {
                        cClip}, this.onEndClipSaveDelegate, this.onClipSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginVideoTypeGet(string sType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginVideoTypeGet(sType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair helpers.replica.services.dbinteract.DBInteractSoap.EndVideoTypeGet(System.IAsyncResult result) {
            return base.Channel.EndVideoTypeGet(result);
        }
        
        private System.IAsyncResult OnBeginVideoTypeGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sType = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginVideoTypeGet(sType, callback, asyncState);
        }
        
        private object[] OnEndVideoTypeGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndVideoTypeGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVideoTypeGetCompleted(object state) {
            if ((this.VideoTypeGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VideoTypeGetCompleted(this, new VideoTypeGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VideoTypeGetAsync(string sType) {
            this.VideoTypeGetAsync(sType, null);
        }
        
        public void VideoTypeGetAsync(string sType, object userState) {
            if ((this.onBeginVideoTypeGetDelegate == null)) {
                this.onBeginVideoTypeGetDelegate = new BeginOperationDelegate(this.OnBeginVideoTypeGet);
            }
            if ((this.onEndVideoTypeGetDelegate == null)) {
                this.onEndVideoTypeGetDelegate = new EndOperationDelegate(this.OnEndVideoTypeGet);
            }
            if ((this.onVideoTypeGetCompletedDelegate == null)) {
                this.onVideoTypeGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVideoTypeGetCompleted);
            }
            base.InvokeAsync(this.onBeginVideoTypeGetDelegate, new object[] {
                        sType}, this.onEndVideoTypeGetDelegate, this.onVideoTypeGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginVideoTypesGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginVideoTypesGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndVideoTypesGet(System.IAsyncResult result) {
            return base.Channel.EndVideoTypesGet(result);
        }
        
        private System.IAsyncResult OnBeginVideoTypesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginVideoTypesGet(callback, asyncState);
        }
        
        private object[] OnEndVideoTypesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndVideoTypesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVideoTypesGetCompleted(object state) {
            if ((this.VideoTypesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VideoTypesGetCompleted(this, new VideoTypesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VideoTypesGetAsync() {
            this.VideoTypesGetAsync(null);
        }
        
        public void VideoTypesGetAsync(object userState) {
            if ((this.onBeginVideoTypesGetDelegate == null)) {
                this.onBeginVideoTypesGetDelegate = new BeginOperationDelegate(this.OnBeginVideoTypesGet);
            }
            if ((this.onEndVideoTypesGetDelegate == null)) {
                this.onEndVideoTypesGetDelegate = new EndOperationDelegate(this.OnEndVideoTypesGet);
            }
            if ((this.onVideoTypesGetCompletedDelegate == null)) {
                this.onVideoTypesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVideoTypesGetCompleted);
            }
            base.InvokeAsync(this.onBeginVideoTypesGetDelegate, null, this.onEndVideoTypesGetDelegate, this.onVideoTypesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginProgramGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProgramGet(nAssetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Program helpers.replica.services.dbinteract.DBInteractSoap.EndProgramGet(System.IAsyncResult result) {
            return base.Channel.EndProgramGet(result);
        }
        
        private System.IAsyncResult OnBeginProgramGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginProgramGet(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndProgramGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Program retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndProgramGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProgramGetCompleted(object state) {
            if ((this.ProgramGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProgramGetCompleted(this, new ProgramGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProgramGetAsync(long nAssetID) {
            this.ProgramGetAsync(nAssetID, null);
        }
        
        public void ProgramGetAsync(long nAssetID, object userState) {
            if ((this.onBeginProgramGetDelegate == null)) {
                this.onBeginProgramGetDelegate = new BeginOperationDelegate(this.OnBeginProgramGet);
            }
            if ((this.onEndProgramGetDelegate == null)) {
                this.onEndProgramGetDelegate = new EndOperationDelegate(this.OnEndProgramGet);
            }
            if ((this.onProgramGetCompletedDelegate == null)) {
                this.onProgramGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProgramGetCompleted);
            }
            base.InvokeAsync(this.onBeginProgramGetDelegate, new object[] {
                        nAssetID}, this.onEndProgramGetDelegate, this.onProgramGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAssetsSave(helpers.replica.services.dbinteract.Asset[] aAsset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssetsSave(aAsset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.AlterString[] helpers.replica.services.dbinteract.DBInteractSoap.EndAssetsSave(System.IAsyncResult result) {
            return base.Channel.EndAssetsSave(result);
        }
        
        private System.IAsyncResult OnBeginAssetsSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset[] aAsset = ((helpers.replica.services.dbinteract.Asset[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAssetsSave(aAsset, callback, asyncState);
        }
        
        private object[] OnEndAssetsSave(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.AlterString[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAssetsSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssetsSaveCompleted(object state) {
            if ((this.AssetsSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AssetsSaveCompleted(this, new AssetsSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AssetsSaveAsync(helpers.replica.services.dbinteract.Asset[] aAsset) {
            this.AssetsSaveAsync(aAsset, null);
        }
        
        public void AssetsSaveAsync(helpers.replica.services.dbinteract.Asset[] aAsset, object userState) {
            if ((this.onBeginAssetsSaveDelegate == null)) {
                this.onBeginAssetsSaveDelegate = new BeginOperationDelegate(this.OnBeginAssetsSave);
            }
            if ((this.onEndAssetsSaveDelegate == null)) {
                this.onEndAssetsSaveDelegate = new EndOperationDelegate(this.OnEndAssetsSave);
            }
            if ((this.onAssetsSaveCompletedDelegate == null)) {
                this.onAssetsSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssetsSaveCompleted);
            }
            base.InvokeAsync(this.onBeginAssetsSaveDelegate, new object[] {
                        aAsset}, this.onEndAssetsSaveDelegate, this.onAssetsSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAssetParametersToPlaylistSave(long nAssetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssetParametersToPlaylistSave(nAssetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndAssetParametersToPlaylistSave(System.IAsyncResult result) {
            return base.Channel.EndAssetParametersToPlaylistSave(result);
        }
        
        private System.IAsyncResult OnBeginAssetParametersToPlaylistSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAssetParametersToPlaylistSave(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndAssetParametersToPlaylistSave(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAssetParametersToPlaylistSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssetParametersToPlaylistSaveCompleted(object state) {
            if ((this.AssetParametersToPlaylistSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AssetParametersToPlaylistSaveCompleted(this, new AssetParametersToPlaylistSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AssetParametersToPlaylistSaveAsync(long nAssetID) {
            this.AssetParametersToPlaylistSaveAsync(nAssetID, null);
        }
        
        public void AssetParametersToPlaylistSaveAsync(long nAssetID, object userState) {
            if ((this.onBeginAssetParametersToPlaylistSaveDelegate == null)) {
                this.onBeginAssetParametersToPlaylistSaveDelegate = new BeginOperationDelegate(this.OnBeginAssetParametersToPlaylistSave);
            }
            if ((this.onEndAssetParametersToPlaylistSaveDelegate == null)) {
                this.onEndAssetParametersToPlaylistSaveDelegate = new EndOperationDelegate(this.OnEndAssetParametersToPlaylistSave);
            }
            if ((this.onAssetParametersToPlaylistSaveCompletedDelegate == null)) {
                this.onAssetParametersToPlaylistSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssetParametersToPlaylistSaveCompleted);
            }
            base.InvokeAsync(this.onBeginAssetParametersToPlaylistSaveDelegate, new object[] {
                        nAssetID}, this.onEndAssetParametersToPlaylistSaveDelegate, this.onAssetParametersToPlaylistSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginProgramSave(helpers.replica.services.dbinteract.Program cProgram, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProgramSave(cProgram, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long helpers.replica.services.dbinteract.DBInteractSoap.EndProgramSave(System.IAsyncResult result) {
            return base.Channel.EndProgramSave(result);
        }
        
        private System.IAsyncResult OnBeginProgramSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Program cProgram = ((helpers.replica.services.dbinteract.Program)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginProgramSave(cProgram, callback, asyncState);
        }
        
        private object[] OnEndProgramSave(System.IAsyncResult result) {
            long retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndProgramSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProgramSaveCompleted(object state) {
            if ((this.ProgramSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProgramSaveCompleted(this, new ProgramSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProgramSaveAsync(helpers.replica.services.dbinteract.Program cProgram) {
            this.ProgramSaveAsync(cProgram, null);
        }
        
        public void ProgramSaveAsync(helpers.replica.services.dbinteract.Program cProgram, object userState) {
            if ((this.onBeginProgramSaveDelegate == null)) {
                this.onBeginProgramSaveDelegate = new BeginOperationDelegate(this.OnBeginProgramSave);
            }
            if ((this.onEndProgramSaveDelegate == null)) {
                this.onEndProgramSaveDelegate = new EndOperationDelegate(this.OnEndProgramSave);
            }
            if ((this.onProgramSaveCompletedDelegate == null)) {
                this.onProgramSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProgramSaveCompleted);
            }
            base.InvokeAsync(this.onBeginProgramSaveDelegate, new object[] {
                        cProgram}, this.onEndProgramSaveDelegate, this.onProgramSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAssetsParentAssign(helpers.replica.services.dbinteract.Asset[] aAsset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAssetsParentAssign(aAsset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndAssetsParentAssign(System.IAsyncResult result) {
            return base.Channel.EndAssetsParentAssign(result);
        }
        
        private System.IAsyncResult OnBeginAssetsParentAssign(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset[] aAsset = ((helpers.replica.services.dbinteract.Asset[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAssetsParentAssign(aAsset, callback, asyncState);
        }
        
        private object[] OnEndAssetsParentAssign(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAssetsParentAssign(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAssetsParentAssignCompleted(object state) {
            if ((this.AssetsParentAssignCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AssetsParentAssignCompleted(this, new AssetsParentAssignCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AssetsParentAssignAsync(helpers.replica.services.dbinteract.Asset[] aAsset) {
            this.AssetsParentAssignAsync(aAsset, null);
        }
        
        public void AssetsParentAssignAsync(helpers.replica.services.dbinteract.Asset[] aAsset, object userState) {
            if ((this.onBeginAssetsParentAssignDelegate == null)) {
                this.onBeginAssetsParentAssignDelegate = new BeginOperationDelegate(this.OnBeginAssetsParentAssign);
            }
            if ((this.onEndAssetsParentAssignDelegate == null)) {
                this.onEndAssetsParentAssignDelegate = new EndOperationDelegate(this.OnEndAssetsParentAssign);
            }
            if ((this.onAssetsParentAssignCompletedDelegate == null)) {
                this.onAssetsParentAssignCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAssetsParentAssignCompleted);
            }
            base.InvokeAsync(this.onBeginAssetsParentAssignDelegate, new object[] {
                        aAsset}, this.onEndAssetsParentAssignDelegate, this.onAssetsParentAssignCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvertisementSave(helpers.replica.services.dbinteract.Advertisement cAdvertisement, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvertisementSave(cAdvertisement, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long helpers.replica.services.dbinteract.DBInteractSoap.EndAdvertisementSave(System.IAsyncResult result) {
            return base.Channel.EndAdvertisementSave(result);
        }
        
        private System.IAsyncResult OnBeginAdvertisementSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Advertisement cAdvertisement = ((helpers.replica.services.dbinteract.Advertisement)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvertisementSave(cAdvertisement, callback, asyncState);
        }
        
        private object[] OnEndAdvertisementSave(System.IAsyncResult result) {
            long retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvertisementSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvertisementSaveCompleted(object state) {
            if ((this.AdvertisementSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvertisementSaveCompleted(this, new AdvertisementSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvertisementSaveAsync(helpers.replica.services.dbinteract.Advertisement cAdvertisement) {
            this.AdvertisementSaveAsync(cAdvertisement, null);
        }
        
        public void AdvertisementSaveAsync(helpers.replica.services.dbinteract.Advertisement cAdvertisement, object userState) {
            if ((this.onBeginAdvertisementSaveDelegate == null)) {
                this.onBeginAdvertisementSaveDelegate = new BeginOperationDelegate(this.OnBeginAdvertisementSave);
            }
            if ((this.onEndAdvertisementSaveDelegate == null)) {
                this.onEndAdvertisementSaveDelegate = new EndOperationDelegate(this.OnEndAdvertisementSave);
            }
            if ((this.onAdvertisementSaveCompletedDelegate == null)) {
                this.onAdvertisementSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvertisementSaveCompleted);
            }
            base.InvokeAsync(this.onBeginAdvertisementSaveDelegate, new object[] {
                        cAdvertisement}, this.onEndAdvertisementSaveDelegate, this.onAdvertisementSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginDesignSave(helpers.replica.services.dbinteract.Design cDesign, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDesignSave(cDesign, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long helpers.replica.services.dbinteract.DBInteractSoap.EndDesignSave(System.IAsyncResult result) {
            return base.Channel.EndDesignSave(result);
        }
        
        private System.IAsyncResult OnBeginDesignSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Design cDesign = ((helpers.replica.services.dbinteract.Design)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginDesignSave(cDesign, callback, asyncState);
        }
        
        private object[] OnEndDesignSave(System.IAsyncResult result) {
            long retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndDesignSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDesignSaveCompleted(object state) {
            if ((this.DesignSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DesignSaveCompleted(this, new DesignSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DesignSaveAsync(helpers.replica.services.dbinteract.Design cDesign) {
            this.DesignSaveAsync(cDesign, null);
        }
        
        public void DesignSaveAsync(helpers.replica.services.dbinteract.Design cDesign, object userState) {
            if ((this.onBeginDesignSaveDelegate == null)) {
                this.onBeginDesignSaveDelegate = new BeginOperationDelegate(this.OnBeginDesignSave);
            }
            if ((this.onEndDesignSaveDelegate == null)) {
                this.onEndDesignSaveDelegate = new EndOperationDelegate(this.OnEndDesignSave);
            }
            if ((this.onDesignSaveCompletedDelegate == null)) {
                this.onDesignSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDesignSaveCompleted);
            }
            base.InvokeAsync(this.onBeginDesignSaveDelegate, new object[] {
                        cDesign}, this.onEndDesignSaveDelegate, this.onDesignSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPersonSave(helpers.replica.services.dbinteract.Person cPerson, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersonSave(cPerson, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long helpers.replica.services.dbinteract.DBInteractSoap.EndPersonSave(System.IAsyncResult result) {
            return base.Channel.EndPersonSave(result);
        }
        
        private System.IAsyncResult OnBeginPersonSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Person cPerson = ((helpers.replica.services.dbinteract.Person)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPersonSave(cPerson, callback, asyncState);
        }
        
        private object[] OnEndPersonSave(System.IAsyncResult result) {
            long retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPersonSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersonSaveCompleted(object state) {
            if ((this.PersonSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersonSaveCompleted(this, new PersonSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersonSaveAsync(helpers.replica.services.dbinteract.Person cPerson) {
            this.PersonSaveAsync(cPerson, null);
        }
        
        public void PersonSaveAsync(helpers.replica.services.dbinteract.Person cPerson, object userState) {
            if ((this.onBeginPersonSaveDelegate == null)) {
                this.onBeginPersonSaveDelegate = new BeginOperationDelegate(this.OnBeginPersonSave);
            }
            if ((this.onEndPersonSaveDelegate == null)) {
                this.onEndPersonSaveDelegate = new EndOperationDelegate(this.OnEndPersonSave);
            }
            if ((this.onPersonSaveCompletedDelegate == null)) {
                this.onPersonSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersonSaveCompleted);
            }
            base.InvokeAsync(this.onBeginPersonSaveDelegate, new object[] {
                        cPerson}, this.onEndPersonSaveDelegate, this.onPersonSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPersonTypeGet(string sPersonTypeFilter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersonTypeGet(sPersonTypeFilter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair helpers.replica.services.dbinteract.DBInteractSoap.EndPersonTypeGet(System.IAsyncResult result) {
            return base.Channel.EndPersonTypeGet(result);
        }
        
        private System.IAsyncResult OnBeginPersonTypeGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sPersonTypeFilter = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPersonTypeGet(sPersonTypeFilter, callback, asyncState);
        }
        
        private object[] OnEndPersonTypeGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPersonTypeGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersonTypeGetCompleted(object state) {
            if ((this.PersonTypeGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersonTypeGetCompleted(this, new PersonTypeGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersonTypeGetAsync(string sPersonTypeFilter) {
            this.PersonTypeGetAsync(sPersonTypeFilter, null);
        }
        
        public void PersonTypeGetAsync(string sPersonTypeFilter, object userState) {
            if ((this.onBeginPersonTypeGetDelegate == null)) {
                this.onBeginPersonTypeGetDelegate = new BeginOperationDelegate(this.OnBeginPersonTypeGet);
            }
            if ((this.onEndPersonTypeGetDelegate == null)) {
                this.onEndPersonTypeGetDelegate = new EndOperationDelegate(this.OnEndPersonTypeGet);
            }
            if ((this.onPersonTypeGetCompletedDelegate == null)) {
                this.onPersonTypeGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersonTypeGetCompleted);
            }
            base.InvokeAsync(this.onBeginPersonTypeGetDelegate, new object[] {
                        sPersonTypeFilter}, this.onEndPersonTypeGetDelegate, this.onPersonTypeGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPersonsRemove(helpers.replica.services.dbinteract.Person[] aPersons, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersonsRemove(aPersons, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Person[] helpers.replica.services.dbinteract.DBInteractSoap.EndPersonsRemove(System.IAsyncResult result) {
            return base.Channel.EndPersonsRemove(result);
        }
        
        private System.IAsyncResult OnBeginPersonsRemove(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Person[] aPersons = ((helpers.replica.services.dbinteract.Person[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPersonsRemove(aPersons, callback, asyncState);
        }
        
        private object[] OnEndPersonsRemove(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Person[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPersonsRemove(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersonsRemoveCompleted(object state) {
            if ((this.PersonsRemoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersonsRemoveCompleted(this, new PersonsRemoveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersonsRemoveAsync(helpers.replica.services.dbinteract.Person[] aPersons) {
            this.PersonsRemoveAsync(aPersons, null);
        }
        
        public void PersonsRemoveAsync(helpers.replica.services.dbinteract.Person[] aPersons, object userState) {
            if ((this.onBeginPersonsRemoveDelegate == null)) {
                this.onBeginPersonsRemoveDelegate = new BeginOperationDelegate(this.OnBeginPersonsRemove);
            }
            if ((this.onEndPersonsRemoveDelegate == null)) {
                this.onEndPersonsRemoveDelegate = new EndOperationDelegate(this.OnEndPersonsRemove);
            }
            if ((this.onPersonsRemoveCompletedDelegate == null)) {
                this.onPersonsRemoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersonsRemoveCompleted);
            }
            base.InvokeAsync(this.onBeginPersonsRemoveDelegate, new object[] {
                        aPersons}, this.onEndPersonsRemoveDelegate, this.onPersonsRemoveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPersonsGet(string sPersonTypeFilter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPersonsGet(sPersonTypeFilter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Person[] helpers.replica.services.dbinteract.DBInteractSoap.EndPersonsGet(System.IAsyncResult result) {
            return base.Channel.EndPersonsGet(result);
        }
        
        private System.IAsyncResult OnBeginPersonsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sPersonTypeFilter = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPersonsGet(sPersonTypeFilter, callback, asyncState);
        }
        
        private object[] OnEndPersonsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Person[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPersonsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPersonsGetCompleted(object state) {
            if ((this.PersonsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PersonsGetCompleted(this, new PersonsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PersonsGetAsync(string sPersonTypeFilter) {
            this.PersonsGetAsync(sPersonTypeFilter, null);
        }
        
        public void PersonsGetAsync(string sPersonTypeFilter, object userState) {
            if ((this.onBeginPersonsGetDelegate == null)) {
                this.onBeginPersonsGetDelegate = new BeginOperationDelegate(this.OnBeginPersonsGet);
            }
            if ((this.onEndPersonsGetDelegate == null)) {
                this.onEndPersonsGetDelegate = new EndOperationDelegate(this.OnEndPersonsGet);
            }
            if ((this.onPersonsGetCompletedDelegate == null)) {
                this.onPersonsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPersonsGetCompleted);
            }
            base.InvokeAsync(this.onBeginPersonsGetDelegate, new object[] {
                        sPersonTypeFilter}, this.onEndPersonsGetDelegate, this.onPersonsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginArtistsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginArtistsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Person[] helpers.replica.services.dbinteract.DBInteractSoap.EndArtistsGet(System.IAsyncResult result) {
            return base.Channel.EndArtistsGet(result);
        }
        
        private System.IAsyncResult OnBeginArtistsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginArtistsGet(callback, asyncState);
        }
        
        private object[] OnEndArtistsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Person[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndArtistsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnArtistsGetCompleted(object state) {
            if ((this.ArtistsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ArtistsGetCompleted(this, new ArtistsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ArtistsGetAsync() {
            this.ArtistsGetAsync(null);
        }
        
        public void ArtistsGetAsync(object userState) {
            if ((this.onBeginArtistsGetDelegate == null)) {
                this.onBeginArtistsGetDelegate = new BeginOperationDelegate(this.OnBeginArtistsGet);
            }
            if ((this.onEndArtistsGetDelegate == null)) {
                this.onEndArtistsGetDelegate = new EndOperationDelegate(this.OnEndArtistsGet);
            }
            if ((this.onArtistsGetCompletedDelegate == null)) {
                this.onArtistsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnArtistsGetCompleted);
            }
            base.InvokeAsync(this.onBeginArtistsGetDelegate, null, this.onEndArtistsGetDelegate, this.onArtistsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginArtistsLoad(long nAssetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginArtistsLoad(nAssetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Person[] helpers.replica.services.dbinteract.DBInteractSoap.EndArtistsLoad(System.IAsyncResult result) {
            return base.Channel.EndArtistsLoad(result);
        }
        
        private System.IAsyncResult OnBeginArtistsLoad(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginArtistsLoad(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndArtistsLoad(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Person[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndArtistsLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnArtistsLoadCompleted(object state) {
            if ((this.ArtistsLoadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ArtistsLoadCompleted(this, new ArtistsLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ArtistsLoadAsync(long nAssetID) {
            this.ArtistsLoadAsync(nAssetID, null);
        }
        
        public void ArtistsLoadAsync(long nAssetID, object userState) {
            if ((this.onBeginArtistsLoadDelegate == null)) {
                this.onBeginArtistsLoadDelegate = new BeginOperationDelegate(this.OnBeginArtistsLoad);
            }
            if ((this.onEndArtistsLoadDelegate == null)) {
                this.onEndArtistsLoadDelegate = new EndOperationDelegate(this.OnEndArtistsLoad);
            }
            if ((this.onArtistsLoadCompletedDelegate == null)) {
                this.onArtistsLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnArtistsLoadCompleted);
            }
            base.InvokeAsync(this.onBeginArtistsLoadDelegate, new object[] {
                        nAssetID}, this.onEndArtistsLoadDelegate, this.onArtistsLoadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginStylesGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStylesGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndStylesGet(System.IAsyncResult result) {
            return base.Channel.EndStylesGet(result);
        }
        
        private System.IAsyncResult OnBeginStylesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginStylesGet(callback, asyncState);
        }
        
        private object[] OnEndStylesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndStylesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStylesGetCompleted(object state) {
            if ((this.StylesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StylesGetCompleted(this, new StylesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StylesGetAsync() {
            this.StylesGetAsync(null);
        }
        
        public void StylesGetAsync(object userState) {
            if ((this.onBeginStylesGetDelegate == null)) {
                this.onBeginStylesGetDelegate = new BeginOperationDelegate(this.OnBeginStylesGet);
            }
            if ((this.onEndStylesGetDelegate == null)) {
                this.onEndStylesGetDelegate = new EndOperationDelegate(this.OnEndStylesGet);
            }
            if ((this.onStylesGetCompletedDelegate == null)) {
                this.onStylesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStylesGetCompleted);
            }
            base.InvokeAsync(this.onBeginStylesGetDelegate, null, this.onEndStylesGetDelegate, this.onStylesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginStylesLoad(long nAssetID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStylesLoad(nAssetID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndStylesLoad(System.IAsyncResult result) {
            return base.Channel.EndStylesLoad(result);
        }
        
        private System.IAsyncResult OnBeginStylesLoad(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginStylesLoad(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndStylesLoad(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndStylesLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStylesLoadCompleted(object state) {
            if ((this.StylesLoadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StylesLoadCompleted(this, new StylesLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StylesLoadAsync(long nAssetID) {
            this.StylesLoadAsync(nAssetID, null);
        }
        
        public void StylesLoadAsync(long nAssetID, object userState) {
            if ((this.onBeginStylesLoadDelegate == null)) {
                this.onBeginStylesLoadDelegate = new BeginOperationDelegate(this.OnBeginStylesLoad);
            }
            if ((this.onEndStylesLoadDelegate == null)) {
                this.onEndStylesLoadDelegate = new EndOperationDelegate(this.OnEndStylesLoad);
            }
            if ((this.onStylesLoadCompletedDelegate == null)) {
                this.onStylesLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStylesLoadCompleted);
            }
            base.InvokeAsync(this.onBeginStylesLoadDelegate, new object[] {
                        nAssetID}, this.onEndStylesLoadDelegate, this.onStylesLoadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginRotationsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRotationsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndRotationsGet(System.IAsyncResult result) {
            return base.Channel.EndRotationsGet(result);
        }
        
        private System.IAsyncResult OnBeginRotationsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginRotationsGet(callback, asyncState);
        }
        
        private object[] OnEndRotationsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndRotationsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRotationsGetCompleted(object state) {
            if ((this.RotationsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RotationsGetCompleted(this, new RotationsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RotationsGetAsync() {
            this.RotationsGetAsync(null);
        }
        
        public void RotationsGetAsync(object userState) {
            if ((this.onBeginRotationsGetDelegate == null)) {
                this.onBeginRotationsGetDelegate = new BeginOperationDelegate(this.OnBeginRotationsGet);
            }
            if ((this.onEndRotationsGetDelegate == null)) {
                this.onEndRotationsGetDelegate = new EndOperationDelegate(this.OnEndRotationsGet);
            }
            if ((this.onRotationsGetCompletedDelegate == null)) {
                this.onRotationsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRotationsGetCompleted);
            }
            base.InvokeAsync(this.onBeginRotationsGetDelegate, null, this.onEndRotationsGetDelegate, this.onRotationsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPalettesGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPalettesGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndPalettesGet(System.IAsyncResult result) {
            return base.Channel.EndPalettesGet(result);
        }
        
        private System.IAsyncResult OnBeginPalettesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPalettesGet(callback, asyncState);
        }
        
        private object[] OnEndPalettesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPalettesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPalettesGetCompleted(object state) {
            if ((this.PalettesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PalettesGetCompleted(this, new PalettesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PalettesGetAsync() {
            this.PalettesGetAsync(null);
        }
        
        public void PalettesGetAsync(object userState) {
            if ((this.onBeginPalettesGetDelegate == null)) {
                this.onBeginPalettesGetDelegate = new BeginOperationDelegate(this.OnBeginPalettesGet);
            }
            if ((this.onEndPalettesGetDelegate == null)) {
                this.onEndPalettesGetDelegate = new EndOperationDelegate(this.OnEndPalettesGet);
            }
            if ((this.onPalettesGetCompletedDelegate == null)) {
                this.onPalettesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPalettesGetCompleted);
            }
            base.InvokeAsync(this.onBeginPalettesGetDelegate, null, this.onEndPalettesGetDelegate, this.onPalettesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginSexGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSexGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndSexGet(System.IAsyncResult result) {
            return base.Channel.EndSexGet(result);
        }
        
        private System.IAsyncResult OnBeginSexGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginSexGet(callback, asyncState);
        }
        
        private object[] OnEndSexGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndSexGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSexGetCompleted(object state) {
            if ((this.SexGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SexGetCompleted(this, new SexGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SexGetAsync() {
            this.SexGetAsync(null);
        }
        
        public void SexGetAsync(object userState) {
            if ((this.onBeginSexGetDelegate == null)) {
                this.onBeginSexGetDelegate = new BeginOperationDelegate(this.OnBeginSexGet);
            }
            if ((this.onEndSexGetDelegate == null)) {
                this.onEndSexGetDelegate = new EndOperationDelegate(this.OnEndSexGet);
            }
            if ((this.onSexGetCompletedDelegate == null)) {
                this.onSexGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSexGetCompleted);
            }
            base.InvokeAsync(this.onBeginSexGetDelegate, null, this.onEndSexGetDelegate, this.onSexGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginSoundsGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSoundsGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndSoundsGet(System.IAsyncResult result) {
            return base.Channel.EndSoundsGet(result);
        }
        
        private System.IAsyncResult OnBeginSoundsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginSoundsGet(callback, asyncState);
        }
        
        private object[] OnEndSoundsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndSoundsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSoundsGetCompleted(object state) {
            if ((this.SoundsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SoundsGetCompleted(this, new SoundsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SoundsGetAsync() {
            this.SoundsGetAsync(null);
        }
        
        public void SoundsGetAsync(object userState) {
            if ((this.onBeginSoundsGetDelegate == null)) {
                this.onBeginSoundsGetDelegate = new BeginOperationDelegate(this.OnBeginSoundsGet);
            }
            if ((this.onEndSoundsGetDelegate == null)) {
                this.onEndSoundsGetDelegate = new EndOperationDelegate(this.OnEndSoundsGet);
            }
            if ((this.onSoundsGetCompletedDelegate == null)) {
                this.onSoundsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSoundsGetCompleted);
            }
            base.InvokeAsync(this.onBeginSoundsGetDelegate, null, this.onEndSoundsGetDelegate, this.onSoundsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginCustomsLoad(helpers.replica.services.dbinteract.CustomsLoadRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomsLoad(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginCustomsLoad(long nAssetID, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.CustomsLoadRequest inValue = new helpers.replica.services.dbinteract.CustomsLoadRequest();
            inValue.nAssetID = nAssetID;
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginCustomsLoad(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.CustomsLoadResponse helpers.replica.services.dbinteract.DBInteractSoap.EndCustomsLoad(System.IAsyncResult result) {
            return base.Channel.EndCustomsLoad(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private helpers.replica.services.dbinteract.CustomValue[] EndCustomsLoad(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.CustomsLoadResponse retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndCustomsLoad(result);
            return retVal.CustomsLoadResult;
        }
        
        private System.IAsyncResult OnBeginCustomsLoad(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nAssetID = ((long)(inValues[0]));
            return this.BeginCustomsLoad(nAssetID, callback, asyncState);
        }
        
        private object[] OnEndCustomsLoad(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.CustomValue[] retVal = this.EndCustomsLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomsLoadCompleted(object state) {
            if ((this.CustomsLoadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomsLoadCompleted(this, new CustomsLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomsLoadAsync(long nAssetID) {
            this.CustomsLoadAsync(nAssetID, null);
        }
        
        public void CustomsLoadAsync(long nAssetID, object userState) {
            if ((this.onBeginCustomsLoadDelegate == null)) {
                this.onBeginCustomsLoadDelegate = new BeginOperationDelegate(this.OnBeginCustomsLoad);
            }
            if ((this.onEndCustomsLoadDelegate == null)) {
                this.onEndCustomsLoadDelegate = new EndOperationDelegate(this.OnEndCustomsLoad);
            }
            if ((this.onCustomsLoadCompletedDelegate == null)) {
                this.onCustomsLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomsLoadCompleted);
            }
            base.InvokeAsync(this.onBeginCustomsLoadDelegate, new object[] {
                        nAssetID}, this.onEndCustomsLoadDelegate, this.onCustomsLoadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginArtistsCueNameGet(helpers.replica.services.dbinteract.MyInt[] aPersonIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginArtistsCueNameGet(aPersonIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] helpers.replica.services.dbinteract.DBInteractSoap.EndArtistsCueNameGet(System.IAsyncResult result) {
            return base.Channel.EndArtistsCueNameGet(result);
        }
        
        private System.IAsyncResult OnBeginArtistsCueNameGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.MyInt[] aPersonIDs = ((helpers.replica.services.dbinteract.MyInt[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginArtistsCueNameGet(aPersonIDs, callback, asyncState);
        }
        
        private object[] OnEndArtistsCueNameGet(System.IAsyncResult result) {
            string[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndArtistsCueNameGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnArtistsCueNameGetCompleted(object state) {
            if ((this.ArtistsCueNameGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ArtistsCueNameGetCompleted(this, new ArtistsCueNameGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ArtistsCueNameGetAsync(helpers.replica.services.dbinteract.MyInt[] aPersonIDs) {
            this.ArtistsCueNameGetAsync(aPersonIDs, null);
        }
        
        public void ArtistsCueNameGetAsync(helpers.replica.services.dbinteract.MyInt[] aPersonIDs, object userState) {
            if ((this.onBeginArtistsCueNameGetDelegate == null)) {
                this.onBeginArtistsCueNameGetDelegate = new BeginOperationDelegate(this.OnBeginArtistsCueNameGet);
            }
            if ((this.onEndArtistsCueNameGetDelegate == null)) {
                this.onEndArtistsCueNameGetDelegate = new EndOperationDelegate(this.OnEndArtistsCueNameGet);
            }
            if ((this.onArtistsCueNameGetCompletedDelegate == null)) {
                this.onArtistsCueNameGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnArtistsCueNameGetCompleted);
            }
            base.InvokeAsync(this.onBeginArtistsCueNameGetDelegate, new object[] {
                        aPersonIDs}, this.onEndArtistsCueNameGetDelegate, this.onArtistsCueNameGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFilesAgeGet(helpers.replica.services.dbinteract.FilesAgeGetRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFilesAgeGet(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginFilesAgeGet(helpers.replica.services.dbinteract.Asset cAsset, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.FilesAgeGetRequest inValue = new helpers.replica.services.dbinteract.FilesAgeGetRequest();
            inValue.cAsset = cAsset;
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFilesAgeGet(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.FilesAgeGetResponse helpers.replica.services.dbinteract.DBInteractSoap.EndFilesAgeGet(System.IAsyncResult result) {
            return base.Channel.EndFilesAgeGet(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.Nullable<int> EndFilesAgeGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.FilesAgeGetResponse retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFilesAgeGet(result);
            return retVal.FilesAgeGetResult;
        }
        
        private System.IAsyncResult OnBeginFilesAgeGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset cAsset = ((helpers.replica.services.dbinteract.Asset)(inValues[0]));
            return this.BeginFilesAgeGet(cAsset, callback, asyncState);
        }
        
        private object[] OnEndFilesAgeGet(System.IAsyncResult result) {
            System.Nullable<int> retVal = this.EndFilesAgeGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFilesAgeGetCompleted(object state) {
            if ((this.FilesAgeGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FilesAgeGetCompleted(this, new FilesAgeGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FilesAgeGetAsync(helpers.replica.services.dbinteract.Asset cAsset) {
            this.FilesAgeGetAsync(cAsset, null);
        }
        
        public void FilesAgeGetAsync(helpers.replica.services.dbinteract.Asset cAsset, object userState) {
            if ((this.onBeginFilesAgeGetDelegate == null)) {
                this.onBeginFilesAgeGetDelegate = new BeginOperationDelegate(this.OnBeginFilesAgeGet);
            }
            if ((this.onEndFilesAgeGetDelegate == null)) {
                this.onEndFilesAgeGetDelegate = new EndOperationDelegate(this.OnEndFilesAgeGet);
            }
            if ((this.onFilesAgeGetCompletedDelegate == null)) {
                this.onFilesAgeGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFilesAgeGetCompleted);
            }
            base.InvokeAsync(this.onBeginFilesAgeGetDelegate, new object[] {
                        cAsset}, this.onEndFilesAgeGetDelegate, this.onFilesAgeGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFilesAgeSet(helpers.replica.services.dbinteract.Asset cAsset, int nAge, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFilesAgeSet(cAsset, nAge, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndFilesAgeSet(System.IAsyncResult result) {
            base.Channel.EndFilesAgeSet(result);
        }
        
        private System.IAsyncResult OnBeginFilesAgeSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset cAsset = ((helpers.replica.services.dbinteract.Asset)(inValues[0]));
            int nAge = ((int)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFilesAgeSet(cAsset, nAge, callback, asyncState);
        }
        
        private object[] OnEndFilesAgeSet(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFilesAgeSet(result);
            return null;
        }
        
        private void OnFilesAgeSetCompleted(object state) {
            if ((this.FilesAgeSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FilesAgeSetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FilesAgeSetAsync(helpers.replica.services.dbinteract.Asset cAsset, int nAge) {
            this.FilesAgeSetAsync(cAsset, nAge, null);
        }
        
        public void FilesAgeSetAsync(helpers.replica.services.dbinteract.Asset cAsset, int nAge, object userState) {
            if ((this.onBeginFilesAgeSetDelegate == null)) {
                this.onBeginFilesAgeSetDelegate = new BeginOperationDelegate(this.OnBeginFilesAgeSet);
            }
            if ((this.onEndFilesAgeSetDelegate == null)) {
                this.onEndFilesAgeSetDelegate = new EndOperationDelegate(this.OnEndFilesAgeSet);
            }
            if ((this.onFilesAgeSetCompletedDelegate == null)) {
                this.onFilesAgeSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFilesAgeSetCompleted);
            }
            base.InvokeAsync(this.onBeginFilesAgeSetDelegate, new object[] {
                        cAsset,
                        nAge}, this.onEndFilesAgeSetDelegate, this.onFilesAgeSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginStoragesGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStoragesGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Storage[] helpers.replica.services.dbinteract.DBInteractSoap.EndStoragesGet(System.IAsyncResult result) {
            return base.Channel.EndStoragesGet(result);
        }
        
        private System.IAsyncResult OnBeginStoragesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginStoragesGet(callback, asyncState);
        }
        
        private object[] OnEndStoragesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Storage[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndStoragesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStoragesGetCompleted(object state) {
            if ((this.StoragesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StoragesGetCompleted(this, new StoragesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StoragesGetAsync() {
            this.StoragesGetAsync(null);
        }
        
        public void StoragesGetAsync(object userState) {
            if ((this.onBeginStoragesGetDelegate == null)) {
                this.onBeginStoragesGetDelegate = new BeginOperationDelegate(this.OnBeginStoragesGet);
            }
            if ((this.onEndStoragesGetDelegate == null)) {
                this.onEndStoragesGetDelegate = new EndOperationDelegate(this.OnEndStoragesGet);
            }
            if ((this.onStoragesGetCompletedDelegate == null)) {
                this.onStoragesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStoragesGetCompleted);
            }
            base.InvokeAsync(this.onBeginStoragesGetDelegate, null, this.onEndStoragesGetDelegate, this.onStoragesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFilesGet(long nStorageID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFilesGet(nStorageID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.File[] helpers.replica.services.dbinteract.DBInteractSoap.EndFilesGet(System.IAsyncResult result) {
            return base.Channel.EndFilesGet(result);
        }
        
        private System.IAsyncResult OnBeginFilesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nStorageID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFilesGet(nStorageID, callback, asyncState);
        }
        
        private object[] OnEndFilesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.File[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFilesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFilesGetCompleted(object state) {
            if ((this.FilesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FilesGetCompleted(this, new FilesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FilesGetAsync(long nStorageID) {
            this.FilesGetAsync(nStorageID, null);
        }
        
        public void FilesGetAsync(long nStorageID, object userState) {
            if ((this.onBeginFilesGetDelegate == null)) {
                this.onBeginFilesGetDelegate = new BeginOperationDelegate(this.OnBeginFilesGet);
            }
            if ((this.onEndFilesGetDelegate == null)) {
                this.onEndFilesGetDelegate = new EndOperationDelegate(this.OnEndFilesGet);
            }
            if ((this.onFilesGetCompletedDelegate == null)) {
                this.onFilesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFilesGetCompleted);
            }
            base.InvokeAsync(this.onBeginFilesGetDelegate, new object[] {
                        nStorageID}, this.onEndFilesGetDelegate, this.onFilesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFilesWithSourcesGet(long nStorageID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFilesWithSourcesGet(nStorageID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.File[] helpers.replica.services.dbinteract.DBInteractSoap.EndFilesWithSourcesGet(System.IAsyncResult result) {
            return base.Channel.EndFilesWithSourcesGet(result);
        }
        
        private System.IAsyncResult OnBeginFilesWithSourcesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nStorageID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFilesWithSourcesGet(nStorageID, callback, asyncState);
        }
        
        private object[] OnEndFilesWithSourcesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.File[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFilesWithSourcesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFilesWithSourcesGetCompleted(object state) {
            if ((this.FilesWithSourcesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FilesWithSourcesGetCompleted(this, new FilesWithSourcesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FilesWithSourcesGetAsync(long nStorageID) {
            this.FilesWithSourcesGetAsync(nStorageID, null);
        }
        
        public void FilesWithSourcesGetAsync(long nStorageID, object userState) {
            if ((this.onBeginFilesWithSourcesGetDelegate == null)) {
                this.onBeginFilesWithSourcesGetDelegate = new BeginOperationDelegate(this.OnBeginFilesWithSourcesGet);
            }
            if ((this.onEndFilesWithSourcesGetDelegate == null)) {
                this.onEndFilesWithSourcesGetDelegate = new EndOperationDelegate(this.OnEndFilesWithSourcesGet);
            }
            if ((this.onFilesWithSourcesGetCompletedDelegate == null)) {
                this.onFilesWithSourcesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFilesWithSourcesGetCompleted);
            }
            base.InvokeAsync(this.onBeginFilesWithSourcesGetDelegate, new object[] {
                        nStorageID}, this.onEndFilesWithSourcesGetDelegate, this.onFilesWithSourcesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFilesRemove(long[] aFileIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFilesRemove(aFileIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndFilesRemove(System.IAsyncResult result) {
            base.Channel.EndFilesRemove(result);
        }
        
        private System.IAsyncResult OnBeginFilesRemove(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] aFileIDs = ((long[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFilesRemove(aFileIDs, callback, asyncState);
        }
        
        private object[] OnEndFilesRemove(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFilesRemove(result);
            return null;
        }
        
        private void OnFilesRemoveCompleted(object state) {
            if ((this.FilesRemoveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FilesRemoveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FilesRemoveAsync(long[] aFileIDs) {
            this.FilesRemoveAsync(aFileIDs, null);
        }
        
        public void FilesRemoveAsync(long[] aFileIDs, object userState) {
            if ((this.onBeginFilesRemoveDelegate == null)) {
                this.onBeginFilesRemoveDelegate = new BeginOperationDelegate(this.OnBeginFilesRemove);
            }
            if ((this.onEndFilesRemoveDelegate == null)) {
                this.onEndFilesRemoveDelegate = new EndOperationDelegate(this.OnEndFilesRemove);
            }
            if ((this.onFilesRemoveCompletedDelegate == null)) {
                this.onFilesRemoveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFilesRemoveCompleted);
            }
            base.InvokeAsync(this.onBeginFilesRemoveDelegate, new object[] {
                        aFileIDs}, this.onEndFilesRemoveDelegate, this.onFilesRemoveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFileAdditionalInfoGet(helpers.replica.services.dbinteract.File cFile, helpers.replica.services.dbinteract.RegisteredTable cRTStrings, helpers.replica.services.dbinteract.RegisteredTable cRTAssets, helpers.replica.services.dbinteract.RegisteredTable cRTDates, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFileAdditionalInfoGet(cFile, cRTStrings, cRTAssets, cRTDates, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.File helpers.replica.services.dbinteract.DBInteractSoap.EndFileAdditionalInfoGet(System.IAsyncResult result) {
            return base.Channel.EndFileAdditionalInfoGet(result);
        }
        
        private System.IAsyncResult OnBeginFileAdditionalInfoGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.File cFile = ((helpers.replica.services.dbinteract.File)(inValues[0]));
            helpers.replica.services.dbinteract.RegisteredTable cRTStrings = ((helpers.replica.services.dbinteract.RegisteredTable)(inValues[1]));
            helpers.replica.services.dbinteract.RegisteredTable cRTAssets = ((helpers.replica.services.dbinteract.RegisteredTable)(inValues[2]));
            helpers.replica.services.dbinteract.RegisteredTable cRTDates = ((helpers.replica.services.dbinteract.RegisteredTable)(inValues[3]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFileAdditionalInfoGet(cFile, cRTStrings, cRTAssets, cRTDates, callback, asyncState);
        }
        
        private object[] OnEndFileAdditionalInfoGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.File retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFileAdditionalInfoGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFileAdditionalInfoGetCompleted(object state) {
            if ((this.FileAdditionalInfoGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileAdditionalInfoGetCompleted(this, new FileAdditionalInfoGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FileAdditionalInfoGetAsync(helpers.replica.services.dbinteract.File cFile, helpers.replica.services.dbinteract.RegisteredTable cRTStrings, helpers.replica.services.dbinteract.RegisteredTable cRTAssets, helpers.replica.services.dbinteract.RegisteredTable cRTDates) {
            this.FileAdditionalInfoGetAsync(cFile, cRTStrings, cRTAssets, cRTDates, null);
        }
        
        public void FileAdditionalInfoGetAsync(helpers.replica.services.dbinteract.File cFile, helpers.replica.services.dbinteract.RegisteredTable cRTStrings, helpers.replica.services.dbinteract.RegisteredTable cRTAssets, helpers.replica.services.dbinteract.RegisteredTable cRTDates, object userState) {
            if ((this.onBeginFileAdditionalInfoGetDelegate == null)) {
                this.onBeginFileAdditionalInfoGetDelegate = new BeginOperationDelegate(this.OnBeginFileAdditionalInfoGet);
            }
            if ((this.onEndFileAdditionalInfoGetDelegate == null)) {
                this.onEndFileAdditionalInfoGetDelegate = new EndOperationDelegate(this.OnEndFileAdditionalInfoGet);
            }
            if ((this.onFileAdditionalInfoGetCompletedDelegate == null)) {
                this.onFileAdditionalInfoGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileAdditionalInfoGetCompleted);
            }
            base.InvokeAsync(this.onBeginFileAdditionalInfoGetDelegate, new object[] {
                        cFile,
                        cRTStrings,
                        cRTAssets,
                        cRTDates}, this.onEndFileAdditionalInfoGetDelegate, this.onFileAdditionalInfoGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFileCheckIsInPlaylist(long nFileID, int nMinutes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFileCheckIsInPlaylist(nFileID, nMinutes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.FileIsInPlaylist helpers.replica.services.dbinteract.DBInteractSoap.EndFileCheckIsInPlaylist(System.IAsyncResult result) {
            return base.Channel.EndFileCheckIsInPlaylist(result);
        }
        
        private System.IAsyncResult OnBeginFileCheckIsInPlaylist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nFileID = ((long)(inValues[0]));
            int nMinutes = ((int)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFileCheckIsInPlaylist(nFileID, nMinutes, callback, asyncState);
        }
        
        private object[] OnEndFileCheckIsInPlaylist(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.FileIsInPlaylist retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFileCheckIsInPlaylist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFileCheckIsInPlaylistCompleted(object state) {
            if ((this.FileCheckIsInPlaylistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileCheckIsInPlaylistCompleted(this, new FileCheckIsInPlaylistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FileCheckIsInPlaylistAsync(long nFileID, int nMinutes) {
            this.FileCheckIsInPlaylistAsync(nFileID, nMinutes, null);
        }
        
        public void FileCheckIsInPlaylistAsync(long nFileID, int nMinutes, object userState) {
            if ((this.onBeginFileCheckIsInPlaylistDelegate == null)) {
                this.onBeginFileCheckIsInPlaylistDelegate = new BeginOperationDelegate(this.OnBeginFileCheckIsInPlaylist);
            }
            if ((this.onEndFileCheckIsInPlaylistDelegate == null)) {
                this.onEndFileCheckIsInPlaylistDelegate = new EndOperationDelegate(this.OnEndFileCheckIsInPlaylist);
            }
            if ((this.onFileCheckIsInPlaylistCompletedDelegate == null)) {
                this.onFileCheckIsInPlaylistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileCheckIsInPlaylistCompleted);
            }
            base.InvokeAsync(this.onBeginFileCheckIsInPlaylistDelegate, new object[] {
                        nFileID,
                        nMinutes}, this.onEndFileCheckIsInPlaylistDelegate, this.onFileCheckIsInPlaylistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFileDurationQuery(long nFileID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFileDurationQuery(nFileID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long helpers.replica.services.dbinteract.DBInteractSoap.EndFileDurationQuery(System.IAsyncResult result) {
            return base.Channel.EndFileDurationQuery(result);
        }
        
        private System.IAsyncResult OnBeginFileDurationQuery(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nFileID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFileDurationQuery(nFileID, callback, asyncState);
        }
        
        private object[] OnEndFileDurationQuery(System.IAsyncResult result) {
            long retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFileDurationQuery(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFileDurationQueryCompleted(object state) {
            if ((this.FileDurationQueryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileDurationQueryCompleted(this, new FileDurationQueryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FileDurationQueryAsync(long nFileID) {
            this.FileDurationQueryAsync(nFileID, null);
        }
        
        public void FileDurationQueryAsync(long nFileID, object userState) {
            if ((this.onBeginFileDurationQueryDelegate == null)) {
                this.onBeginFileDurationQueryDelegate = new BeginOperationDelegate(this.OnBeginFileDurationQuery);
            }
            if ((this.onEndFileDurationQueryDelegate == null)) {
                this.onEndFileDurationQueryDelegate = new EndOperationDelegate(this.OnEndFileDurationQuery);
            }
            if ((this.onFileDurationQueryCompletedDelegate == null)) {
                this.onFileDurationQueryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileDurationQueryCompleted);
            }
            base.InvokeAsync(this.onBeginFileDurationQueryDelegate, new object[] {
                        nFileID}, this.onEndFileDurationQueryDelegate, this.onFileDurationQueryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginCommandStatusGet(long nCommandsQueueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCommandStatusGet(nCommandsQueueID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair helpers.replica.services.dbinteract.DBInteractSoap.EndCommandStatusGet(System.IAsyncResult result) {
            return base.Channel.EndCommandStatusGet(result);
        }
        
        private System.IAsyncResult OnBeginCommandStatusGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nCommandsQueueID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginCommandStatusGet(nCommandsQueueID, callback, asyncState);
        }
        
        private object[] OnEndCommandStatusGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndCommandStatusGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCommandStatusGetCompleted(object state) {
            if ((this.CommandStatusGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CommandStatusGetCompleted(this, new CommandStatusGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CommandStatusGetAsync(long nCommandsQueueID) {
            this.CommandStatusGetAsync(nCommandsQueueID, null);
        }
        
        public void CommandStatusGetAsync(long nCommandsQueueID, object userState) {
            if ((this.onBeginCommandStatusGetDelegate == null)) {
                this.onBeginCommandStatusGetDelegate = new BeginOperationDelegate(this.OnBeginCommandStatusGet);
            }
            if ((this.onEndCommandStatusGetDelegate == null)) {
                this.onEndCommandStatusGetDelegate = new EndOperationDelegate(this.OnEndCommandStatusGet);
            }
            if ((this.onCommandStatusGetCompletedDelegate == null)) {
                this.onCommandStatusGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCommandStatusGetCompleted);
            }
            base.InvokeAsync(this.onBeginCommandStatusGetDelegate, new object[] {
                        nCommandsQueueID}, this.onEndCommandStatusGetDelegate, this.onCommandStatusGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFramesQtyGet(long nCommandsQueueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFramesQtyGet(nCommandsQueueID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long helpers.replica.services.dbinteract.DBInteractSoap.EndFramesQtyGet(System.IAsyncResult result) {
            return base.Channel.EndFramesQtyGet(result);
        }
        
        private System.IAsyncResult OnBeginFramesQtyGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nCommandsQueueID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFramesQtyGet(nCommandsQueueID, callback, asyncState);
        }
        
        private object[] OnEndFramesQtyGet(System.IAsyncResult result) {
            long retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFramesQtyGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFramesQtyGetCompleted(object state) {
            if ((this.FramesQtyGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FramesQtyGetCompleted(this, new FramesQtyGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FramesQtyGetAsync(long nCommandsQueueID) {
            this.FramesQtyGetAsync(nCommandsQueueID, null);
        }
        
        public void FramesQtyGetAsync(long nCommandsQueueID, object userState) {
            if ((this.onBeginFramesQtyGetDelegate == null)) {
                this.onBeginFramesQtyGetDelegate = new BeginOperationDelegate(this.OnBeginFramesQtyGet);
            }
            if ((this.onEndFramesQtyGetDelegate == null)) {
                this.onEndFramesQtyGetDelegate = new EndOperationDelegate(this.OnEndFramesQtyGet);
            }
            if ((this.onFramesQtyGetCompletedDelegate == null)) {
                this.onFramesQtyGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFramesQtyGetCompleted);
            }
            base.InvokeAsync(this.onBeginFramesQtyGetDelegate, new object[] {
                        nCommandsQueueID}, this.onEndFramesQtyGetDelegate, this.onFramesQtyGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginStorageFilesUnusedGet(long nStorageID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStorageFilesUnusedGet(nStorageID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.File[] helpers.replica.services.dbinteract.DBInteractSoap.EndStorageFilesUnusedGet(System.IAsyncResult result) {
            return base.Channel.EndStorageFilesUnusedGet(result);
        }
        
        private System.IAsyncResult OnBeginStorageFilesUnusedGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nStorageID = ((long)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginStorageFilesUnusedGet(nStorageID, callback, asyncState);
        }
        
        private object[] OnEndStorageFilesUnusedGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.File[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndStorageFilesUnusedGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStorageFilesUnusedGetCompleted(object state) {
            if ((this.StorageFilesUnusedGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StorageFilesUnusedGetCompleted(this, new StorageFilesUnusedGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StorageFilesUnusedGetAsync(long nStorageID) {
            this.StorageFilesUnusedGetAsync(nStorageID, null);
        }
        
        public void StorageFilesUnusedGetAsync(long nStorageID, object userState) {
            if ((this.onBeginStorageFilesUnusedGetDelegate == null)) {
                this.onBeginStorageFilesUnusedGetDelegate = new BeginOperationDelegate(this.OnBeginStorageFilesUnusedGet);
            }
            if ((this.onEndStorageFilesUnusedGetDelegate == null)) {
                this.onEndStorageFilesUnusedGetDelegate = new EndOperationDelegate(this.OnEndStorageFilesUnusedGet);
            }
            if ((this.onStorageFilesUnusedGetCompletedDelegate == null)) {
                this.onStorageFilesUnusedGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStorageFilesUnusedGetCompleted);
            }
            base.InvokeAsync(this.onBeginStorageFilesUnusedGetDelegate, new object[] {
                        nStorageID}, this.onEndStorageFilesUnusedGetDelegate, this.onStorageFilesUnusedGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginFileIDsInStockGet(long[] aFileIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFileIDsInStockGet(aFileIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long[] helpers.replica.services.dbinteract.DBInteractSoap.EndFileIDsInStockGet(System.IAsyncResult result) {
            return base.Channel.EndFileIDsInStockGet(result);
        }
        
        private System.IAsyncResult OnBeginFileIDsInStockGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long[] aFileIDs = ((long[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginFileIDsInStockGet(aFileIDs, callback, asyncState);
        }
        
        private object[] OnEndFileIDsInStockGet(System.IAsyncResult result) {
            long[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndFileIDsInStockGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFileIDsInStockGetCompleted(object state) {
            if ((this.FileIDsInStockGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FileIDsInStockGetCompleted(this, new FileIDsInStockGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FileIDsInStockGetAsync(long[] aFileIDs) {
            this.FileIDsInStockGetAsync(aFileIDs, null);
        }
        
        public void FileIDsInStockGetAsync(long[] aFileIDs, object userState) {
            if ((this.onBeginFileIDsInStockGetDelegate == null)) {
                this.onBeginFileIDsInStockGetDelegate = new BeginOperationDelegate(this.OnBeginFileIDsInStockGet);
            }
            if ((this.onEndFileIDsInStockGetDelegate == null)) {
                this.onEndFileIDsInStockGetDelegate = new EndOperationDelegate(this.OnEndFileIDsInStockGet);
            }
            if ((this.onFileIDsInStockGetCompletedDelegate == null)) {
                this.onFileIDsInStockGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFileIDsInStockGetCompleted);
            }
            base.InvokeAsync(this.onBeginFileIDsInStockGetDelegate, new object[] {
                        aFileIDs}, this.onEndFileIDsInStockGetDelegate, this.onFileIDsInStockGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginTSRItemsGet(string[] aFilenames, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTSRItemsGet(aFilenames, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.TSRItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndTSRItemsGet(System.IAsyncResult result) {
            return base.Channel.EndTSRItemsGet(result);
        }
        
        private System.IAsyncResult OnBeginTSRItemsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] aFilenames = ((string[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginTSRItemsGet(aFilenames, callback, asyncState);
        }
        
        private object[] OnEndTSRItemsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.TSRItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndTSRItemsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTSRItemsGetCompleted(object state) {
            if ((this.TSRItemsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TSRItemsGetCompleted(this, new TSRItemsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TSRItemsGetAsync(string[] aFilenames) {
            this.TSRItemsGetAsync(aFilenames, null);
        }
        
        public void TSRItemsGetAsync(string[] aFilenames, object userState) {
            if ((this.onBeginTSRItemsGetDelegate == null)) {
                this.onBeginTSRItemsGetDelegate = new BeginOperationDelegate(this.OnBeginTSRItemsGet);
            }
            if ((this.onEndTSRItemsGetDelegate == null)) {
                this.onEndTSRItemsGetDelegate = new EndOperationDelegate(this.OnEndTSRItemsGet);
            }
            if ((this.onTSRItemsGetCompletedDelegate == null)) {
                this.onTSRItemsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTSRItemsGetCompleted);
            }
            base.InvokeAsync(this.onBeginTSRItemsGetDelegate, new object[] {
                        aFilenames}, this.onEndTSRItemsGetDelegate, this.onTSRItemsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginIngestForReplacedFile(helpers.replica.services.dbinteract.File cFile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIngestForReplacedFile(cFile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndIngestForReplacedFile(System.IAsyncResult result) {
            return base.Channel.EndIngestForReplacedFile(result);
        }
        
        private System.IAsyncResult OnBeginIngestForReplacedFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.File cFile = ((helpers.replica.services.dbinteract.File)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginIngestForReplacedFile(cFile, callback, asyncState);
        }
        
        private object[] OnEndIngestForReplacedFile(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndIngestForReplacedFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIngestForReplacedFileCompleted(object state) {
            if ((this.IngestForReplacedFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IngestForReplacedFileCompleted(this, new IngestForReplacedFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IngestForReplacedFileAsync(helpers.replica.services.dbinteract.File cFile) {
            this.IngestForReplacedFileAsync(cFile, null);
        }
        
        public void IngestForReplacedFileAsync(helpers.replica.services.dbinteract.File cFile, object userState) {
            if ((this.onBeginIngestForReplacedFileDelegate == null)) {
                this.onBeginIngestForReplacedFileDelegate = new BeginOperationDelegate(this.OnBeginIngestForReplacedFile);
            }
            if ((this.onEndIngestForReplacedFileDelegate == null)) {
                this.onEndIngestForReplacedFileDelegate = new EndOperationDelegate(this.OnEndIngestForReplacedFile);
            }
            if ((this.onIngestForReplacedFileCompletedDelegate == null)) {
                this.onIngestForReplacedFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIngestForReplacedFileCompleted);
            }
            base.InvokeAsync(this.onBeginIngestForReplacedFileDelegate, new object[] {
                        cFile}, this.onEndIngestForReplacedFileDelegate, this.onIngestForReplacedFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginIngest(helpers.replica.services.dbinteract.Ingest cInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIngest(cInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.File helpers.replica.services.dbinteract.DBInteractSoap.EndIngest(System.IAsyncResult result) {
            return base.Channel.EndIngest(result);
        }
        
        private System.IAsyncResult OnBeginIngest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Ingest cInfo = ((helpers.replica.services.dbinteract.Ingest)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginIngest(cInfo, callback, asyncState);
        }
        
        private object[] OnEndIngest(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.File retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndIngest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIngestCompleted(object state) {
            if ((this.IngestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IngestCompleted(this, new IngestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IngestAsync(helpers.replica.services.dbinteract.Ingest cInfo) {
            this.IngestAsync(cInfo, null);
        }
        
        public void IngestAsync(helpers.replica.services.dbinteract.Ingest cInfo, object userState) {
            if ((this.onBeginIngestDelegate == null)) {
                this.onBeginIngestDelegate = new BeginOperationDelegate(this.OnBeginIngest);
            }
            if ((this.onEndIngestDelegate == null)) {
                this.onEndIngestDelegate = new EndOperationDelegate(this.OnEndIngest);
            }
            if ((this.onIngestCompletedDelegate == null)) {
                this.onIngestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIngestCompleted);
            }
            base.InvokeAsync(this.onBeginIngestDelegate, new object[] {
                        cInfo}, this.onEndIngestDelegate, this.onIngestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginIsThereSameFile(string sFilename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsThereSameFile(sFilename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndIsThereSameFile(System.IAsyncResult result) {
            return base.Channel.EndIsThereSameFile(result);
        }
        
        private System.IAsyncResult OnBeginIsThereSameFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sFilename = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginIsThereSameFile(sFilename, callback, asyncState);
        }
        
        private object[] OnEndIsThereSameFile(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndIsThereSameFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsThereSameFileCompleted(object state) {
            if ((this.IsThereSameFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsThereSameFileCompleted(this, new IsThereSameFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsThereSameFileAsync(string sFilename) {
            this.IsThereSameFileAsync(sFilename, null);
        }
        
        public void IsThereSameFileAsync(string sFilename, object userState) {
            if ((this.onBeginIsThereSameFileDelegate == null)) {
                this.onBeginIsThereSameFileDelegate = new BeginOperationDelegate(this.OnBeginIsThereSameFile);
            }
            if ((this.onEndIsThereSameFileDelegate == null)) {
                this.onEndIsThereSameFileDelegate = new EndOperationDelegate(this.OnEndIsThereSameFile);
            }
            if ((this.onIsThereSameFileCompletedDelegate == null)) {
                this.onIsThereSameFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsThereSameFileCompleted);
            }
            base.InvokeAsync(this.onBeginIsThereSameFileDelegate, new object[] {
                        sFilename}, this.onEndIsThereSameFileDelegate, this.onIsThereSameFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAreThereSameFiles(string[] sFilenames, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAreThereSameFiles(sFilenames, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string[] helpers.replica.services.dbinteract.DBInteractSoap.EndAreThereSameFiles(System.IAsyncResult result) {
            return base.Channel.EndAreThereSameFiles(result);
        }
        
        private System.IAsyncResult OnBeginAreThereSameFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string[] sFilenames = ((string[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAreThereSameFiles(sFilenames, callback, asyncState);
        }
        
        private object[] OnEndAreThereSameFiles(System.IAsyncResult result) {
            string[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAreThereSameFiles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAreThereSameFilesCompleted(object state) {
            if ((this.AreThereSameFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AreThereSameFilesCompleted(this, new AreThereSameFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AreThereSameFilesAsync(string[] sFilenames) {
            this.AreThereSameFilesAsync(sFilenames, null);
        }
        
        public void AreThereSameFilesAsync(string[] sFilenames, object userState) {
            if ((this.onBeginAreThereSameFilesDelegate == null)) {
                this.onBeginAreThereSameFilesDelegate = new BeginOperationDelegate(this.OnBeginAreThereSameFiles);
            }
            if ((this.onEndAreThereSameFilesDelegate == null)) {
                this.onEndAreThereSameFilesDelegate = new EndOperationDelegate(this.OnEndAreThereSameFiles);
            }
            if ((this.onAreThereSameFilesCompletedDelegate == null)) {
                this.onAreThereSameFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAreThereSameFilesCompleted);
            }
            base.InvokeAsync(this.onBeginAreThereSameFilesDelegate, new object[] {
                        sFilenames}, this.onEndAreThereSameFilesDelegate, this.onAreThereSameFilesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginIsThereSameCustomValue(string sName, string sValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsThereSameCustomValue(sName, sValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Asset helpers.replica.services.dbinteract.DBInteractSoap.EndIsThereSameCustomValue(System.IAsyncResult result) {
            return base.Channel.EndIsThereSameCustomValue(result);
        }
        
        private System.IAsyncResult OnBeginIsThereSameCustomValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sName = ((string)(inValues[0]));
            string sValue = ((string)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginIsThereSameCustomValue(sName, sValue, callback, asyncState);
        }
        
        private object[] OnEndIsThereSameCustomValue(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Asset retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndIsThereSameCustomValue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsThereSameCustomValueCompleted(object state) {
            if ((this.IsThereSameCustomValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsThereSameCustomValueCompleted(this, new IsThereSameCustomValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsThereSameCustomValueAsync(string sName, string sValue) {
            this.IsThereSameCustomValueAsync(sName, sValue, null);
        }
        
        public void IsThereSameCustomValueAsync(string sName, string sValue, object userState) {
            if ((this.onBeginIsThereSameCustomValueDelegate == null)) {
                this.onBeginIsThereSameCustomValueDelegate = new BeginOperationDelegate(this.OnBeginIsThereSameCustomValue);
            }
            if ((this.onEndIsThereSameCustomValueDelegate == null)) {
                this.onEndIsThereSameCustomValueDelegate = new EndOperationDelegate(this.OnEndIsThereSameCustomValue);
            }
            if ((this.onIsThereSameCustomValueCompletedDelegate == null)) {
                this.onIsThereSameCustomValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsThereSameCustomValueCompleted);
            }
            base.InvokeAsync(this.onBeginIsThereSameCustomValueDelegate, new object[] {
                        sName,
                        sValue}, this.onEndIsThereSameCustomValueDelegate, this.onIsThereSameCustomValueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginIsThereSameCustomValues(string sName, string[] sValues, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsThereSameCustomValues(sName, sValues, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Asset[] helpers.replica.services.dbinteract.DBInteractSoap.EndIsThereSameCustomValues(System.IAsyncResult result) {
            return base.Channel.EndIsThereSameCustomValues(result);
        }
        
        private System.IAsyncResult OnBeginIsThereSameCustomValues(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sName = ((string)(inValues[0]));
            string[] sValues = ((string[])(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginIsThereSameCustomValues(sName, sValues, callback, asyncState);
        }
        
        private object[] OnEndIsThereSameCustomValues(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Asset[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndIsThereSameCustomValues(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsThereSameCustomValuesCompleted(object state) {
            if ((this.IsThereSameCustomValuesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsThereSameCustomValuesCompleted(this, new IsThereSameCustomValuesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsThereSameCustomValuesAsync(string sName, string[] sValues) {
            this.IsThereSameCustomValuesAsync(sName, sValues, null);
        }
        
        public void IsThereSameCustomValuesAsync(string sName, string[] sValues, object userState) {
            if ((this.onBeginIsThereSameCustomValuesDelegate == null)) {
                this.onBeginIsThereSameCustomValuesDelegate = new BeginOperationDelegate(this.OnBeginIsThereSameCustomValues);
            }
            if ((this.onEndIsThereSameCustomValuesDelegate == null)) {
                this.onEndIsThereSameCustomValuesDelegate = new EndOperationDelegate(this.OnEndIsThereSameCustomValues);
            }
            if ((this.onIsThereSameCustomValuesCompletedDelegate == null)) {
                this.onIsThereSameCustomValuesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsThereSameCustomValuesCompleted);
            }
            base.InvokeAsync(this.onBeginIsThereSameCustomValuesDelegate, new object[] {
                        sName,
                        sValues}, this.onEndIsThereSameCustomValuesDelegate, this.onIsThereSameCustomValuesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginRegisteredTablesGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRegisteredTablesGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.RegisteredTable[] helpers.replica.services.dbinteract.DBInteractSoap.EndRegisteredTablesGet(System.IAsyncResult result) {
            return base.Channel.EndRegisteredTablesGet(result);
        }
        
        private System.IAsyncResult OnBeginRegisteredTablesGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginRegisteredTablesGet(callback, asyncState);
        }
        
        private object[] OnEndRegisteredTablesGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.RegisteredTable[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndRegisteredTablesGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRegisteredTablesGetCompleted(object state) {
            if ((this.RegisteredTablesGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RegisteredTablesGetCompleted(this, new RegisteredTablesGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RegisteredTablesGetAsync() {
            this.RegisteredTablesGetAsync(null);
        }
        
        public void RegisteredTablesGetAsync(object userState) {
            if ((this.onBeginRegisteredTablesGetDelegate == null)) {
                this.onBeginRegisteredTablesGetDelegate = new BeginOperationDelegate(this.OnBeginRegisteredTablesGet);
            }
            if ((this.onEndRegisteredTablesGetDelegate == null)) {
                this.onEndRegisteredTablesGetDelegate = new EndOperationDelegate(this.OnEndRegisteredTablesGet);
            }
            if ((this.onRegisteredTablesGetCompletedDelegate == null)) {
                this.onRegisteredTablesGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRegisteredTablesGetCompleted);
            }
            base.InvokeAsync(this.onBeginRegisteredTablesGetDelegate, null, this.onEndRegisteredTablesGetDelegate, this.onRegisteredTablesGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemsGet(helpers.replica.services.dbinteract.IdNamePair[] aStatuses, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemsGet(aStatuses, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemsGet(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemsGet(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.IdNamePair[] aStatuses = ((helpers.replica.services.dbinteract.IdNamePair[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemsGet(aStatuses, callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemsGetCompleted(object state) {
            if ((this.PlaylistItemsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemsGetCompleted(this, new PlaylistItemsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemsGetAsync(helpers.replica.services.dbinteract.IdNamePair[] aStatuses) {
            this.PlaylistItemsGetAsync(aStatuses, null);
        }
        
        public void PlaylistItemsGetAsync(helpers.replica.services.dbinteract.IdNamePair[] aStatuses, object userState) {
            if ((this.onBeginPlaylistItemsGetDelegate == null)) {
                this.onBeginPlaylistItemsGetDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemsGet);
            }
            if ((this.onEndPlaylistItemsGetDelegate == null)) {
                this.onEndPlaylistItemsGetDelegate = new EndOperationDelegate(this.OnEndPlaylistItemsGet);
            }
            if ((this.onPlaylistItemsGetCompletedDelegate == null)) {
                this.onPlaylistItemsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemsGetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemsGetDelegate, new object[] {
                        aStatuses}, this.onEndPlaylistItemsGetDelegate, this.onPlaylistItemsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemMinimumForImmediatePLGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemMinimumForImmediatePLGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemMinimumForImmediatePLGet(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemMinimumForImmediatePLGet(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemMinimumForImmediatePLGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemMinimumForImmediatePLGet(callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemMinimumForImmediatePLGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemMinimumForImmediatePLGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemMinimumForImmediatePLGetCompleted(object state) {
            if ((this.PlaylistItemMinimumForImmediatePLGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemMinimumForImmediatePLGetCompleted(this, new PlaylistItemMinimumForImmediatePLGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemMinimumForImmediatePLGetAsync() {
            this.PlaylistItemMinimumForImmediatePLGetAsync(null);
        }
        
        public void PlaylistItemMinimumForImmediatePLGetAsync(object userState) {
            if ((this.onBeginPlaylistItemMinimumForImmediatePLGetDelegate == null)) {
                this.onBeginPlaylistItemMinimumForImmediatePLGetDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemMinimumForImmediatePLGet);
            }
            if ((this.onEndPlaylistItemMinimumForImmediatePLGetDelegate == null)) {
                this.onEndPlaylistItemMinimumForImmediatePLGetDelegate = new EndOperationDelegate(this.OnEndPlaylistItemMinimumForImmediatePLGet);
            }
            if ((this.onPlaylistItemMinimumForImmediatePLGetCompletedDelegate == null)) {
                this.onPlaylistItemMinimumForImmediatePLGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemMinimumForImmediatePLGetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemMinimumForImmediatePLGetDelegate, null, this.onEndPlaylistItemMinimumForImmediatePLGetDelegate, this.onPlaylistItemMinimumForImmediatePLGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemsArchGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemsArchGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemsArchGet(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemsArchGet(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemsArchGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dtBegin = ((System.DateTime)(inValues[0]));
            System.DateTime dtEnd = ((System.DateTime)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemsArchGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemsArchGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemsArchGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemsArchGetCompleted(object state) {
            if ((this.PlaylistItemsArchGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemsArchGetCompleted(this, new PlaylistItemsArchGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemsArchGetAsync(System.DateTime dtBegin, System.DateTime dtEnd) {
            this.PlaylistItemsArchGetAsync(dtBegin, dtEnd, null);
        }
        
        public void PlaylistItemsArchGetAsync(System.DateTime dtBegin, System.DateTime dtEnd, object userState) {
            if ((this.onBeginPlaylistItemsArchGetDelegate == null)) {
                this.onBeginPlaylistItemsArchGetDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemsArchGet);
            }
            if ((this.onEndPlaylistItemsArchGetDelegate == null)) {
                this.onEndPlaylistItemsArchGetDelegate = new EndOperationDelegate(this.OnEndPlaylistItemsArchGet);
            }
            if ((this.onPlaylistItemsArchGetCompletedDelegate == null)) {
                this.onPlaylistItemsArchGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemsArchGetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemsArchGetDelegate, new object[] {
                        dtBegin,
                        dtEnd}, this.onEndPlaylistItemsArchGetDelegate, this.onPlaylistItemsArchGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemsPlanGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemsPlanGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemsPlanGet(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemsPlanGet(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemsPlanGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dtBegin = ((System.DateTime)(inValues[0]));
            System.DateTime dtEnd = ((System.DateTime)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemsPlanGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemsPlanGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemsPlanGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemsPlanGetCompleted(object state) {
            if ((this.PlaylistItemsPlanGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemsPlanGetCompleted(this, new PlaylistItemsPlanGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemsPlanGetAsync(System.DateTime dtBegin, System.DateTime dtEnd) {
            this.PlaylistItemsPlanGetAsync(dtBegin, dtEnd, null);
        }
        
        public void PlaylistItemsPlanGetAsync(System.DateTime dtBegin, System.DateTime dtEnd, object userState) {
            if ((this.onBeginPlaylistItemsPlanGetDelegate == null)) {
                this.onBeginPlaylistItemsPlanGetDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemsPlanGet);
            }
            if ((this.onEndPlaylistItemsPlanGetDelegate == null)) {
                this.onEndPlaylistItemsPlanGetDelegate = new EndOperationDelegate(this.OnEndPlaylistItemsPlanGet);
            }
            if ((this.onPlaylistItemsPlanGetCompletedDelegate == null)) {
                this.onPlaylistItemsPlanGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemsPlanGetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemsPlanGetDelegate, new object[] {
                        dtBegin,
                        dtEnd}, this.onEndPlaylistItemsPlanGetDelegate, this.onPlaylistItemsPlanGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemsAdvertsGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemsAdvertsGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemsAdvertsGet(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemsAdvertsGet(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemsAdvertsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dtBegin = ((System.DateTime)(inValues[0]));
            System.DateTime dtEnd = ((System.DateTime)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemsAdvertsGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemsAdvertsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemsAdvertsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemsAdvertsGetCompleted(object state) {
            if ((this.PlaylistItemsAdvertsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemsAdvertsGetCompleted(this, new PlaylistItemsAdvertsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemsAdvertsGetAsync(System.DateTime dtBegin, System.DateTime dtEnd) {
            this.PlaylistItemsAdvertsGetAsync(dtBegin, dtEnd, null);
        }
        
        public void PlaylistItemsAdvertsGetAsync(System.DateTime dtBegin, System.DateTime dtEnd, object userState) {
            if ((this.onBeginPlaylistItemsAdvertsGetDelegate == null)) {
                this.onBeginPlaylistItemsAdvertsGetDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemsAdvertsGet);
            }
            if ((this.onEndPlaylistItemsAdvertsGetDelegate == null)) {
                this.onEndPlaylistItemsAdvertsGetDelegate = new EndOperationDelegate(this.OnEndPlaylistItemsAdvertsGet);
            }
            if ((this.onPlaylistItemsAdvertsGetCompletedDelegate == null)) {
                this.onPlaylistItemsAdvertsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemsAdvertsGetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemsAdvertsGetDelegate, new object[] {
                        dtBegin,
                        dtEnd}, this.onEndPlaylistItemsAdvertsGetDelegate, this.onPlaylistItemsAdvertsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginNearestAdvertsBlock(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNearestAdvertsBlock(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime helpers.replica.services.dbinteract.DBInteractSoap.EndNearestAdvertsBlock(System.IAsyncResult result) {
            return base.Channel.EndNearestAdvertsBlock(result);
        }
        
        private System.IAsyncResult OnBeginNearestAdvertsBlock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginNearestAdvertsBlock(callback, asyncState);
        }
        
        private object[] OnEndNearestAdvertsBlock(System.IAsyncResult result) {
            System.DateTime retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndNearestAdvertsBlock(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNearestAdvertsBlockCompleted(object state) {
            if ((this.NearestAdvertsBlockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NearestAdvertsBlockCompleted(this, new NearestAdvertsBlockCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NearestAdvertsBlockAsync() {
            this.NearestAdvertsBlockAsync(null);
        }
        
        public void NearestAdvertsBlockAsync(object userState) {
            if ((this.onBeginNearestAdvertsBlockDelegate == null)) {
                this.onBeginNearestAdvertsBlockDelegate = new BeginOperationDelegate(this.OnBeginNearestAdvertsBlock);
            }
            if ((this.onEndNearestAdvertsBlockDelegate == null)) {
                this.onEndNearestAdvertsBlockDelegate = new EndOperationDelegate(this.OnEndNearestAdvertsBlock);
            }
            if ((this.onNearestAdvertsBlockCompletedDelegate == null)) {
                this.onNearestAdvertsBlockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNearestAdvertsBlockCompleted);
            }
            base.InvokeAsync(this.onBeginNearestAdvertsBlockDelegate, null, this.onEndNearestAdvertsBlockDelegate, this.onNearestAdvertsBlockCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemsDeleteSince(System.DateTime dtBegin, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemsDeleteSince(dtBegin, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemsDeleteSince(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemsDeleteSince(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemsDeleteSince(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dtBegin = ((System.DateTime)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemsDeleteSince(dtBegin, callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemsDeleteSince(System.IAsyncResult result) {
            int retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemsDeleteSince(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemsDeleteSinceCompleted(object state) {
            if ((this.PlaylistItemsDeleteSinceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemsDeleteSinceCompleted(this, new PlaylistItemsDeleteSinceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemsDeleteSinceAsync(System.DateTime dtBegin) {
            this.PlaylistItemsDeleteSinceAsync(dtBegin, null);
        }
        
        public void PlaylistItemsDeleteSinceAsync(System.DateTime dtBegin, object userState) {
            if ((this.onBeginPlaylistItemsDeleteSinceDelegate == null)) {
                this.onBeginPlaylistItemsDeleteSinceDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemsDeleteSince);
            }
            if ((this.onEndPlaylistItemsDeleteSinceDelegate == null)) {
                this.onEndPlaylistItemsDeleteSinceDelegate = new EndOperationDelegate(this.OnEndPlaylistItemsDeleteSince);
            }
            if ((this.onPlaylistItemsDeleteSinceCompletedDelegate == null)) {
                this.onPlaylistItemsDeleteSinceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemsDeleteSinceCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemsDeleteSinceDelegate, new object[] {
                        dtBegin}, this.onEndPlaylistItemsDeleteSinceDelegate, this.onPlaylistItemsDeleteSinceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemsDelete(helpers.replica.services.dbinteract.IdNamePair[] aIDs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemsDelete(aIDs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.IdNamePair[] helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemsDelete(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemsDelete(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemsDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.IdNamePair[] aIDs = ((helpers.replica.services.dbinteract.IdNamePair[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemsDelete(aIDs, callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemsDelete(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.IdNamePair[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemsDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemsDeleteCompleted(object state) {
            if ((this.PlaylistItemsDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemsDeleteCompleted(this, new PlaylistItemsDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemsDeleteAsync(helpers.replica.services.dbinteract.IdNamePair[] aIDs) {
            this.PlaylistItemsDeleteAsync(aIDs, null);
        }
        
        public void PlaylistItemsDeleteAsync(helpers.replica.services.dbinteract.IdNamePair[] aIDs, object userState) {
            if ((this.onBeginPlaylistItemsDeleteDelegate == null)) {
                this.onBeginPlaylistItemsDeleteDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemsDelete);
            }
            if ((this.onEndPlaylistItemsDeleteDelegate == null)) {
                this.onEndPlaylistItemsDeleteDelegate = new EndOperationDelegate(this.OnEndPlaylistItemsDelete);
            }
            if ((this.onPlaylistItemsDeleteCompletedDelegate == null)) {
                this.onPlaylistItemsDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemsDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemsDeleteDelegate, new object[] {
                        aIDs}, this.onEndPlaylistItemsDeleteDelegate, this.onPlaylistItemsDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemsTimingsSet(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemsTimingsSet(aPLIs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemsTimingsSet(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemsTimingsSet(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemsTimingsSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.PlaylistItem[] aPLIs = ((helpers.replica.services.dbinteract.PlaylistItem[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemsTimingsSet(aPLIs, callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemsTimingsSet(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemsTimingsSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemsTimingsSetCompleted(object state) {
            if ((this.PlaylistItemsTimingsSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemsTimingsSetCompleted(this, new PlaylistItemsTimingsSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemsTimingsSetAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs) {
            this.PlaylistItemsTimingsSetAsync(aPLIs, null);
        }
        
        public void PlaylistItemsTimingsSetAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, object userState) {
            if ((this.onBeginPlaylistItemsTimingsSetDelegate == null)) {
                this.onBeginPlaylistItemsTimingsSetDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemsTimingsSet);
            }
            if ((this.onEndPlaylistItemsTimingsSetDelegate == null)) {
                this.onEndPlaylistItemsTimingsSetDelegate = new EndOperationDelegate(this.OnEndPlaylistItemsTimingsSet);
            }
            if ((this.onPlaylistItemsTimingsSetCompletedDelegate == null)) {
                this.onPlaylistItemsTimingsSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemsTimingsSetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemsTimingsSetDelegate, new object[] {
                        aPLIs}, this.onEndPlaylistItemsTimingsSetDelegate, this.onPlaylistItemsTimingsSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemStartsSet(long nItemID, System.DateTime dtStartPlanned, System.DateTime dtOld, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemStartsSet(nItemID, dtStartPlanned, dtOld, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemStartsSet(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemStartsSet(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemStartsSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nItemID = ((long)(inValues[0]));
            System.DateTime dtStartPlanned = ((System.DateTime)(inValues[1]));
            System.DateTime dtOld = ((System.DateTime)(inValues[2]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemStartsSet(nItemID, dtStartPlanned, dtOld, callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemStartsSet(System.IAsyncResult result) {
            System.DateTime retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemStartsSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemStartsSetCompleted(object state) {
            if ((this.PlaylistItemStartsSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemStartsSetCompleted(this, new PlaylistItemStartsSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemStartsSetAsync(long nItemID, System.DateTime dtStartPlanned, System.DateTime dtOld) {
            this.PlaylistItemStartsSetAsync(nItemID, dtStartPlanned, dtOld, null);
        }
        
        public void PlaylistItemStartsSetAsync(long nItemID, System.DateTime dtStartPlanned, System.DateTime dtOld, object userState) {
            if ((this.onBeginPlaylistItemStartsSetDelegate == null)) {
                this.onBeginPlaylistItemStartsSetDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemStartsSet);
            }
            if ((this.onEndPlaylistItemStartsSetDelegate == null)) {
                this.onEndPlaylistItemStartsSetDelegate = new EndOperationDelegate(this.OnEndPlaylistItemStartsSet);
            }
            if ((this.onPlaylistItemStartsSetCompletedDelegate == null)) {
                this.onPlaylistItemStartsSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemStartsSetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemStartsSetDelegate, new object[] {
                        nItemID,
                        dtStartPlanned,
                        dtOld}, this.onEndPlaylistItemStartsSetDelegate, this.onPlaylistItemStartsSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistRecalculateQuery(long nPLitemsID, ushort nHoursQty, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistRecalculateQuery(nPLitemsID, nHoursQty, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistRecalculateQuery(System.IAsyncResult result) {
            return base.Channel.EndPlaylistRecalculateQuery(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistRecalculateQuery(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long nPLitemsID = ((long)(inValues[0]));
            ushort nHoursQty = ((ushort)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistRecalculateQuery(nPLitemsID, nHoursQty, callback, asyncState);
        }
        
        private object[] OnEndPlaylistRecalculateQuery(System.IAsyncResult result) {
            long retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistRecalculateQuery(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistRecalculateQueryCompleted(object state) {
            if ((this.PlaylistRecalculateQueryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistRecalculateQueryCompleted(this, new PlaylistRecalculateQueryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistRecalculateQueryAsync(long nPLitemsID, ushort nHoursQty) {
            this.PlaylistRecalculateQueryAsync(nPLitemsID, nHoursQty, null);
        }
        
        public void PlaylistRecalculateQueryAsync(long nPLitemsID, ushort nHoursQty, object userState) {
            if ((this.onBeginPlaylistRecalculateQueryDelegate == null)) {
                this.onBeginPlaylistRecalculateQueryDelegate = new BeginOperationDelegate(this.OnBeginPlaylistRecalculateQuery);
            }
            if ((this.onEndPlaylistRecalculateQueryDelegate == null)) {
                this.onEndPlaylistRecalculateQueryDelegate = new EndOperationDelegate(this.OnEndPlaylistRecalculateQuery);
            }
            if ((this.onPlaylistRecalculateQueryCompletedDelegate == null)) {
                this.onPlaylistRecalculateQueryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistRecalculateQueryCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistRecalculateQueryDelegate, new object[] {
                        nPLitemsID,
                        nHoursQty}, this.onEndPlaylistRecalculateQueryDelegate, this.onPlaylistRecalculateQueryCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemAdd_ResultGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemAdd_ResultGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemAdd_ResultGet(System.IAsyncResult result) {
            return base.Channel.EndPlaylistItemAdd_ResultGet(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemAdd_ResultGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemAdd_ResultGet(callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemAdd_ResultGet(System.IAsyncResult result) {
            string retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemAdd_ResultGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistItemAdd_ResultGetCompleted(object state) {
            if ((this.PlaylistItemAdd_ResultGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemAdd_ResultGetCompleted(this, new PlaylistItemAdd_ResultGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemAdd_ResultGetAsync() {
            this.PlaylistItemAdd_ResultGetAsync(null);
        }
        
        public void PlaylistItemAdd_ResultGetAsync(object userState) {
            if ((this.onBeginPlaylistItemAdd_ResultGetDelegate == null)) {
                this.onBeginPlaylistItemAdd_ResultGetDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemAdd_ResultGet);
            }
            if ((this.onEndPlaylistItemAdd_ResultGetDelegate == null)) {
                this.onEndPlaylistItemAdd_ResultGetDelegate = new EndOperationDelegate(this.OnEndPlaylistItemAdd_ResultGet);
            }
            if ((this.onPlaylistItemAdd_ResultGetCompletedDelegate == null)) {
                this.onPlaylistItemAdd_ResultGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemAdd_ResultGetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemAdd_ResultGetDelegate, null, this.onEndPlaylistItemAdd_ResultGetDelegate, this.onPlaylistItemAdd_ResultGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistItemsAddWorker(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistItemsAddWorker(aPLIs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistItemsAddWorker(System.IAsyncResult result) {
            base.Channel.EndPlaylistItemsAddWorker(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistItemsAddWorker(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.PlaylistItem[] aPLIs = ((helpers.replica.services.dbinteract.PlaylistItem[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistItemsAddWorker(aPLIs, callback, asyncState);
        }
        
        private object[] OnEndPlaylistItemsAddWorker(System.IAsyncResult result) {
            ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistItemsAddWorker(result);
            return null;
        }
        
        private void OnPlaylistItemsAddWorkerCompleted(object state) {
            if ((this.PlaylistItemsAddWorkerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistItemsAddWorkerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistItemsAddWorkerAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs) {
            this.PlaylistItemsAddWorkerAsync(aPLIs, null);
        }
        
        public void PlaylistItemsAddWorkerAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, object userState) {
            if ((this.onBeginPlaylistItemsAddWorkerDelegate == null)) {
                this.onBeginPlaylistItemsAddWorkerDelegate = new BeginOperationDelegate(this.OnBeginPlaylistItemsAddWorker);
            }
            if ((this.onEndPlaylistItemsAddWorkerDelegate == null)) {
                this.onEndPlaylistItemsAddWorkerDelegate = new EndOperationDelegate(this.OnEndPlaylistItemsAddWorker);
            }
            if ((this.onPlaylistItemsAddWorkerCompletedDelegate == null)) {
                this.onPlaylistItemsAddWorkerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistItemsAddWorkerCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistItemsAddWorkerDelegate, new object[] {
                        aPLIs}, this.onEndPlaylistItemsAddWorkerDelegate, this.onPlaylistItemsAddWorkerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginComingUpGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginComingUpGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndComingUpGet(System.IAsyncResult result) {
            return base.Channel.EndComingUpGet(result);
        }
        
        private System.IAsyncResult OnBeginComingUpGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginComingUpGet(callback, asyncState);
        }
        
        private object[] OnEndComingUpGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndComingUpGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnComingUpGetCompleted(object state) {
            if ((this.ComingUpGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ComingUpGetCompleted(this, new ComingUpGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ComingUpGetAsync() {
            this.ComingUpGetAsync(null);
        }
        
        public void ComingUpGetAsync(object userState) {
            if ((this.onBeginComingUpGetDelegate == null)) {
                this.onBeginComingUpGetDelegate = new BeginOperationDelegate(this.OnBeginComingUpGet);
            }
            if ((this.onEndComingUpGetDelegate == null)) {
                this.onEndComingUpGetDelegate = new EndOperationDelegate(this.OnEndComingUpGet);
            }
            if ((this.onComingUpGetCompletedDelegate == null)) {
                this.onComingUpGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnComingUpGetCompleted);
            }
            base.InvokeAsync(this.onBeginComingUpGetDelegate, null, this.onEndComingUpGetDelegate, this.onComingUpGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistInsert(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistInsert(aAssets, cPLIPreceding, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistInsert(System.IAsyncResult result) {
            return base.Channel.EndPlaylistInsert(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistInsert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset[] aAssets = ((helpers.replica.services.dbinteract.Asset[])(inValues[0]));
            helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding = ((helpers.replica.services.dbinteract.PlaylistItem)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistInsert(aAssets, cPLIPreceding, callback, asyncState);
        }
        
        private object[] OnEndPlaylistInsert(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistInsert(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistInsertCompleted(object state) {
            if ((this.PlaylistInsertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistInsertCompleted(this, new PlaylistInsertCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistInsertAsync(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding) {
            this.PlaylistInsertAsync(aAssets, cPLIPreceding, null);
        }
        
        public void PlaylistInsertAsync(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding, object userState) {
            if ((this.onBeginPlaylistInsertDelegate == null)) {
                this.onBeginPlaylistInsertDelegate = new BeginOperationDelegate(this.OnBeginPlaylistInsert);
            }
            if ((this.onEndPlaylistInsertDelegate == null)) {
                this.onEndPlaylistInsertDelegate = new EndOperationDelegate(this.OnEndPlaylistInsert);
            }
            if ((this.onPlaylistInsertCompletedDelegate == null)) {
                this.onPlaylistInsertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistInsertCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistInsertDelegate, new object[] {
                        aAssets,
                        cPLIPreceding}, this.onEndPlaylistInsertDelegate, this.onPlaylistInsertCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistInsertCopies(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding, int nCopiesQty, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistInsertCopies(aAssets, cPLIPreceding, nCopiesQty, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistInsertCopies(System.IAsyncResult result) {
            return base.Channel.EndPlaylistInsertCopies(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistInsertCopies(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Asset[] aAssets = ((helpers.replica.services.dbinteract.Asset[])(inValues[0]));
            helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding = ((helpers.replica.services.dbinteract.PlaylistItem)(inValues[1]));
            int nCopiesQty = ((int)(inValues[2]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistInsertCopies(aAssets, cPLIPreceding, nCopiesQty, callback, asyncState);
        }
        
        private object[] OnEndPlaylistInsertCopies(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistInsertCopies(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistInsertCopiesCompleted(object state) {
            if ((this.PlaylistInsertCopiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistInsertCopiesCompleted(this, new PlaylistInsertCopiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistInsertCopiesAsync(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding, int nCopiesQty) {
            this.PlaylistInsertCopiesAsync(aAssets, cPLIPreceding, nCopiesQty, null);
        }
        
        public void PlaylistInsertCopiesAsync(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding, int nCopiesQty, object userState) {
            if ((this.onBeginPlaylistInsertCopiesDelegate == null)) {
                this.onBeginPlaylistInsertCopiesDelegate = new BeginOperationDelegate(this.OnBeginPlaylistInsertCopies);
            }
            if ((this.onEndPlaylistInsertCopiesDelegate == null)) {
                this.onEndPlaylistInsertCopiesDelegate = new EndOperationDelegate(this.OnEndPlaylistInsertCopies);
            }
            if ((this.onPlaylistInsertCopiesCompletedDelegate == null)) {
                this.onPlaylistInsertCopiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistInsertCopiesCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistInsertCopiesDelegate, new object[] {
                        aAssets,
                        cPLIPreceding,
                        nCopiesQty}, this.onEndPlaylistInsertCopiesDelegate, this.onPlaylistInsertCopiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginInsertInBlock(helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToAdd, helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToMove, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertInBlock(aPLIsToAdd, aPLIsToMove, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string helpers.replica.services.dbinteract.DBInteractSoap.EndInsertInBlock(System.IAsyncResult result) {
            return base.Channel.EndInsertInBlock(result);
        }
        
        private System.IAsyncResult OnBeginInsertInBlock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToAdd = ((helpers.replica.services.dbinteract.PlaylistItem[])(inValues[0]));
            helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToMove = ((helpers.replica.services.dbinteract.PlaylistItem[])(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginInsertInBlock(aPLIsToAdd, aPLIsToMove, callback, asyncState);
        }
        
        private object[] OnEndInsertInBlock(System.IAsyncResult result) {
            string retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndInsertInBlock(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertInBlockCompleted(object state) {
            if ((this.InsertInBlockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertInBlockCompleted(this, new InsertInBlockCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertInBlockAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToAdd, helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToMove) {
            this.InsertInBlockAsync(aPLIsToAdd, aPLIsToMove, null);
        }
        
        public void InsertInBlockAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToAdd, helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToMove, object userState) {
            if ((this.onBeginInsertInBlockDelegate == null)) {
                this.onBeginInsertInBlockDelegate = new BeginOperationDelegate(this.OnBeginInsertInBlock);
            }
            if ((this.onEndInsertInBlockDelegate == null)) {
                this.onEndInsertInBlockDelegate = new EndOperationDelegate(this.OnEndInsertInBlock);
            }
            if ((this.onInsertInBlockCompletedDelegate == null)) {
                this.onInsertInBlockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertInBlockCompleted);
            }
            base.InvokeAsync(this.onBeginInsertInBlockDelegate, new object[] {
                        aPLIsToAdd,
                        aPLIsToMove}, this.onEndInsertInBlockDelegate, this.onInsertInBlockCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginGroupMoving(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGroupMoving(aPLIs, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string helpers.replica.services.dbinteract.DBInteractSoap.EndGroupMoving(System.IAsyncResult result) {
            return base.Channel.EndGroupMoving(result);
        }
        
        private System.IAsyncResult OnBeginGroupMoving(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.PlaylistItem[] aPLIs = ((helpers.replica.services.dbinteract.PlaylistItem[])(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginGroupMoving(aPLIs, callback, asyncState);
        }
        
        private object[] OnEndGroupMoving(System.IAsyncResult result) {
            string retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndGroupMoving(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGroupMovingCompleted(object state) {
            if ((this.GroupMovingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GroupMovingCompleted(this, new GroupMovingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GroupMovingAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs) {
            this.GroupMovingAsync(aPLIs, null);
        }
        
        public void GroupMovingAsync(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, object userState) {
            if ((this.onBeginGroupMovingDelegate == null)) {
                this.onBeginGroupMovingDelegate = new BeginOperationDelegate(this.OnBeginGroupMoving);
            }
            if ((this.onEndGroupMovingDelegate == null)) {
                this.onEndGroupMovingDelegate = new EndOperationDelegate(this.OnEndGroupMoving);
            }
            if ((this.onGroupMovingCompletedDelegate == null)) {
                this.onGroupMovingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGroupMovingCompleted);
            }
            base.InvokeAsync(this.onBeginGroupMovingDelegate, new object[] {
                        aPLIs}, this.onEndGroupMovingDelegate, this.onGroupMovingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPLIPropertiesSet(helpers.replica.services.dbinteract.PlaylistItem cPLI, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPLIPropertiesSet(cPLI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndPLIPropertiesSet(System.IAsyncResult result) {
            return base.Channel.EndPLIPropertiesSet(result);
        }
        
        private System.IAsyncResult OnBeginPLIPropertiesSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.PlaylistItem cPLI = ((helpers.replica.services.dbinteract.PlaylistItem)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPLIPropertiesSet(cPLI, callback, asyncState);
        }
        
        private object[] OnEndPLIPropertiesSet(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPLIPropertiesSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPLIPropertiesSetCompleted(object state) {
            if ((this.PLIPropertiesSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PLIPropertiesSetCompleted(this, new PLIPropertiesSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PLIPropertiesSetAsync(helpers.replica.services.dbinteract.PlaylistItem cPLI) {
            this.PLIPropertiesSetAsync(cPLI, null);
        }
        
        public void PLIPropertiesSetAsync(helpers.replica.services.dbinteract.PlaylistItem cPLI, object userState) {
            if ((this.onBeginPLIPropertiesSetDelegate == null)) {
                this.onBeginPLIPropertiesSetDelegate = new BeginOperationDelegate(this.OnBeginPLIPropertiesSet);
            }
            if ((this.onEndPLIPropertiesSetDelegate == null)) {
                this.onEndPLIPropertiesSetDelegate = new EndOperationDelegate(this.OnEndPLIPropertiesSet);
            }
            if ((this.onPLIPropertiesSetCompletedDelegate == null)) {
                this.onPLIPropertiesSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPLIPropertiesSetCompleted);
            }
            base.InvokeAsync(this.onBeginPLIPropertiesSetDelegate, new object[] {
                        cPLI}, this.onEndPLIPropertiesSetDelegate, this.onPLIPropertiesSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistLastElementGet(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistLastElementGet(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistLastElementGet(System.IAsyncResult result) {
            return base.Channel.EndPlaylistLastElementGet(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistLastElementGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistLastElementGet(callback, asyncState);
        }
        
        private object[] OnEndPlaylistLastElementGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistLastElementGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistLastElementGetCompleted(object state) {
            if ((this.PlaylistLastElementGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistLastElementGetCompleted(this, new PlaylistLastElementGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistLastElementGetAsync() {
            this.PlaylistLastElementGetAsync(null);
        }
        
        public void PlaylistLastElementGetAsync(object userState) {
            if ((this.onBeginPlaylistLastElementGetDelegate == null)) {
                this.onBeginPlaylistLastElementGetDelegate = new BeginOperationDelegate(this.OnBeginPlaylistLastElementGet);
            }
            if ((this.onEndPlaylistLastElementGetDelegate == null)) {
                this.onEndPlaylistLastElementGetDelegate = new EndOperationDelegate(this.OnEndPlaylistLastElementGet);
            }
            if ((this.onPlaylistLastElementGetCompletedDelegate == null)) {
                this.onPlaylistLastElementGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistLastElementGetCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistLastElementGetDelegate, null, this.onEndPlaylistLastElementGetDelegate, this.onPlaylistLastElementGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginBeforeAddCheckRange(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBeforeAddCheckRange(dtBegin, dtEnd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndBeforeAddCheckRange(System.IAsyncResult result) {
            return base.Channel.EndBeforeAddCheckRange(result);
        }
        
        private System.IAsyncResult OnBeginBeforeAddCheckRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dtBegin = ((System.DateTime)(inValues[0]));
            System.DateTime dtEnd = ((System.DateTime)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginBeforeAddCheckRange(dtBegin, dtEnd, callback, asyncState);
        }
        
        private object[] OnEndBeforeAddCheckRange(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndBeforeAddCheckRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBeforeAddCheckRangeCompleted(object state) {
            if ((this.BeforeAddCheckRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BeforeAddCheckRangeCompleted(this, new BeforeAddCheckRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BeforeAddCheckRangeAsync(System.DateTime dtBegin, System.DateTime dtEnd) {
            this.BeforeAddCheckRangeAsync(dtBegin, dtEnd, null);
        }
        
        public void BeforeAddCheckRangeAsync(System.DateTime dtBegin, System.DateTime dtEnd, object userState) {
            if ((this.onBeginBeforeAddCheckRangeDelegate == null)) {
                this.onBeginBeforeAddCheckRangeDelegate = new BeginOperationDelegate(this.OnBeginBeforeAddCheckRange);
            }
            if ((this.onEndBeforeAddCheckRangeDelegate == null)) {
                this.onEndBeforeAddCheckRangeDelegate = new EndOperationDelegate(this.OnEndBeforeAddCheckRange);
            }
            if ((this.onBeforeAddCheckRangeCompletedDelegate == null)) {
                this.onBeforeAddCheckRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBeforeAddCheckRangeCompleted);
            }
            base.InvokeAsync(this.onBeginBeforeAddCheckRangeDelegate, new object[] {
                        dtBegin,
                        dtEnd}, this.onEndBeforeAddCheckRangeDelegate, this.onBeforeAddCheckRangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvancedPlaylistsGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvancedPlaylistsGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Playlist[] helpers.replica.services.dbinteract.DBInteractSoap.EndAdvancedPlaylistsGet(System.IAsyncResult result) {
            return base.Channel.EndAdvancedPlaylistsGet(result);
        }
        
        private System.IAsyncResult OnBeginAdvancedPlaylistsGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dtBegin = ((System.DateTime)(inValues[0]));
            System.DateTime dtEnd = ((System.DateTime)(inValues[1]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvancedPlaylistsGet(dtBegin, dtEnd, callback, asyncState);
        }
        
        private object[] OnEndAdvancedPlaylistsGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Playlist[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvancedPlaylistsGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvancedPlaylistsGetCompleted(object state) {
            if ((this.AdvancedPlaylistsGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvancedPlaylistsGetCompleted(this, new AdvancedPlaylistsGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvancedPlaylistsGetAsync(System.DateTime dtBegin, System.DateTime dtEnd) {
            this.AdvancedPlaylistsGetAsync(dtBegin, dtEnd, null);
        }
        
        public void AdvancedPlaylistsGetAsync(System.DateTime dtBegin, System.DateTime dtEnd, object userState) {
            if ((this.onBeginAdvancedPlaylistsGetDelegate == null)) {
                this.onBeginAdvancedPlaylistsGetDelegate = new BeginOperationDelegate(this.OnBeginAdvancedPlaylistsGet);
            }
            if ((this.onEndAdvancedPlaylistsGetDelegate == null)) {
                this.onEndAdvancedPlaylistsGetDelegate = new EndOperationDelegate(this.OnEndAdvancedPlaylistsGet);
            }
            if ((this.onAdvancedPlaylistsGetCompletedDelegate == null)) {
                this.onAdvancedPlaylistsGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvancedPlaylistsGetCompleted);
            }
            base.InvokeAsync(this.onBeginAdvancedPlaylistsGetDelegate, new object[] {
                        dtBegin,
                        dtEnd}, this.onEndAdvancedPlaylistsGetDelegate, this.onAdvancedPlaylistsGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvancedPlaylistGet(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvancedPlaylistGet(cPL, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.Playlist helpers.replica.services.dbinteract.DBInteractSoap.EndAdvancedPlaylistGet(System.IAsyncResult result) {
            return base.Channel.EndAdvancedPlaylistGet(result);
        }
        
        private System.IAsyncResult OnBeginAdvancedPlaylistGet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Playlist cPL = ((helpers.replica.services.dbinteract.Playlist)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvancedPlaylistGet(cPL, callback, asyncState);
        }
        
        private object[] OnEndAdvancedPlaylistGet(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.Playlist retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvancedPlaylistGet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvancedPlaylistGetCompleted(object state) {
            if ((this.AdvancedPlaylistGetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvancedPlaylistGetCompleted(this, new AdvancedPlaylistGetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvancedPlaylistGetAsync(helpers.replica.services.dbinteract.Playlist cPL) {
            this.AdvancedPlaylistGetAsync(cPL, null);
        }
        
        public void AdvancedPlaylistGetAsync(helpers.replica.services.dbinteract.Playlist cPL, object userState) {
            if ((this.onBeginAdvancedPlaylistGetDelegate == null)) {
                this.onBeginAdvancedPlaylistGetDelegate = new BeginOperationDelegate(this.OnBeginAdvancedPlaylistGet);
            }
            if ((this.onEndAdvancedPlaylistGetDelegate == null)) {
                this.onEndAdvancedPlaylistGetDelegate = new EndOperationDelegate(this.OnEndAdvancedPlaylistGet);
            }
            if ((this.onAdvancedPlaylistGetCompletedDelegate == null)) {
                this.onAdvancedPlaylistGetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvancedPlaylistGetCompleted);
            }
            base.InvokeAsync(this.onBeginAdvancedPlaylistGetDelegate, new object[] {
                        cPL}, this.onEndAdvancedPlaylistGetDelegate, this.onAdvancedPlaylistGetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvancedPlaylistAddReplace(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvancedPlaylistAddReplace(cPL, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        long helpers.replica.services.dbinteract.DBInteractSoap.EndAdvancedPlaylistAddReplace(System.IAsyncResult result) {
            return base.Channel.EndAdvancedPlaylistAddReplace(result);
        }
        
        private System.IAsyncResult OnBeginAdvancedPlaylistAddReplace(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Playlist cPL = ((helpers.replica.services.dbinteract.Playlist)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvancedPlaylistAddReplace(cPL, callback, asyncState);
        }
        
        private object[] OnEndAdvancedPlaylistAddReplace(System.IAsyncResult result) {
            long retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvancedPlaylistAddReplace(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvancedPlaylistAddReplaceCompleted(object state) {
            if ((this.AdvancedPlaylistAddReplaceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvancedPlaylistAddReplaceCompleted(this, new AdvancedPlaylistAddReplaceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvancedPlaylistAddReplaceAsync(helpers.replica.services.dbinteract.Playlist cPL) {
            this.AdvancedPlaylistAddReplaceAsync(cPL, null);
        }
        
        public void AdvancedPlaylistAddReplaceAsync(helpers.replica.services.dbinteract.Playlist cPL, object userState) {
            if ((this.onBeginAdvancedPlaylistAddReplaceDelegate == null)) {
                this.onBeginAdvancedPlaylistAddReplaceDelegate = new BeginOperationDelegate(this.OnBeginAdvancedPlaylistAddReplace);
            }
            if ((this.onEndAdvancedPlaylistAddReplaceDelegate == null)) {
                this.onEndAdvancedPlaylistAddReplaceDelegate = new EndOperationDelegate(this.OnEndAdvancedPlaylistAddReplace);
            }
            if ((this.onAdvancedPlaylistAddReplaceCompletedDelegate == null)) {
                this.onAdvancedPlaylistAddReplaceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvancedPlaylistAddReplaceCompleted);
            }
            base.InvokeAsync(this.onBeginAdvancedPlaylistAddReplaceDelegate, new object[] {
                        cPL}, this.onEndAdvancedPlaylistAddReplaceDelegate, this.onAdvancedPlaylistAddReplaceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvancedPlaylistDelete(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvancedPlaylistDelete(cPL, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndAdvancedPlaylistDelete(System.IAsyncResult result) {
            return base.Channel.EndAdvancedPlaylistDelete(result);
        }
        
        private System.IAsyncResult OnBeginAdvancedPlaylistDelete(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Playlist cPL = ((helpers.replica.services.dbinteract.Playlist)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvancedPlaylistDelete(cPL, callback, asyncState);
        }
        
        private object[] OnEndAdvancedPlaylistDelete(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvancedPlaylistDelete(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvancedPlaylistDeleteCompleted(object state) {
            if ((this.AdvancedPlaylistDeleteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvancedPlaylistDeleteCompleted(this, new AdvancedPlaylistDeleteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvancedPlaylistDeleteAsync(helpers.replica.services.dbinteract.Playlist cPL) {
            this.AdvancedPlaylistDeleteAsync(cPL, null);
        }
        
        public void AdvancedPlaylistDeleteAsync(helpers.replica.services.dbinteract.Playlist cPL, object userState) {
            if ((this.onBeginAdvancedPlaylistDeleteDelegate == null)) {
                this.onBeginAdvancedPlaylistDeleteDelegate = new BeginOperationDelegate(this.OnBeginAdvancedPlaylistDelete);
            }
            if ((this.onEndAdvancedPlaylistDeleteDelegate == null)) {
                this.onEndAdvancedPlaylistDeleteDelegate = new EndOperationDelegate(this.OnEndAdvancedPlaylistDelete);
            }
            if ((this.onAdvancedPlaylistDeleteCompletedDelegate == null)) {
                this.onAdvancedPlaylistDeleteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvancedPlaylistDeleteCompleted);
            }
            base.InvokeAsync(this.onBeginAdvancedPlaylistDeleteDelegate, new object[] {
                        cPL}, this.onEndAdvancedPlaylistDeleteDelegate, this.onAdvancedPlaylistDeleteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvancedPlaylistRename(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvancedPlaylistRename(cPL, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndAdvancedPlaylistRename(System.IAsyncResult result) {
            return base.Channel.EndAdvancedPlaylistRename(result);
        }
        
        private System.IAsyncResult OnBeginAdvancedPlaylistRename(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Playlist cPL = ((helpers.replica.services.dbinteract.Playlist)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvancedPlaylistRename(cPL, callback, asyncState);
        }
        
        private object[] OnEndAdvancedPlaylistRename(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvancedPlaylistRename(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvancedPlaylistRenameCompleted(object state) {
            if ((this.AdvancedPlaylistRenameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvancedPlaylistRenameCompleted(this, new AdvancedPlaylistRenameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvancedPlaylistRenameAsync(helpers.replica.services.dbinteract.Playlist cPL) {
            this.AdvancedPlaylistRenameAsync(cPL, null);
        }
        
        public void AdvancedPlaylistRenameAsync(helpers.replica.services.dbinteract.Playlist cPL, object userState) {
            if ((this.onBeginAdvancedPlaylistRenameDelegate == null)) {
                this.onBeginAdvancedPlaylistRenameDelegate = new BeginOperationDelegate(this.OnBeginAdvancedPlaylistRename);
            }
            if ((this.onEndAdvancedPlaylistRenameDelegate == null)) {
                this.onEndAdvancedPlaylistRenameDelegate = new EndOperationDelegate(this.OnEndAdvancedPlaylistRename);
            }
            if ((this.onAdvancedPlaylistRenameCompletedDelegate == null)) {
                this.onAdvancedPlaylistRenameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvancedPlaylistRenameCompleted);
            }
            base.InvokeAsync(this.onBeginAdvancedPlaylistRenameDelegate, new object[] {
                        cPL}, this.onEndAdvancedPlaylistRenameDelegate, this.onAdvancedPlaylistRenameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvancedPlaylistStart(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvancedPlaylistStart(cPL, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndAdvancedPlaylistStart(System.IAsyncResult result) {
            return base.Channel.EndAdvancedPlaylistStart(result);
        }
        
        private System.IAsyncResult OnBeginAdvancedPlaylistStart(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.Playlist cPL = ((helpers.replica.services.dbinteract.Playlist)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvancedPlaylistStart(cPL, callback, asyncState);
        }
        
        private object[] OnEndAdvancedPlaylistStart(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvancedPlaylistStart(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvancedPlaylistStartCompleted(object state) {
            if ((this.AdvancedPlaylistStartCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvancedPlaylistStartCompleted(this, new AdvancedPlaylistStartCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvancedPlaylistStartAsync(helpers.replica.services.dbinteract.Playlist cPL) {
            this.AdvancedPlaylistStartAsync(cPL, null);
        }
        
        public void AdvancedPlaylistStartAsync(helpers.replica.services.dbinteract.Playlist cPL, object userState) {
            if ((this.onBeginAdvancedPlaylistStartDelegate == null)) {
                this.onBeginAdvancedPlaylistStartDelegate = new BeginOperationDelegate(this.OnBeginAdvancedPlaylistStart);
            }
            if ((this.onEndAdvancedPlaylistStartDelegate == null)) {
                this.onEndAdvancedPlaylistStartDelegate = new EndOperationDelegate(this.OnEndAdvancedPlaylistStart);
            }
            if ((this.onAdvancedPlaylistStartCompletedDelegate == null)) {
                this.onAdvancedPlaylistStartCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvancedPlaylistStartCompleted);
            }
            base.InvokeAsync(this.onBeginAdvancedPlaylistStartDelegate, new object[] {
                        cPL}, this.onEndAdvancedPlaylistStartDelegate, this.onAdvancedPlaylistStartCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginAdvancedPlaylistItemSave(helpers.replica.services.dbinteract.PluginPlaylistItem cPLI, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdvancedPlaylistItemSave(cPLI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool helpers.replica.services.dbinteract.DBInteractSoap.EndAdvancedPlaylistItemSave(System.IAsyncResult result) {
            return base.Channel.EndAdvancedPlaylistItemSave(result);
        }
        
        private System.IAsyncResult OnBeginAdvancedPlaylistItemSave(object[] inValues, System.AsyncCallback callback, object asyncState) {
            helpers.replica.services.dbinteract.PluginPlaylistItem cPLI = ((helpers.replica.services.dbinteract.PluginPlaylistItem)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginAdvancedPlaylistItemSave(cPLI, callback, asyncState);
        }
        
        private object[] OnEndAdvancedPlaylistItemSave(System.IAsyncResult result) {
            bool retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndAdvancedPlaylistItemSave(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAdvancedPlaylistItemSaveCompleted(object state) {
            if ((this.AdvancedPlaylistItemSaveCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AdvancedPlaylistItemSaveCompleted(this, new AdvancedPlaylistItemSaveCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AdvancedPlaylistItemSaveAsync(helpers.replica.services.dbinteract.PluginPlaylistItem cPLI) {
            this.AdvancedPlaylistItemSaveAsync(cPLI, null);
        }
        
        public void AdvancedPlaylistItemSaveAsync(helpers.replica.services.dbinteract.PluginPlaylistItem cPLI, object userState) {
            if ((this.onBeginAdvancedPlaylistItemSaveDelegate == null)) {
                this.onBeginAdvancedPlaylistItemSaveDelegate = new BeginOperationDelegate(this.OnBeginAdvancedPlaylistItemSave);
            }
            if ((this.onEndAdvancedPlaylistItemSaveDelegate == null)) {
                this.onEndAdvancedPlaylistItemSaveDelegate = new EndOperationDelegate(this.OnEndAdvancedPlaylistItemSave);
            }
            if ((this.onAdvancedPlaylistItemSaveCompletedDelegate == null)) {
                this.onAdvancedPlaylistItemSaveCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAdvancedPlaylistItemSaveCompleted);
            }
            base.InvokeAsync(this.onBeginAdvancedPlaylistItemSaveDelegate, new object[] {
                        cPLI}, this.onEndAdvancedPlaylistItemSaveDelegate, this.onAdvancedPlaylistItemSaveCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPowerGoldFileParse(string sFile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPowerGoldFileParse(sFile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int helpers.replica.services.dbinteract.DBInteractSoap.EndPowerGoldFileParse(System.IAsyncResult result) {
            return base.Channel.EndPowerGoldFileParse(result);
        }
        
        private System.IAsyncResult OnBeginPowerGoldFileParse(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sFile = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPowerGoldFileParse(sFile, callback, asyncState);
        }
        
        private object[] OnEndPowerGoldFileParse(System.IAsyncResult result) {
            int retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPowerGoldFileParse(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPowerGoldFileParseCompleted(object state) {
            if ((this.PowerGoldFileParseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PowerGoldFileParseCompleted(this, new PowerGoldFileParseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PowerGoldFileParseAsync(string sFile) {
            this.PowerGoldFileParseAsync(sFile, null);
        }
        
        public void PowerGoldFileParseAsync(string sFile, object userState) {
            if ((this.onBeginPowerGoldFileParseDelegate == null)) {
                this.onBeginPowerGoldFileParseDelegate = new BeginOperationDelegate(this.OnBeginPowerGoldFileParse);
            }
            if ((this.onEndPowerGoldFileParseDelegate == null)) {
                this.onEndPowerGoldFileParseDelegate = new EndOperationDelegate(this.OnEndPowerGoldFileParse);
            }
            if ((this.onPowerGoldFileParseCompletedDelegate == null)) {
                this.onPowerGoldFileParseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPowerGoldFileParseCompleted);
            }
            base.InvokeAsync(this.onBeginPowerGoldFileParseDelegate, new object[] {
                        sFile}, this.onEndPowerGoldFileParseDelegate, this.onPowerGoldFileParseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginVideoInternationalFileParse(string sFile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginVideoInternationalFileParse(sFile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int helpers.replica.services.dbinteract.DBInteractSoap.EndVideoInternationalFileParse(System.IAsyncResult result) {
            return base.Channel.EndVideoInternationalFileParse(result);
        }
        
        private System.IAsyncResult OnBeginVideoInternationalFileParse(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sFile = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginVideoInternationalFileParse(sFile, callback, asyncState);
        }
        
        private object[] OnEndVideoInternationalFileParse(System.IAsyncResult result) {
            int retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndVideoInternationalFileParse(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVideoInternationalFileParseCompleted(object state) {
            if ((this.VideoInternationalFileParseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VideoInternationalFileParseCompleted(this, new VideoInternationalFileParseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VideoInternationalFileParseAsync(string sFile) {
            this.VideoInternationalFileParseAsync(sFile, null);
        }
        
        public void VideoInternationalFileParseAsync(string sFile, object userState) {
            if ((this.onBeginVideoInternationalFileParseDelegate == null)) {
                this.onBeginVideoInternationalFileParseDelegate = new BeginOperationDelegate(this.OnBeginVideoInternationalFileParse);
            }
            if ((this.onEndVideoInternationalFileParseDelegate == null)) {
                this.onEndVideoInternationalFileParseDelegate = new EndOperationDelegate(this.OnEndVideoInternationalFileParse);
            }
            if ((this.onVideoInternationalFileParseCompletedDelegate == null)) {
                this.onVideoInternationalFileParseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVideoInternationalFileParseCompleted);
            }
            base.InvokeAsync(this.onBeginVideoInternationalFileParseDelegate, new object[] {
                        sFile}, this.onEndVideoInternationalFileParseDelegate, this.onVideoInternationalFileParseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginDesignFileParse(string sFile, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDesignFileParse(sFile, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int helpers.replica.services.dbinteract.DBInteractSoap.EndDesignFileParse(System.IAsyncResult result) {
            return base.Channel.EndDesignFileParse(result);
        }
        
        private System.IAsyncResult OnBeginDesignFileParse(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string sFile = ((string)(inValues[0]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginDesignFileParse(sFile, callback, asyncState);
        }
        
        private object[] OnEndDesignFileParse(System.IAsyncResult result) {
            int retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndDesignFileParse(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDesignFileParseCompleted(object state) {
            if ((this.DesignFileParseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DesignFileParseCompleted(this, new DesignFileParseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DesignFileParseAsync(string sFile) {
            this.DesignFileParseAsync(sFile, null);
        }
        
        public void DesignFileParseAsync(string sFile, object userState) {
            if ((this.onBeginDesignFileParseDelegate == null)) {
                this.onBeginDesignFileParseDelegate = new BeginOperationDelegate(this.OnBeginDesignFileParse);
            }
            if ((this.onEndDesignFileParseDelegate == null)) {
                this.onEndDesignFileParseDelegate = new EndOperationDelegate(this.OnEndDesignFileParse);
            }
            if ((this.onDesignFileParseCompletedDelegate == null)) {
                this.onDesignFileParseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDesignFileParseCompleted);
            }
            base.InvokeAsync(this.onBeginDesignFileParseDelegate, new object[] {
                        sFile}, this.onEndDesignFileParseDelegate, this.onDesignFileParseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult helpers.replica.services.dbinteract.DBInteractSoap.BeginPlaylistsMerge(int nPGAssetsHandle, int nVIAssetsHandle, System.DateTime dtAdvertisementBind, int nDesignAssetsHandle, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlaylistsMerge(nPGAssetsHandle, nVIAssetsHandle, dtAdvertisementBind, nDesignAssetsHandle, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        helpers.replica.services.dbinteract.PlaylistItem[] helpers.replica.services.dbinteract.DBInteractSoap.EndPlaylistsMerge(System.IAsyncResult result) {
            return base.Channel.EndPlaylistsMerge(result);
        }
        
        private System.IAsyncResult OnBeginPlaylistsMerge(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int nPGAssetsHandle = ((int)(inValues[0]));
            int nVIAssetsHandle = ((int)(inValues[1]));
            System.DateTime dtAdvertisementBind = ((System.DateTime)(inValues[2]));
            int nDesignAssetsHandle = ((int)(inValues[3]));
            return ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).BeginPlaylistsMerge(nPGAssetsHandle, nVIAssetsHandle, dtAdvertisementBind, nDesignAssetsHandle, callback, asyncState);
        }
        
        private object[] OnEndPlaylistsMerge(System.IAsyncResult result) {
            helpers.replica.services.dbinteract.PlaylistItem[] retVal = ((helpers.replica.services.dbinteract.DBInteractSoap)(this)).EndPlaylistsMerge(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlaylistsMergeCompleted(object state) {
            if ((this.PlaylistsMergeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlaylistsMergeCompleted(this, new PlaylistsMergeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlaylistsMergeAsync(int nPGAssetsHandle, int nVIAssetsHandle, System.DateTime dtAdvertisementBind, int nDesignAssetsHandle) {
            this.PlaylistsMergeAsync(nPGAssetsHandle, nVIAssetsHandle, dtAdvertisementBind, nDesignAssetsHandle, null);
        }
        
        public void PlaylistsMergeAsync(int nPGAssetsHandle, int nVIAssetsHandle, System.DateTime dtAdvertisementBind, int nDesignAssetsHandle, object userState) {
            if ((this.onBeginPlaylistsMergeDelegate == null)) {
                this.onBeginPlaylistsMergeDelegate = new BeginOperationDelegate(this.OnBeginPlaylistsMerge);
            }
            if ((this.onEndPlaylistsMergeDelegate == null)) {
                this.onEndPlaylistsMergeDelegate = new EndOperationDelegate(this.OnEndPlaylistsMerge);
            }
            if ((this.onPlaylistsMergeCompletedDelegate == null)) {
                this.onPlaylistsMergeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlaylistsMergeCompleted);
            }
            base.InvokeAsync(this.onBeginPlaylistsMergeDelegate, new object[] {
                        nPGAssetsHandle,
                        nVIAssetsHandle,
                        dtAdvertisementBind,
                        nDesignAssetsHandle}, this.onEndPlaylistsMergeDelegate, this.onPlaylistsMergeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override helpers.replica.services.dbinteract.DBInteractSoap CreateChannel() {
            return new DBInteractSoapClientChannel(this);
        }
        
        private class DBInteractSoapClientChannel : ChannelBase<helpers.replica.services.dbinteract.DBInteractSoap>, helpers.replica.services.dbinteract.DBInteractSoap {
            
            public DBInteractSoapClientChannel(System.ServiceModel.ClientBase<helpers.replica.services.dbinteract.DBInteractSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginImportLogGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ImportLogGet", _args, callback, asyncState);
                return _result;
            }
            
            public string EndImportLogGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ImportLogGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTemplateRegisteredTableGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("TemplateRegisteredTableGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.RegisteredTable EndTemplateRegisteredTableGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.RegisteredTable _result = ((helpers.replica.services.dbinteract.RegisteredTable)(base.EndInvoke("TemplateRegisteredTableGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMacrosCrawlsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("MacrosCrawlsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Macro[] EndMacrosCrawlsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Macro[] _result = ((helpers.replica.services.dbinteract.Macro[])(base.EndInvoke("MacrosCrawlsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTempateMessagesGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("TempateMessagesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Template[] EndTempateMessagesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Template[] _result = ((helpers.replica.services.dbinteract.Template[])(base.EndInvoke("TempateMessagesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTemplateBindsTrailsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("TemplateBindsTrailsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.TemplateBind[] EndTemplateBindsTrailsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.TemplateBind[] _result = ((helpers.replica.services.dbinteract.TemplateBind[])(base.EndInvoke("TemplateBindsTrailsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMacrosValuesSet(helpers.replica.services.dbinteract.Macro[] aMacros, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aMacros;
                System.IAsyncResult _result = base.BeginInvoke("MacrosValuesSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndMacrosValuesSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("MacrosValuesSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTemplateMessagesTextSave(helpers.replica.services.dbinteract.DictionaryElement[] aDict, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aDict;
                System.IAsyncResult _result = base.BeginInvoke("TemplateMessagesTextSave", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndTemplateMessagesTextSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("TemplateMessagesTextSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTemplateMessagesTextGet(helpers.replica.services.dbinteract.Template[] aMessages, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aMessages;
                System.IAsyncResult _result = base.BeginInvoke("TemplateMessagesTextGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.DictionaryElement[] EndTemplateMessagesTextGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.DictionaryElement[] _result = ((helpers.replica.services.dbinteract.DictionaryElement[])(base.EndInvoke("TemplateMessagesTextGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTemplatesScheduleAdd(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aTemplatesSchedule;
                System.IAsyncResult _result = base.BeginInvoke("TemplatesScheduleAdd", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndTemplatesScheduleAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("TemplatesScheduleAdd", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTemplatesScheduleGet(helpers.replica.services.dbinteract.TemplateBind[] aTemplateBinds, System.DateTime dtBegin, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = aTemplateBinds;
                _args[1] = dtBegin;
                System.IAsyncResult _result = base.BeginInvoke("TemplatesScheduleGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.TemplatesSchedule[] EndTemplatesScheduleGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.TemplatesSchedule[] _result = ((helpers.replica.services.dbinteract.TemplatesSchedule[])(base.EndInvoke("TemplatesScheduleGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTemplatesScheduleDelete(helpers.replica.services.dbinteract.TemplatesSchedule[] aTemplatesSchedule, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aTemplatesSchedule;
                System.IAsyncResult _result = base.BeginInvoke("TemplatesScheduleDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndTemplatesScheduleDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("TemplatesScheduleDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDirectoriesTrailsGet(string sPath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sPath;
                System.IAsyncResult _result = base.BeginInvoke("DirectoriesTrailsGet", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndDirectoriesTrailsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("DirectoriesTrailsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginShiftAdd(helpers.replica.services.dbinteract.IdNamePair cPreset, string sSubject, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cPreset;
                _args[1] = sSubject;
                System.IAsyncResult _result = base.BeginInvoke("ShiftAdd", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Shift EndShiftAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Shift _result = ((helpers.replica.services.dbinteract.Shift)(base.EndInvoke("ShiftAdd", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginShiftStart(helpers.replica.services.dbinteract.Shift cShift, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cShift;
                System.IAsyncResult _result = base.BeginInvoke("ShiftStart", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndShiftStart(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ShiftStart", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginShiftStop(helpers.replica.services.dbinteract.Shift cShift, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cShift;
                System.IAsyncResult _result = base.BeginInvoke("ShiftStop", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndShiftStop(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ShiftStop", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginShiftCurrentGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ShiftCurrentGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Shift EndShiftCurrentGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Shift _result = ((helpers.replica.services.dbinteract.Shift)(base.EndInvoke("ShiftCurrentGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAnnouncementsActualGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AnnouncementsActualGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Announcement[] EndAnnouncementsActualGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Announcement[] _result = ((helpers.replica.services.dbinteract.Announcement[])(base.EndInvoke("AnnouncementsActualGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMessagesQueueGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("MessagesQueueGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Message[] EndMessagesQueueGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Message[] _result = ((helpers.replica.services.dbinteract.Message[])(base.EndInvoke("MessagesQueueGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMessageMark(long nID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nID;
                System.IAsyncResult _result = base.BeginInvoke("MessageMark", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMessageMark(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("MessageMark", _args, result);
            }
            
            public System.IAsyncResult BeginMessageUnMark(long nID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nID;
                System.IAsyncResult _result = base.BeginInvoke("MessageUnMark", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMessageUnMark(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("MessageUnMark", _args, result);
            }
            
            public System.IAsyncResult BeginTimeBlockGet(System.DateTime dt, bool bForward, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dt;
                _args[1] = bForward;
                System.IAsyncResult _result = base.BeginInvoke("TimeBlockGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndTimeBlockGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("TimeBlockGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaqueAdd(helpers.replica.services.dbinteract.Plaque cPlaque, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPlaque;
                System.IAsyncResult _result = base.BeginInvoke("PlaqueAdd", _args, callback, asyncState);
                return _result;
            }
            
            public int EndPlaqueAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("PlaqueAdd", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaquesGet(helpers.replica.services.dbinteract.IdNamePair cPreset, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPreset;
                System.IAsyncResult _result = base.BeginInvoke("PlaquesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Plaque[] EndPlaquesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Plaque[] _result = ((helpers.replica.services.dbinteract.Plaque[])(base.EndInvoke("PlaquesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaqueDelete(helpers.replica.services.dbinteract.Plaque cPlaque, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPlaque;
                System.IAsyncResult _result = base.BeginInvoke("PlaqueDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPlaqueDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PlaqueDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaqueChange(helpers.replica.services.dbinteract.Plaque cPlaque, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPlaque;
                System.IAsyncResult _result = base.BeginInvoke("PlaqueChange", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPlaqueChange(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PlaqueChange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCuesGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nAssetID;
                System.IAsyncResult _result = base.BeginInvoke("CuesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Cues EndCuesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Cues _result = ((helpers.replica.services.dbinteract.Cues)(base.EndInvoke("CuesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStorageSCRGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("StorageSCRGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.StoragesMappings[] EndStorageSCRGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.StoragesMappings[] _result = ((helpers.replica.services.dbinteract.StoragesMappings[])(base.EndInvoke("StorageSCRGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogoBindingGet(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aPLIs;
                System.IAsyncResult _result = base.BeginInvoke("LogoBindingGet", _args, callback, asyncState);
                return _result;
            }
            
            public bool[] EndLogoBindingGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool[] _result = ((bool[])(base.EndInvoke("LogoBindingGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClipsBDLog(long nShiftID, helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = nShiftID;
                _args[1] = aPLIs;
                System.IAsyncResult _result = base.BeginInvoke("ClipsBDLog", _args, callback, asyncState);
                return _result;
            }
            
            public void EndClipsBDLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ClipsBDLog", _args, result);
            }
            
            public System.IAsyncResult BeginPLFragmentGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dtBegin;
                _args[1] = dtEnd;
                System.IAsyncResult _result = base.BeginInvoke("PLFragmentGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndPLFragmentGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("PLFragmentGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStatGet(helpers.replica.services.dbinteract.DBFilters cFilters, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cFilters;
                System.IAsyncResult _result = base.BeginInvoke("StatGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndStatGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("StatGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMessagesGet(helpers.replica.services.dbinteract.DBFilters cFilters, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cFilters;
                System.IAsyncResult _result = base.BeginInvoke("MessagesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Message[] EndMessagesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Message[] _result = ((helpers.replica.services.dbinteract.Message[])(base.EndInvoke("MessagesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginWorkerProgressGet(ulong nWorkerInfoID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nWorkerInfoID;
                System.IAsyncResult _result = base.BeginInvoke("WorkerProgressGet", _args, callback, asyncState);
                return _result;
            }
            
            public double EndWorkerProgressGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("WorkerProgressGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExport(string sTemplate, helpers.replica.services.dbinteract.DBFilters cFilters, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sTemplate;
                _args[1] = cFilters;
                System.IAsyncResult _result = base.BeginInvoke("Export", _args, callback, asyncState);
                return _result;
            }
            
            public ulong EndExport(System.IAsyncResult result) {
                object[] _args = new object[0];
                ulong _result = ((ulong)(base.EndInvoke("Export", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginExportResultGet(ulong nWorkerInfoID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nWorkerInfoID;
                System.IAsyncResult _result = base.BeginInvoke("ExportResultGet", _args, callback, asyncState);
                return _result;
            }
            
            public string EndExportResultGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ExportResultGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRingtonesBindsGet(helpers.replica.services.dbinteract.RingtonesBindsGetRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("RingtonesBindsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.RingtonesBindsGetResponse EndRingtonesBindsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.RingtonesBindsGetResponse _result = ((helpers.replica.services.dbinteract.RingtonesBindsGetResponse)(base.EndInvoke("RingtonesBindsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFrequencyOfOccurrence(long nVideoTypeID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nVideoTypeID;
                System.IAsyncResult _result = base.BeginInvoke("FrequencyOfOccurrence", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndFrequencyOfOccurrence(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("FrequencyOfOccurrence", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGridGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GridGet", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGridGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GridGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGridSave(string sXML, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sXML;
                System.IAsyncResult _result = base.BeginInvoke("GridSave", _args, callback, asyncState);
                return _result;
            }
            
            public void EndGridSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("GridSave", _args, result);
            }
            
            public System.IAsyncResult BeginTransliterationGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("TransliterationGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.TransliterationPair[] EndTransliterationGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.TransliterationPair[] _result = ((helpers.replica.services.dbinteract.TransliterationPair[])(base.EndInvoke("TransliterationGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDateTimeNowGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DateTimeNowGet", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndDateTimeNowGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("DateTimeNowGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginErrorLogging(string sError, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sError;
                System.IAsyncResult _result = base.BeginInvoke("ErrorLogging", _args, callback, asyncState);
                return _result;
            }
            
            public void EndErrorLogging(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ErrorLogging", _args, result);
            }
            
            public System.IAsyncResult BeginKnownTypes(helpers.replica.services.dbinteract.DBFilter t1, helpers.replica.services.dbinteract.DBFiltersOperators t2, helpers.replica.services.dbinteract.IngestClip t3, helpers.replica.services.dbinteract.IngestAdvertisement t4, helpers.replica.services.dbinteract.IngestProgram t5, helpers.replica.services.dbinteract.IngestDesign t6, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = t1;
                _args[1] = t2;
                _args[2] = t3;
                _args[3] = t4;
                _args[4] = t5;
                _args[5] = t6;
                System.IAsyncResult _result = base.BeginInvoke("KnownTypes", _args, callback, asyncState);
                return _result;
            }
            
            public void EndKnownTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("KnownTypes", _args, result);
            }
            
            public System.IAsyncResult BeginUploadFileBegin(helpers.replica.services.dbinteract.UploadFileBeginRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadFileBegin", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.UploadFileBeginResponse EndUploadFileBegin(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.UploadFileBeginResponse _result = ((helpers.replica.services.dbinteract.UploadFileBeginResponse)(base.EndInvoke("UploadFileBegin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadFileContinue(helpers.replica.services.dbinteract.UploadFileContinueRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("UploadFileContinue", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.UploadFileContinueResponse EndUploadFileContinue(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.UploadFileContinueResponse _result = ((helpers.replica.services.dbinteract.UploadFileContinueResponse)(base.EndInvoke("UploadFileContinue", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUploadFileEnd(int nFileIndx, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nFileIndx;
                System.IAsyncResult _result = base.BeginInvoke("UploadFileEnd", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUploadFileEnd(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UploadFileEnd", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsThereAnyErrors(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("IsThereAnyErrors", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsThereAnyErrors(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsThereAnyErrors", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginErrorsClear(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ErrorsClear", _args, callback, asyncState);
                return _result;
            }
            
            public void EndErrorsClear(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ErrorsClear", _args, result);
            }
            
            public System.IAsyncResult BeginErrorsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ErrorsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.WebServiceError[] EndErrorsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.WebServiceError[] _result = ((helpers.replica.services.dbinteract.WebServiceError[])(base.EndInvoke("ErrorsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginErrorsAllGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ErrorsAllGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.WebServiceError[] EndErrorsAllGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.WebServiceError[] _result = ((helpers.replica.services.dbinteract.WebServiceError[])(base.EndInvoke("ErrorsAllGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginErrorLastGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ErrorLastGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.WebServiceError EndErrorLastGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.WebServiceError _result = ((helpers.replica.services.dbinteract.WebServiceError)(base.EndInvoke("ErrorLastGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogger_Notice(string sFrom, string sText, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sFrom;
                _args[1] = sText;
                System.IAsyncResult _result = base.BeginInvoke("Logger_Notice", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogger_Notice(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Logger_Notice", _args, result);
            }
            
            public System.IAsyncResult BeginLogger_Error(string sFrom, string sEx, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sFrom;
                _args[1] = sEx;
                System.IAsyncResult _result = base.BeginInvoke("Logger_Error", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLogger_Error(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Logger_Error", _args, result);
            }
            
            public System.IAsyncResult BeginInitSession(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("InitSession", _args, callback, asyncState);
                return _result;
            }
            
            public void EndInitSession(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("InitSession", _args, result);
            }
            
            public System.IAsyncResult BeginInit(string sName, string sPassword, string sClientVersion, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = sName;
                _args[1] = sPassword;
                _args[2] = sClientVersion;
                System.IAsyncResult _result = base.BeginInvoke("Init", _args, callback, asyncState);
                return _result;
            }
            
            public string EndInit(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Init", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAccessScopesGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AccessScopesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.AccessScope[] EndAccessScopesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.AccessScope[] _result = ((helpers.replica.services.dbinteract.AccessScope[])(base.EndInvoke("AccessScopesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginProfileGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ProfileGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Profile EndProfileGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Profile _result = ((helpers.replica.services.dbinteract.Profile)(base.EndInvoke("ProfileGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Ping", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPing(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Ping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAssetsRemove(helpers.replica.services.dbinteract.Asset[] aAssets, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aAssets;
                System.IAsyncResult _result = base.BeginInvoke("AssetsRemove", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.AlterString[] EndAssetsRemove(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.AlterString[] _result = ((helpers.replica.services.dbinteract.AlterString[])(base.EndInvoke("AssetsRemove", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAssetsGet(string sVideoTypeFilter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sVideoTypeFilter;
                System.IAsyncResult _result = base.BeginInvoke("AssetsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Asset[] EndAssetsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Asset[] _result = ((helpers.replica.services.dbinteract.Asset[])(base.EndInvoke("AssetsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginProgramsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ProgramsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Program[] EndProgramsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Program[] _result = ((helpers.replica.services.dbinteract.Program[])(base.EndInvoke("ProgramsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClipGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nAssetID;
                System.IAsyncResult _result = base.BeginInvoke("ClipGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Clip EndClipGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Clip _result = ((helpers.replica.services.dbinteract.Clip)(base.EndInvoke("ClipGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClipsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ClipsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Clip[] EndClipsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Clip[] _result = ((helpers.replica.services.dbinteract.Clip[])(base.EndInvoke("ClipsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvertisementGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nAssetID;
                System.IAsyncResult _result = base.BeginInvoke("AdvertisementGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Advertisement EndAdvertisementGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Advertisement _result = ((helpers.replica.services.dbinteract.Advertisement)(base.EndInvoke("AdvertisementGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvertisementsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("AdvertisementsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Asset[] EndAdvertisementsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Asset[] _result = ((helpers.replica.services.dbinteract.Asset[])(base.EndInvoke("AdvertisementsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDesignGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nAssetID;
                System.IAsyncResult _result = base.BeginInvoke("DesignGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Design EndDesignGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Design _result = ((helpers.replica.services.dbinteract.Design)(base.EndInvoke("DesignGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDesignsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DesignsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Asset[] EndDesignsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Asset[] _result = ((helpers.replica.services.dbinteract.Asset[])(base.EndInvoke("DesignsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAssetVideoTypeGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nAssetID;
                System.IAsyncResult _result = base.BeginInvoke("AssetVideoTypeGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair EndAssetVideoTypeGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair _result = ((helpers.replica.services.dbinteract.IdNamePair)(base.EndInvoke("AssetVideoTypeGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClassesGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ClassesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Class[] EndClassesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Class[] _result = ((helpers.replica.services.dbinteract.Class[])(base.EndInvoke("ClassesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginClassesSet(helpers.replica.services.dbinteract.Asset[] aAssets, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aAssets;
                System.IAsyncResult _result = base.BeginInvoke("ClassesSet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Asset[] EndClassesSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Asset[] _result = ((helpers.replica.services.dbinteract.Asset[])(base.EndInvoke("ClassesSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRotationsSet(helpers.replica.services.dbinteract.Clip[] aClips, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aClips;
                System.IAsyncResult _result = base.BeginInvoke("RotationsSet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Clip[] EndRotationsSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Clip[] _result = ((helpers.replica.services.dbinteract.Clip[])(base.EndInvoke("RotationsSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStatusesGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("StatusesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndStatusesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("StatusesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStatusesClearGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("StatusesClearGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndStatusesClearGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("StatusesClearGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChatInOutsGet(helpers.replica.services.dbinteract.Asset cAsset, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cAsset;
                System.IAsyncResult _result = base.BeginInvoke("ChatInOutsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.ChatInOut[] EndChatInOutsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.ChatInOut[] _result = ((helpers.replica.services.dbinteract.ChatInOut[])(base.EndInvoke("ChatInOutsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChatInOutsSave(helpers.replica.services.dbinteract.Asset cAsset, helpers.replica.services.dbinteract.ChatInOut[] aChatInOuts, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cAsset;
                _args[1] = aChatInOuts;
                System.IAsyncResult _result = base.BeginInvoke("ChatInOutsSave", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndChatInOutsSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ChatInOutsSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRingtoneAdd(helpers.replica.services.dbinteract.Clip cClip, int nRTCode, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cClip;
                _args[1] = nRTCode;
                System.IAsyncResult _result = base.BeginInvoke("RingtoneAdd", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRingtoneAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RingtoneAdd", _args, result);
            }
            
            public System.IAsyncResult BeginClipSave(helpers.replica.services.dbinteract.Clip cClip, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cClip;
                System.IAsyncResult _result = base.BeginInvoke("ClipSave", _args, callback, asyncState);
                return _result;
            }
            
            public long EndClipSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("ClipSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginVideoTypeGet(string sType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sType;
                System.IAsyncResult _result = base.BeginInvoke("VideoTypeGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair EndVideoTypeGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair _result = ((helpers.replica.services.dbinteract.IdNamePair)(base.EndInvoke("VideoTypeGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginVideoTypesGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("VideoTypesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndVideoTypesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("VideoTypesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginProgramGet(long nAssetID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nAssetID;
                System.IAsyncResult _result = base.BeginInvoke("ProgramGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Program EndProgramGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Program _result = ((helpers.replica.services.dbinteract.Program)(base.EndInvoke("ProgramGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAssetsSave(helpers.replica.services.dbinteract.Asset[] aAsset, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aAsset;
                System.IAsyncResult _result = base.BeginInvoke("AssetsSave", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.AlterString[] EndAssetsSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.AlterString[] _result = ((helpers.replica.services.dbinteract.AlterString[])(base.EndInvoke("AssetsSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAssetParametersToPlaylistSave(long nAssetID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nAssetID;
                System.IAsyncResult _result = base.BeginInvoke("AssetParametersToPlaylistSave", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAssetParametersToPlaylistSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AssetParametersToPlaylistSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginProgramSave(helpers.replica.services.dbinteract.Program cProgram, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cProgram;
                System.IAsyncResult _result = base.BeginInvoke("ProgramSave", _args, callback, asyncState);
                return _result;
            }
            
            public long EndProgramSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("ProgramSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAssetsParentAssign(helpers.replica.services.dbinteract.Asset[] aAsset, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aAsset;
                System.IAsyncResult _result = base.BeginInvoke("AssetsParentAssign", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAssetsParentAssign(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AssetsParentAssign", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvertisementSave(helpers.replica.services.dbinteract.Advertisement cAdvertisement, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cAdvertisement;
                System.IAsyncResult _result = base.BeginInvoke("AdvertisementSave", _args, callback, asyncState);
                return _result;
            }
            
            public long EndAdvertisementSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("AdvertisementSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDesignSave(helpers.replica.services.dbinteract.Design cDesign, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cDesign;
                System.IAsyncResult _result = base.BeginInvoke("DesignSave", _args, callback, asyncState);
                return _result;
            }
            
            public long EndDesignSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("DesignSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPersonSave(helpers.replica.services.dbinteract.Person cPerson, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPerson;
                System.IAsyncResult _result = base.BeginInvoke("PersonSave", _args, callback, asyncState);
                return _result;
            }
            
            public long EndPersonSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("PersonSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPersonTypeGet(string sPersonTypeFilter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sPersonTypeFilter;
                System.IAsyncResult _result = base.BeginInvoke("PersonTypeGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair EndPersonTypeGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair _result = ((helpers.replica.services.dbinteract.IdNamePair)(base.EndInvoke("PersonTypeGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPersonsRemove(helpers.replica.services.dbinteract.Person[] aPersons, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aPersons;
                System.IAsyncResult _result = base.BeginInvoke("PersonsRemove", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Person[] EndPersonsRemove(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Person[] _result = ((helpers.replica.services.dbinteract.Person[])(base.EndInvoke("PersonsRemove", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPersonsGet(string sPersonTypeFilter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sPersonTypeFilter;
                System.IAsyncResult _result = base.BeginInvoke("PersonsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Person[] EndPersonsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Person[] _result = ((helpers.replica.services.dbinteract.Person[])(base.EndInvoke("PersonsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginArtistsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ArtistsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Person[] EndArtistsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Person[] _result = ((helpers.replica.services.dbinteract.Person[])(base.EndInvoke("ArtistsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginArtistsLoad(long nAssetID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nAssetID;
                System.IAsyncResult _result = base.BeginInvoke("ArtistsLoad", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Person[] EndArtistsLoad(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Person[] _result = ((helpers.replica.services.dbinteract.Person[])(base.EndInvoke("ArtistsLoad", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStylesGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("StylesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndStylesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("StylesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStylesLoad(long nAssetID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nAssetID;
                System.IAsyncResult _result = base.BeginInvoke("StylesLoad", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndStylesLoad(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("StylesLoad", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRotationsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RotationsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndRotationsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("RotationsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPalettesGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("PalettesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndPalettesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("PalettesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSexGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SexGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndSexGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("SexGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSoundsGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("SoundsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndSoundsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("SoundsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCustomsLoad(helpers.replica.services.dbinteract.CustomsLoadRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("CustomsLoad", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.CustomsLoadResponse EndCustomsLoad(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.CustomsLoadResponse _result = ((helpers.replica.services.dbinteract.CustomsLoadResponse)(base.EndInvoke("CustomsLoad", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginArtistsCueNameGet(helpers.replica.services.dbinteract.MyInt[] aPersonIDs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aPersonIDs;
                System.IAsyncResult _result = base.BeginInvoke("ArtistsCueNameGet", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndArtistsCueNameGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("ArtistsCueNameGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFilesAgeGet(helpers.replica.services.dbinteract.FilesAgeGetRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("FilesAgeGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.FilesAgeGetResponse EndFilesAgeGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.FilesAgeGetResponse _result = ((helpers.replica.services.dbinteract.FilesAgeGetResponse)(base.EndInvoke("FilesAgeGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFilesAgeSet(helpers.replica.services.dbinteract.Asset cAsset, int nAge, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = cAsset;
                _args[1] = nAge;
                System.IAsyncResult _result = base.BeginInvoke("FilesAgeSet", _args, callback, asyncState);
                return _result;
            }
            
            public void EndFilesAgeSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("FilesAgeSet", _args, result);
            }
            
            public System.IAsyncResult BeginStoragesGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("StoragesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Storage[] EndStoragesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Storage[] _result = ((helpers.replica.services.dbinteract.Storage[])(base.EndInvoke("StoragesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFilesGet(long nStorageID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nStorageID;
                System.IAsyncResult _result = base.BeginInvoke("FilesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.File[] EndFilesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.File[] _result = ((helpers.replica.services.dbinteract.File[])(base.EndInvoke("FilesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFilesWithSourcesGet(long nStorageID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nStorageID;
                System.IAsyncResult _result = base.BeginInvoke("FilesWithSourcesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.File[] EndFilesWithSourcesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.File[] _result = ((helpers.replica.services.dbinteract.File[])(base.EndInvoke("FilesWithSourcesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFilesRemove(long[] aFileIDs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aFileIDs;
                System.IAsyncResult _result = base.BeginInvoke("FilesRemove", _args, callback, asyncState);
                return _result;
            }
            
            public void EndFilesRemove(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("FilesRemove", _args, result);
            }
            
            public System.IAsyncResult BeginFileAdditionalInfoGet(helpers.replica.services.dbinteract.File cFile, helpers.replica.services.dbinteract.RegisteredTable cRTStrings, helpers.replica.services.dbinteract.RegisteredTable cRTAssets, helpers.replica.services.dbinteract.RegisteredTable cRTDates, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = cFile;
                _args[1] = cRTStrings;
                _args[2] = cRTAssets;
                _args[3] = cRTDates;
                System.IAsyncResult _result = base.BeginInvoke("FileAdditionalInfoGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.File EndFileAdditionalInfoGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.File _result = ((helpers.replica.services.dbinteract.File)(base.EndInvoke("FileAdditionalInfoGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFileCheckIsInPlaylist(long nFileID, int nMinutes, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = nFileID;
                _args[1] = nMinutes;
                System.IAsyncResult _result = base.BeginInvoke("FileCheckIsInPlaylist", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.FileIsInPlaylist EndFileCheckIsInPlaylist(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.FileIsInPlaylist _result = ((helpers.replica.services.dbinteract.FileIsInPlaylist)(base.EndInvoke("FileCheckIsInPlaylist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFileDurationQuery(long nFileID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nFileID;
                System.IAsyncResult _result = base.BeginInvoke("FileDurationQuery", _args, callback, asyncState);
                return _result;
            }
            
            public long EndFileDurationQuery(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("FileDurationQuery", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCommandStatusGet(long nCommandsQueueID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nCommandsQueueID;
                System.IAsyncResult _result = base.BeginInvoke("CommandStatusGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair EndCommandStatusGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair _result = ((helpers.replica.services.dbinteract.IdNamePair)(base.EndInvoke("CommandStatusGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFramesQtyGet(long nCommandsQueueID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nCommandsQueueID;
                System.IAsyncResult _result = base.BeginInvoke("FramesQtyGet", _args, callback, asyncState);
                return _result;
            }
            
            public long EndFramesQtyGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("FramesQtyGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStorageFilesUnusedGet(long nStorageID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nStorageID;
                System.IAsyncResult _result = base.BeginInvoke("StorageFilesUnusedGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.File[] EndStorageFilesUnusedGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.File[] _result = ((helpers.replica.services.dbinteract.File[])(base.EndInvoke("StorageFilesUnusedGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFileIDsInStockGet(long[] aFileIDs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aFileIDs;
                System.IAsyncResult _result = base.BeginInvoke("FileIDsInStockGet", _args, callback, asyncState);
                return _result;
            }
            
            public long[] EndFileIDsInStockGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                long[] _result = ((long[])(base.EndInvoke("FileIDsInStockGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTSRItemsGet(string[] aFilenames, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aFilenames;
                System.IAsyncResult _result = base.BeginInvoke("TSRItemsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.TSRItem[] EndTSRItemsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.TSRItem[] _result = ((helpers.replica.services.dbinteract.TSRItem[])(base.EndInvoke("TSRItemsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIngestForReplacedFile(helpers.replica.services.dbinteract.File cFile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cFile;
                System.IAsyncResult _result = base.BeginInvoke("IngestForReplacedFile", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIngestForReplacedFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IngestForReplacedFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIngest(helpers.replica.services.dbinteract.Ingest cInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cInfo;
                System.IAsyncResult _result = base.BeginInvoke("Ingest", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.File EndIngest(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.File _result = ((helpers.replica.services.dbinteract.File)(base.EndInvoke("Ingest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsThereSameFile(string sFilename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sFilename;
                System.IAsyncResult _result = base.BeginInvoke("IsThereSameFile", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsThereSameFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsThereSameFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAreThereSameFiles(string[] sFilenames, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sFilenames;
                System.IAsyncResult _result = base.BeginInvoke("AreThereSameFiles", _args, callback, asyncState);
                return _result;
            }
            
            public string[] EndAreThereSameFiles(System.IAsyncResult result) {
                object[] _args = new object[0];
                string[] _result = ((string[])(base.EndInvoke("AreThereSameFiles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsThereSameCustomValue(string sName, string sValue, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sName;
                _args[1] = sValue;
                System.IAsyncResult _result = base.BeginInvoke("IsThereSameCustomValue", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Asset EndIsThereSameCustomValue(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Asset _result = ((helpers.replica.services.dbinteract.Asset)(base.EndInvoke("IsThereSameCustomValue", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsThereSameCustomValues(string sName, string[] sValues, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = sName;
                _args[1] = sValues;
                System.IAsyncResult _result = base.BeginInvoke("IsThereSameCustomValues", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Asset[] EndIsThereSameCustomValues(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Asset[] _result = ((helpers.replica.services.dbinteract.Asset[])(base.EndInvoke("IsThereSameCustomValues", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRegisteredTablesGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("RegisteredTablesGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.RegisteredTable[] EndRegisteredTablesGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.RegisteredTable[] _result = ((helpers.replica.services.dbinteract.RegisteredTable[])(base.EndInvoke("RegisteredTablesGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemsGet(helpers.replica.services.dbinteract.IdNamePair[] aStatuses, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aStatuses;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistItemsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("PlaylistItemsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemMinimumForImmediatePLGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemMinimumForImmediatePLGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem EndPlaylistItemMinimumForImmediatePLGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem _result = ((helpers.replica.services.dbinteract.PlaylistItem)(base.EndInvoke("PlaylistItemMinimumForImmediatePLGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemsArchGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dtBegin;
                _args[1] = dtEnd;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemsArchGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistItemsArchGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("PlaylistItemsArchGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemsPlanGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dtBegin;
                _args[1] = dtEnd;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemsPlanGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistItemsPlanGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("PlaylistItemsPlanGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemsAdvertsGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dtBegin;
                _args[1] = dtEnd;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemsAdvertsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistItemsAdvertsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("PlaylistItemsAdvertsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNearestAdvertsBlock(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("NearestAdvertsBlock", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndNearestAdvertsBlock(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("NearestAdvertsBlock", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemsDeleteSince(System.DateTime dtBegin, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = dtBegin;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemsDeleteSince", _args, callback, asyncState);
                return _result;
            }
            
            public int EndPlaylistItemsDeleteSince(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("PlaylistItemsDeleteSince", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemsDelete(helpers.replica.services.dbinteract.IdNamePair[] aIDs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aIDs;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemsDelete", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.IdNamePair[] EndPlaylistItemsDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.IdNamePair[] _result = ((helpers.replica.services.dbinteract.IdNamePair[])(base.EndInvoke("PlaylistItemsDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemsTimingsSet(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aPLIs;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemsTimingsSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPlaylistItemsTimingsSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PlaylistItemsTimingsSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemStartsSet(long nItemID, System.DateTime dtStartPlanned, System.DateTime dtOld, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = nItemID;
                _args[1] = dtStartPlanned;
                _args[2] = dtOld;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemStartsSet", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndPlaylistItemStartsSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("PlaylistItemStartsSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistRecalculateQuery(long nPLitemsID, ushort nHoursQty, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = nPLitemsID;
                _args[1] = nHoursQty;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistRecalculateQuery", _args, callback, asyncState);
                return _result;
            }
            
            public long EndPlaylistRecalculateQuery(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("PlaylistRecalculateQuery", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemAdd_ResultGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemAdd_ResultGet", _args, callback, asyncState);
                return _result;
            }
            
            public string EndPlaylistItemAdd_ResultGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("PlaylistItemAdd_ResultGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistItemsAddWorker(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aPLIs;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistItemsAddWorker", _args, callback, asyncState);
                return _result;
            }
            
            public void EndPlaylistItemsAddWorker(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("PlaylistItemsAddWorker", _args, result);
            }
            
            public System.IAsyncResult BeginComingUpGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ComingUpGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndComingUpGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("ComingUpGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistInsert(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = aAssets;
                _args[1] = cPLIPreceding;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistInsert", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistInsert(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("PlaylistInsert", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistInsertCopies(helpers.replica.services.dbinteract.Asset[] aAssets, helpers.replica.services.dbinteract.PlaylistItem cPLIPreceding, int nCopiesQty, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = aAssets;
                _args[1] = cPLIPreceding;
                _args[2] = nCopiesQty;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistInsertCopies", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistInsertCopies(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("PlaylistInsertCopies", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInsertInBlock(helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToAdd, helpers.replica.services.dbinteract.PlaylistItem[] aPLIsToMove, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = aPLIsToAdd;
                _args[1] = aPLIsToMove;
                System.IAsyncResult _result = base.BeginInvoke("InsertInBlock", _args, callback, asyncState);
                return _result;
            }
            
            public string EndInsertInBlock(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("InsertInBlock", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGroupMoving(helpers.replica.services.dbinteract.PlaylistItem[] aPLIs, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = aPLIs;
                System.IAsyncResult _result = base.BeginInvoke("GroupMoving", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGroupMoving(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GroupMoving", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPLIPropertiesSet(helpers.replica.services.dbinteract.PlaylistItem cPLI, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPLI;
                System.IAsyncResult _result = base.BeginInvoke("PLIPropertiesSet", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPLIPropertiesSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("PLIPropertiesSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistLastElementGet(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("PlaylistLastElementGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem EndPlaylistLastElementGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem _result = ((helpers.replica.services.dbinteract.PlaylistItem)(base.EndInvoke("PlaylistLastElementGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginBeforeAddCheckRange(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dtBegin;
                _args[1] = dtEnd;
                System.IAsyncResult _result = base.BeginInvoke("BeforeAddCheckRange", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndBeforeAddCheckRange(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("BeforeAddCheckRange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvancedPlaylistsGet(System.DateTime dtBegin, System.DateTime dtEnd, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dtBegin;
                _args[1] = dtEnd;
                System.IAsyncResult _result = base.BeginInvoke("AdvancedPlaylistsGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Playlist[] EndAdvancedPlaylistsGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Playlist[] _result = ((helpers.replica.services.dbinteract.Playlist[])(base.EndInvoke("AdvancedPlaylistsGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvancedPlaylistGet(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPL;
                System.IAsyncResult _result = base.BeginInvoke("AdvancedPlaylistGet", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.Playlist EndAdvancedPlaylistGet(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.Playlist _result = ((helpers.replica.services.dbinteract.Playlist)(base.EndInvoke("AdvancedPlaylistGet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvancedPlaylistAddReplace(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPL;
                System.IAsyncResult _result = base.BeginInvoke("AdvancedPlaylistAddReplace", _args, callback, asyncState);
                return _result;
            }
            
            public long EndAdvancedPlaylistAddReplace(System.IAsyncResult result) {
                object[] _args = new object[0];
                long _result = ((long)(base.EndInvoke("AdvancedPlaylistAddReplace", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvancedPlaylistDelete(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPL;
                System.IAsyncResult _result = base.BeginInvoke("AdvancedPlaylistDelete", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAdvancedPlaylistDelete(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AdvancedPlaylistDelete", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvancedPlaylistRename(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPL;
                System.IAsyncResult _result = base.BeginInvoke("AdvancedPlaylistRename", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAdvancedPlaylistRename(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AdvancedPlaylistRename", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvancedPlaylistStart(helpers.replica.services.dbinteract.Playlist cPL, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPL;
                System.IAsyncResult _result = base.BeginInvoke("AdvancedPlaylistStart", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAdvancedPlaylistStart(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AdvancedPlaylistStart", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdvancedPlaylistItemSave(helpers.replica.services.dbinteract.PluginPlaylistItem cPLI, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = cPLI;
                System.IAsyncResult _result = base.BeginInvoke("AdvancedPlaylistItemSave", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAdvancedPlaylistItemSave(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AdvancedPlaylistItemSave", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPowerGoldFileParse(string sFile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sFile;
                System.IAsyncResult _result = base.BeginInvoke("PowerGoldFileParse", _args, callback, asyncState);
                return _result;
            }
            
            public int EndPowerGoldFileParse(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("PowerGoldFileParse", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginVideoInternationalFileParse(string sFile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sFile;
                System.IAsyncResult _result = base.BeginInvoke("VideoInternationalFileParse", _args, callback, asyncState);
                return _result;
            }
            
            public int EndVideoInternationalFileParse(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("VideoInternationalFileParse", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDesignFileParse(string sFile, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = sFile;
                System.IAsyncResult _result = base.BeginInvoke("DesignFileParse", _args, callback, asyncState);
                return _result;
            }
            
            public int EndDesignFileParse(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("DesignFileParse", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlaylistsMerge(int nPGAssetsHandle, int nVIAssetsHandle, System.DateTime dtAdvertisementBind, int nDesignAssetsHandle, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = nPGAssetsHandle;
                _args[1] = nVIAssetsHandle;
                _args[2] = dtAdvertisementBind;
                _args[3] = nDesignAssetsHandle;
                System.IAsyncResult _result = base.BeginInvoke("PlaylistsMerge", _args, callback, asyncState);
                return _result;
            }
            
            public helpers.replica.services.dbinteract.PlaylistItem[] EndPlaylistsMerge(System.IAsyncResult result) {
                object[] _args = new object[0];
                helpers.replica.services.dbinteract.PlaylistItem[] _result = ((helpers.replica.services.dbinteract.PlaylistItem[])(base.EndInvoke("PlaylistsMerge", _args, result)));
                return _result;
            }
        }
    }
}
