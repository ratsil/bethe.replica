using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using System.Windows.Navigation;
using System.Windows.Data;

using controls.childs.sl;
using replica.sl.services.dbinteract;
using controls.sl;
using controls.extensions.sl;
using helpers.sl;
using helpers.replica.sl;
using helpers.extensions;

namespace replica.sl
{
    public partial class playlist : Page
    {
		string sPROBA_ERR = ""; //-------PROBA
        private Progress _dlgProgress = new Progress();
        private DBInteract _cDBI;
        private List<PlaylistItemSL> _aPlayListItemsPlanned;
        private int _nPlannedRowHeight = 21;
        private int _nArchievedRowHeight = 21;
        private int _nOnAirRowHeight = 21;
        private System.Windows.Threading.DispatcherTimer _cTimerForCommandResult = null;
		private System.Windows.Threading.DispatcherTimer _cTimerForPLAddResult = null;
		//private int nTimeoutForAddResult;
        private DateTime _dtCommandBegin;
		private DateTime _dtPLImportTimeout;
        private PlaylistItemSL _cPlayListItemCurrent;
        private string _sPlannedDelete_Header;
        private MsgBox _dlgMsg = new MsgBox();
        private Button _btnActivePlannedFilter;
        private PlaylistTimer _cPLTimer;
        public playlist()
        {
            InitializeComponent();
            Language = System.Windows.Markup.XmlLanguage.GetLanguage(System.Globalization.CultureInfo.CurrentCulture.Name);

            _cDBI = new DBInteract();
            _cDBI.PlaylistItemsGetCompleted += new EventHandler<PlaylistItemsGetCompletedEventArgs>(_cDBI_PlaylistItemsGetCompleted);
            _cDBI.PlaylistItemsArchGetCompleted += new EventHandler<PlaylistItemsArchGetCompletedEventArgs>(_cDBI_PlaylistItemsArchGetCompleted);
            _cDBI.PlaylistItemsPlanGetCompleted += new EventHandler<PlaylistItemsPlanGetCompletedEventArgs>(_cDBI_PlaylistItemsPlanGetCompleted);
            _cDBI.PlaylistItemsDeleteCompleted += new EventHandler<PlaylistItemsDeleteCompletedEventArgs>(_cDBI_PlaylistItemsDeleteCompleted);
            _cDBI.PlaylistItemStartsSetCompleted += new EventHandler<PlaylistItemStartsSetCompletedEventArgs>(_cDBI_PlaylistItemStartsSetCompleted);
			_cDBI.PlaylistItemsAddCompleted += new EventHandler<System.ComponentModel.AsyncCompletedEventArgs>(_cDBI_PlaylistItemsAddCompleted);
            _cDBI.PlaylistRecalculateQueryCompleted += new EventHandler<PlaylistRecalculateQueryCompletedEventArgs>(_cDBI_PlaylistRecalculateQueryCompleted);
            _cDBI.CommandStatusGetCompleted += new EventHandler<CommandStatusGetCompletedEventArgs>(_cDBI_CommandStatusGetCompleted);
            _cDBI.PlaylistItemsDeleteSinceCompleted += new EventHandler<PlaylistItemsDeleteSinceCompletedEventArgs>(_cDBI_PlaylistItemsDeleteSinceCompleted);
            _cDBI.AssetsInseartIntoPlaylistCompleted += new EventHandler<AssetsInseartIntoPlaylistCompletedEventArgs>(_cDBI_AssetsInseartIntoPlaylistCompleted);
			_cDBI.PlaylistItemAdd_ResultGetCompleted += new EventHandler<PlaylistItemAdd_ResultGetCompletedEventArgs>(_cDBI_PlaylistItemAdd_ResultGetCompleted);
			_cDBI.GroupMovingCompleted += new EventHandler<GroupMovingCompletedEventArgs>(_cDBI_GroupMovingCompleted);
            _ui_dgOnAir.LoadingRow += new EventHandler<DataGridRowEventArgs>(_ui_dgOnAir_LoadingRow);
            _ui_dgPlanned.LoadingRow += new EventHandler<DataGridRowEventArgs>(_ui_dgPlanned_LoadingRow);
            _ui_dgArchived.LoadingRow += new EventHandler<DataGridRowEventArgs>(_ui_dgArchived_LoadingRow);
            _ui_rpAir.OpenButtonPressed += new ReducePanel.OpenButtonPressedHandler(_ui_rpAir_OpenButtonPressed);
            _ui_rpPlanned.OpenButtonPressed += new ReducePanel.OpenButtonPressedHandler(_ui_rpPlanned_OpenButtonPressed);
            _ui_rpArchived.OpenButtonPressed += new ReducePanel.OpenButtonPressedHandler(_ui_rpArchived_OpenButtonPressed);

            _ui_nudDaysQty.Value = 3;
			_ui_rpPlanned.IsOpen = true;
            _ui_rpAir.IsOpen = false;
            _ui_rpArchived.IsOpen = false;
            _dlgProgress.Show();

            _ui_lblCurrentItem.Content = null;
            _ui_lblCurrentItemsdtStart.Content = null;
            _ui_lblCurrentItemsType.Content = null;
            _ui_lblCurrentItemLeft.Content = null;
            _ui_lblNextItem.Content = null;
            _ui_lblNextItemsdtStert.Content = null;
            _ui_lblNextItemsType.Content = null;

            App.Current.Host.Content.Resized += new EventHandler(BrowserWindow_Resized);
            _ui_svMainViewer.MaxHeight = UI_Sizes.GetPossibleHeightOfPlaylistScrollViewer();
			_ui_dgPlanned.MaxHeight = UI_Sizes.GetPossibleHeightOfElementInPlaylistView_Single();
			_ui_dgOnAir.MaxHeight = UI_Sizes.GetPossibleHeightOfElementInPlaylistView_Single();
			_ui_dgArchived.MaxHeight = UI_Sizes.GetPossibleHeightOfElementInPlaylistView_Single();
            //_cDBI.DBCredentialsSetAsync("replica_client");
            Init();
        }

        void BrowserWindow_Resized(object sender, EventArgs e)
        {
            _ui_svMainViewer.MaxHeight = UI_Sizes.GetPossibleHeightOfPlaylistScrollViewer();
			if (!(_ui_rpPlanned.IsOpen && _ui_rpAir.IsOpen) && !(_ui_rpPlanned.IsOpen && _ui_rpArchived.IsOpen) && !(_ui_rpArchived.IsOpen && _ui_rpAir.IsOpen))
			{
				_ui_dgPlanned.MaxHeight = UI_Sizes.GetPossibleHeightOfElementInPlaylistView_Single();
				_ui_dgOnAir.MaxHeight = UI_Sizes.GetPossibleHeightOfElementInPlaylistView_Single();
				_ui_dgArchived.MaxHeight = UI_Sizes.GetPossibleHeightOfElementInPlaylistView_Single();
			}
			else
			{
				_ui_dgPlanned.MaxHeight = UI_Sizes.GetPossibleHeightOfElementInPlaylistView_Default();
				_ui_dgOnAir.MaxHeight = UI_Sizes.GetPossibleHeightOfElementInPlaylistView_Default();
				_ui_dgArchived.MaxHeight = UI_Sizes.GetPossibleHeightOfElementInPlaylistView_Default();
			}
        }
        private class PlaylistTimer
        {
            public enum Status
            {
                stopped,
                started,
                error
            }
            private DBInteract _cDBI;
            System.Windows.Threading.DispatcherTimer _cTimerForComingUp;
            System.Windows.Threading.DispatcherTimer _cTimerForLablesRefresh;
            Label _lblCurrentName, _lblCurrentStart, _lblCurrentFileStorageName, _lblCurrentLeft, _lblNextName, _lblNextStart, _lblNextFileStorageName;
            Status _eStatus;
            public Status eStatus
            { get { return _eStatus; } }
            DateTime _dtCurrentStop;
            public PlaylistTimer(DBInteract cDBI)
            {
                _cDBI = cDBI;
                _eStatus = Status.stopped;
                _cDBI.ComingUpGetCompleted += new EventHandler<ComingUpGetCompletedEventArgs>(_cDBI_ComingUpGetCompleted);
                _cTimerForComingUp = new System.Windows.Threading.DispatcherTimer();
                _cTimerForComingUp.Tick += new EventHandler(ComingUpGet);
                _cTimerForComingUp.Interval = new TimeSpan(0, 0, 20);
                _cTimerForLablesRefresh = new System.Windows.Threading.DispatcherTimer();
                _cTimerForLablesRefresh.Tick += new EventHandler(LablesRefresh);
                _cTimerForLablesRefresh.Interval = new TimeSpan(0, 0, 1);

            }
            public void Start(Label lblCurrentName, Label lblCurrentStart, Label lblCurrentType, Label lblCurrentLeft, Label lblNextName, Label lblNextStart, Label lblNextType)
            {
                _lblCurrentName = lblCurrentName;
                _lblCurrentStart = lblCurrentStart;
                _lblCurrentFileStorageName = lblCurrentType;
                _lblCurrentLeft = lblCurrentLeft;
                _lblNextName = lblNextName;
                _lblNextStart = lblNextStart;
                _lblNextFileStorageName = lblNextType;
                _cTimerForLablesRefresh.Start();
                _eStatus = Status.started;
            }
            void _cDBI_ComingUpGetCompleted(object sender, ComingUpGetCompletedEventArgs e)
            {
				try
				{
					if (null != e.Result && 2 == e.Result.Length)
					{
						PlaylistItemSL[] aPLIs = PlaylistItemSL.GetArrayOfPlaylistItemSLs(e.Result);
						_lblCurrentName.Content = aPLIs[0].sName;
						_lblCurrentStart.Content = aPLIs[0].sdtStart;
						_lblCurrentFileStorageName.Content = aPLIs[0].stFile.stStorage.sName;
						_lblNextName.Content = aPLIs[1].sName;
						_lblNextStart.Content = aPLIs[1].sdtStart;
						_lblNextFileStorageName.Content = aPLIs[1].stFile.stStorage.sName;
						if (DateTime.MaxValue == aPLIs[0].dtStartReal)
							_lblCurrentLeft.Content = "error";
						else
						{
							int nPast = (int)DateTime.Now.Subtract(aPLIs[0].dtStartReal).TotalMilliseconds / 40;
							_dtCurrentStop = aPLIs[0].dtStartReal.AddMilliseconds(aPLIs[0].nDuration * 40);
							_lblNextStart.Content = (string)_lblNextStart.Content + "_dtCurrentStop";
							_lblCurrentLeft.Content = (aPLIs[0].nDuration - nPast).ToFramesString(false, false, true, true);
						}
						if (!_cTimerForLablesRefresh.IsEnabled)
							_cTimerForLablesRefresh.Start();
					}
				}
				catch { }
            }
            private void ComingUpGet(object s, EventArgs args)
            {
                _cDBI.ComingUpGetAsync();
            }
            private void LablesRefresh(object s, EventArgs args)
            {
                int nLeft = DateTime.MinValue == _dtCurrentStop ? 0 : (int)_dtCurrentStop.Subtract(DateTime.Now).TotalMilliseconds / 40;
                if (250 > nLeft && _cTimerForComingUp.IsEnabled)
                    _cTimerForComingUp.Stop();
                if (250 < nLeft && !_cTimerForComingUp.IsEnabled)
                    _cTimerForComingUp.Start();
                if (1 > nLeft)
                {
                    _cTimerForLablesRefresh.Stop();
                    ComingUpGet(null, null);
                }
                else
                    _lblCurrentLeft.Content = (nLeft).ToFramesString(false, false, true, true);
            }
        }
		#region event handlers
        #region UI
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
        }
        private void ArchivedToday_Click(object sender, RoutedEventArgs e)
        {
            _dlgProgress.Show();
            DateTime dtToday = DateTime.Today;
            DateTime dtTomorrow = dtToday.AddDays(1).AddMinutes(7);
            _cDBI.PlaylistItemsArchGetAsync(dtToday, dtTomorrow);
        }
        private void ArchivedYesterday_Click(object sender, RoutedEventArgs e)
        {
            _dlgProgress.Show();
            DateTime dtToday = DateTime.Today;
            DateTime dtYesterday = dtToday.AddDays(-1);
            _cDBI.PlaylistItemsArchGetAsync(dtYesterday, dtToday.AddMinutes(7));
        }
        private void _ui_btnOnAirRefresh_Click(object sender, RoutedEventArgs e)
        {
            _dlgProgress.Show();
            IdNamePair[] cNP = new IdNamePair[3];
            cNP[0] = new IdNamePair(); cNP[0].nID = 2; cNP[0].sName = "queued";
            cNP[1] = new IdNamePair(); cNP[1].nID = 3; cNP[1].sName = "prepared";
            cNP[2] = new IdNamePair(); cNP[2].nID = 4; cNP[2].sName = "onair";
            _cDBI.PlaylistItemsGetAsync(cNP);
        }
        private void Planned_Click(object sender, RoutedEventArgs e)
        {
            _dlgProgress.Show();
            DateTime dtDay = DateTime.MinValue, dtNextDay;
            _btnActivePlannedFilter = (Button)sender;
            switch (((Button)sender).Name)
            {
                case "_ui_btnToday":
                    dtDay = DateTime.Today;
                    break;
                case "_ui_btnTomorrow":
                    dtDay = DateTime.Today.AddDays(1);
                    break;
                case "_ui_btnTheDayAfterTomorrow":
                    dtDay = DateTime.Today.AddDays(2);
                    break;
                case "_ui_btnChooseDate":
                    dtDay = DateTime.Today.AddDays(_ui_nudDaysQty.Value);
                    break;
            }
            dtNextDay = dtDay.AddDays(1).AddMinutes(6); // для захлестика....
            _cDBI.PlaylistItemsPlanGetAsync(dtDay, dtNextDay);
        }
        private void _ui_nudDaysQty_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (null == _ui_nudDaysQty)
                return;
			_ui_lblDays.Content = SmallHelpers.GetWordInCorrectNominative(Convert.ToInt32(_ui_nudDaysQty.Value), "день:", "дней:", "дня:");
        }
        private void _ui_btnImport_Click(object sender, RoutedEventArgs e)
        {
			controls.childs.replica.sl.PlaylistImport dlgPLImport = new controls.childs.replica.sl.PlaylistImport();
            dlgPLImport.Show();
			dlgPLImport.Closed += new EventHandler(dlgPLImport_Closed);
        }
		void dlgPLImport_Closed(object sender, EventArgs e)
		{
			controls.childs.replica.sl.PlaylistImport dlgPLImport = (controls.childs.replica.sl.PlaylistImport)sender;
			if (dlgPLImport.DialogResult.HasValue && dlgPLImport.DialogResult.Value)
			{
				if (_ui_lblPLImportText.Visibility == Visibility.Visible)
				{
					_ui_lblPLImportText.Visibility = Visibility.Collapsed;
					_ui_pbPLImportProgress.Visibility = Visibility.Visible;
					_cDBI.PlaylistItemsAddAsync(dlgPLImport.aPlaylistItems.Where(row => !row.bPlug).ToArray());
				}
			}
		}
        private void _ui_dgPlanned_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int i = _ui_dgPlanned.SelectedItems.Count;
            if (0 == i)
                _ui_lblPlannedSelected.Content = " ";
            else
                _ui_lblPlannedSelected.Content = i.ToString();

			if (1 == i)
				_cPlayListItemCurrent = (PlaylistItemSL)_ui_dgPlanned.SelectedItem;
			else
				_cPlayListItemCurrent = null;

			if (0 < _ui_nudHoursQty.Value && 1 == i && DateTime.MaxValue > _cPlayListItemCurrent.dtTimingsUpdate || 0 == _ui_nudHoursQty.Value)
				_ui_btnRecalculatePart.IsEnabled = true;
			else
				_ui_btnRecalculatePart.IsEnabled = false;
        }
		private void _ui_nudHoursQty_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
		{
			if (null == _ui_dgPlanned)
				return;
			int i = _ui_dgPlanned.SelectedItems.Count;
			if (0 < _ui_nudHoursQty.Value && 1 == i || 0 == _ui_nudHoursQty.Value)
				_ui_btnRecalculatePart.IsEnabled = true;
			else
				_ui_btnRecalculatePart.IsEnabled = false;
		}
        private void _ui_rpAir_OpenButtonPressed()
        {
            if (null == _ui_dgOnAir.ItemsSource || 0 == ((PlaylistItemSL[])_ui_dgOnAir.ItemsSource).Count())
                _ui_btnOnAirRefresh_Click(null, null);
        }
        private void _ui_rpPlanned_OpenButtonPressed()
        {
            if (null == _ui_dgPlanned.ItemsSource || 0 == ((List<PlaylistItemSL>)_ui_dgPlanned.ItemsSource).Count())
                Planned_Click(_ui_btnToday, null);
        }
        private void _ui_rpArchived_OpenButtonPressed()
        {
            if (null == _ui_dgArchived.ItemsSource || 0 == ((PlaylistItemSL[])_ui_dgArchived.ItemsSource).Count())
                ArchivedToday_Click(null, null);
        }
        private void _ui_btnRecalculate_Click(object sender, RoutedEventArgs e)
		{
			try
			{
				Button ui_btnRecalc = ((Button)sender);
				if (_ui_lblPLRecalcPartText.Visibility == Visibility.Visible)
				{
					_ui_lblPLRecalcPartText.Visibility = Visibility.Collapsed;
					_ui_pbPLRecalcPartProgress.Visibility = Visibility.Visible;
					int nHrsQty = Convert.ToInt32(_ui_nudHoursQty.Value);
					int nID = null == _cPlayListItemCurrent ? -1 : _cPlayListItemCurrent.nID;
					MsgBox dlgReculculate;
					if (0 == nHrsQty)
						dlgReculculate = new MsgBox("Пересчитать весь плей-лист?", "Внимание!", MsgBox.MsgBoxButton.OKCancel);
					else if (0 < nHrsQty && 0 < nID)
						dlgReculculate = new MsgBox("Пересчитать плей-лист на " + nHrsQty + SmallHelpers.GetWordInCorrectNominative(Convert.ToInt32(_ui_nudHoursQty.Value), " час", " часов", " часа") + " начиная с \"" + _cPlayListItemCurrent.sName+"\"?", "Внимание!", MsgBox.MsgBoxButton.OKCancel);
					else
					{
						_dlgMsg.Show("Пересчет невозможен", "Ошибка!", MsgBox.MsgBoxButton.OK);
						return;
					}
					dlgReculculate.Closed += new EventHandler(dlgReculculate_Closed);
					dlgReculculate.Tag = new int[2] { nID, nHrsQty };
					dlgReculculate.Show();
				}
			}
			catch { }
        }
		void dlgReculculate_Closed(object sender, EventArgs e)
		{
			MsgBox dlg = (MsgBox)sender;
			if (dlg.DialogResult == true && dlg.enMsgResult == MsgBox.MsgBoxButton.OK)
			{
				int[] aParams = (int[])dlg.Tag;
				_cDBI.PlaylistRecalculateQueryAsync(aParams[0], (ushort)aParams[1]);
			}
			else
				ResetButtonPLRecalc();
		}

        void MarkTypeCell(DataGridRow row, DataGrid dg, PlaylistItemSL cPLI)
        {
            if (null != row && null != dg && null != cPLI)
            {
                TextBox tb = null;
				tb = ((TextBox)dg.Columns[7].GetCellContent(row));
				if (cPLI.bIsInserted)
					tb.Background = Coloring.Playlist.cTypeColumn_InsertedBackgr;
				else
					switch (cPLI.stFile.stStorage.sName)
					{
						case "Клипы":
							tb.Background = Coloring.Playlist.cTypeColumn_ClipsBackgr;
							break;
						case "Реклама":
							tb.Background = Coloring.Playlist.cTypeColumn_AdvertsBackgr;
							break;
						case "Оформление":
							tb.Background = Coloring.Playlist.cTypeColumn_DesignBackgr;
							break;
						case "Программы":
							tb.Background = Coloring.Playlist.cTypeColumn_ProgramsBackgr;
							break;
						default:
							tb.Background = Coloring.Notifications.cTextBoxError;
							break;
					}
			}
		}
        void _ui_dgOnAir_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            var item = (PlaylistItemSL)e.Row.DataContext;
            if ("queued" == item.cStatus.sName)
                e.Row.Background = Coloring.Playlist.cRow_OnAirQueuedBackgr;
            else if ("prepared" == item.cStatus.sName)
                e.Row.Background = Coloring.Playlist.cRow_OnAirPreparedBackgr;
            else if ("onair" == item.cStatus.sName)
				e.Row.Background = Coloring.Playlist.cRow_OnAirOnAirBackgr;
            else if (item.bCached)
				e.Row.Background = Coloring.Playlist.cRow_CachedBackgr;
            MarkTypeCell(e.Row, _ui_dgOnAir, item);
        }
        private void _ui_dgPlanned_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            var item = (PlaylistItemSL)e.Row.DataContext;
			if (item.bIsInserted)
				e.Row.Foreground = Coloring.Playlist.cRow_PlannedInsertedForegr;
			else
				e.Row.Foreground = Coloring.Playlist.cRow_PlannedNormalForegr;

            if (item.bCached)
				e.Row.Background = Coloring.Playlist.cRow_CachedBackgr;
			else if ("Реклама" == item.stFile.stStorage.sName)
				e.Row.Background = Coloring.Playlist.cRow_PlannedAdvBackgr;
			else if ("Клипы" == item.stFile.stStorage.sName)
				e.Row.Background = Coloring.Playlist.cRow_PlannedClipBackgr;
			else if ("Оформление" == item.stFile.stStorage.sName)
				e.Row.Background = Coloring.Playlist.cRow_PlannedDesignBackgr;
			else if ("Программы" == item.stFile.stStorage.sName)
				e.Row.Background = Coloring.Playlist.cRow_PlannedProgramBackgr;
            else
				e.Row.Background = Coloring.Playlist.cRow_PlannedOtherBackgr;

            MarkTypeCell(e.Row, _ui_dgPlanned, item);
        }
        void _ui_dgArchived_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            var item = (PlaylistItemSL)e.Row.DataContext;
            MarkTypeCell(e.Row, _ui_dgArchived, item);
        }
        private void _ui_btnAdd_Click(object sender, RoutedEventArgs e)
        {
			if (null == _ui_dgPlanned.SelectedItem || 1 > _ui_dgPlanned.SelectedItems.Count)
			{
				_dlgMsg.Show("Вначале выберите элемент плей-листа после которого хотите вставить ассет(ы)", "Вставка ассета", MsgBox.MsgBoxButton.OK);
				_dlgProgress.Show();
				_dlgProgress.Close();
			}
			else if (1 < _ui_dgPlanned.SelectedItems.Count)
			{
				_dlgMsg.Show("Выберите ЕДИНСТВЕННЫЙ элемент плей-листа после которого хотите вставить ассет(ы)", "Вставка ассета", MsgBox.MsgBoxButton.OK);
				_dlgProgress.Show();
				_dlgProgress.Close();
			}
			else
			{
				_cPlayListItemCurrent = (PlaylistItemSL)_ui_dgPlanned.SelectedItem;
				controls.childs.replica.sl.AssetsChooser dlgAssetsChooser = new controls.childs.replica.sl.AssetsChooser();
				dlgAssetsChooser.Closed += new EventHandler(dlgAssetsChooser_Closed);
				dlgAssetsChooser.Show();
			}
        }
        void dlgAssetsChooser_Closed(object sender, EventArgs e)
        {
			List<AssetSL> aAss = ((controls.childs.replica.sl.AssetsChooser)sender).aSelectedAssets;

            if (0 < aAss.Count)
            {
                _dlgProgress.Show();
                _cDBI.AssetsInseartIntoPlaylistAsync(AssetSL.GetArrayOfBases(aAss.ToArray()), _cPlayListItemCurrent.nID, aAss);
            }
        }
        #region контекстное меню
        private void _ui_dgPlanned_MouseRightButtonDown(object sender, MouseButtonEventArgs e)
        {
            try
            {
                _cPlayListItemCurrent = (PlaylistItemSL)((FrameworkElement)(((RoutedEventArgs)(e)).OriginalSource)).DataContext;
				if (null != _ui_dgPlanned.SelectedItems && 1 >= _ui_dgPlanned.SelectedItems.Count)
					_ui_dgPlanned.SelectedItem = _cPlayListItemCurrent;
            }
            catch
            {
                _cPlayListItemCurrent = null;
            }
        }
        private void _ui_cmPlanned_Opened(object sender, RoutedEventArgs e)
        {
            if (null != _cPlayListItemCurrent)
            {
                int nSelectedItems = _ui_dgPlanned.SelectedItems.Count == 0 ? 1 : _ui_dgPlanned.SelectedItems.Count;
                string sS = "";
                if (1 == nSelectedItems)
                {
                    sS = "  {" + _cPlayListItemCurrent.sName +"}";
                    _ui_cmPlannedMove.IsEnabled = true;
                }
                else if (nSelectedItems < 10) sS = nSelectedItems.ToString() + " items!";
                else if (nSelectedItems < 20) sS = nSelectedItems.ToString() + " Items!!!!";
                else if (_aPlayListItemsPlanned.Count == nSelectedItems) sS = "ALL " + nSelectedItems.ToString() + " ITEMS !!!!!!!!";
                else sS = nSelectedItems.ToString() + " ITEMS !!!!!!!!";
                _sPlannedDelete_Header = _ui_cmPlannedDelete.Header.ToString();
				_ui_cmPlannedDelete.Header = _sPlannedDelete_Header + " " + sS;
                _ui_cmPlannedDelete.IsEnabled = true;
                _ui_cmPlannedDeleteSince.IsEnabled = true;
				if (!_cPlayListItemCurrent.bCached && !_cPlayListItemCurrent.bIsInserted)
					_ui_cmPlannedAdd.IsEnabled = true;
				if (0 < _ui_nudHoursQty.Value && 1 == nSelectedItems && DateTime.MaxValue > _cPlayListItemCurrent.dtTimingsUpdate || 0 == _ui_nudHoursQty.Value)
					_ui_cmPlannedRecalculatePart.IsEnabled = true;
				if (0 < nSelectedItems)
				{
					_ui_cmPlannedGroupMoving.IsEnabled = true;
					if (1 == nSelectedItems)
						_ui_cmPlannedGroupMoving.Header = "изменение типа старта элемента";
					else
						_ui_cmPlannedGroupMoving.Header = "групповое перемещение";
				}
                _ui_cmPlannedDelete.Refresh();
                _ui_cmPlannedDeleteSince.Refresh();
				_ui_cmPlannedAdd.Refresh();
				_ui_cmPlannedRecalculatePart.Refresh();
				_ui_cmPlannedGroupMoving.Refresh();
            }
            if (null != _btnActivePlannedFilter)
            {
                _ui_cmPlannedRefresh.IsEnabled = true;
                _ui_cmPlannedRefresh.Refresh();
            }
        }
        private void _ui_cmPlanned_Closed(object sender, RoutedEventArgs e)
        {
            _ui_cmPlannedDelete.Header = _sPlannedDelete_Header;
            _ui_cmPlannedDelete.IsEnabled = false;
			_ui_cmPlannedDelete.Refresh();
            _ui_cmPlannedDeleteSince.IsEnabled = false;
            _ui_cmPlannedRefresh.IsEnabled = false;
			_ui_cmPlannedRefresh.Refresh();
            _ui_cmPlannedAdd.IsEnabled = false;
			_ui_cmPlannedRecalculatePart.IsEnabled = false;
			_ui_cmPlannedGroupMoving.IsEnabled = false;
			_ui_cmPlannedGroupMoving.Header = "групповое перемещение";
			_ui_cmPlannedGroupMoving.Refresh();
			
            
            _ui_cmPlannedDeleteSince.Refresh();
            _ui_cmPlannedAdd.Refresh();
			_ui_cmPlannedRecalculatePart.Refresh();
        }
        private void _ui_cmPlanned_Delete(object sender, RoutedEventArgs e)
        {
            if (1 > _ui_dgPlanned.SelectedItems.Count && null == _cPlayListItemCurrent)
                return;
            _dlgProgress.Show();
            List<IdNamePair> aSelected = new List<IdNamePair>();
            if (0 < _ui_dgPlanned.SelectedItems.Count)
            {
                foreach (PlaylistItemSL cPLI in _ui_dgPlanned.SelectedItems)
                {
                    aSelected.Add(new IdNamePair() { nID = cPLI.nID, sName = cPLI.sName });
                }
            }
            else
                aSelected.Add(new IdNamePair() { nID = _cPlayListItemCurrent.nID, sName = _cPlayListItemCurrent.sName });
            _cDBI.PlaylistItemsDeleteAsync(aSelected.ToArray(), aSelected);
        }
        private void _ui_cmPlannedDeleteSince_Click(object sender, RoutedEventArgs e)
        {
            if (1 > _ui_dgPlanned.SelectedItems.Count && null == _cPlayListItemCurrent)
                return;
            _dlgProgress.Show();
            _cDBI.PlaylistItemsDeleteSinceAsync(_cPlayListItemCurrent.dtStartPlanned.Subtract(new TimeSpan(0, 0, 2))); // -2секунды - а то текущий элемент не удаляется....
        }
        private void _ui_cmPlanned_Move(object sender, RoutedEventArgs e)
        {
			sPROBA_ERR += "Вошли в _ui_cmPlanned_Move /n/r";
            PlaylistItemSL cFirst = ((List<PlaylistItemSL>)_ui_dgPlanned.ItemsSource)[0];
            DateTime dtFirst = cFirst.dtStartPlanned.AddMinutes(5);
            MsgBox cMsgDate = new MsgBox("Введите новое время выхода ниже:", "Время выхода", MsgBox.MsgBoxButton.OKCancel, dtFirst, dtFirst.AddDays(30), _cPlayListItemCurrent.dtStartPlanned);
            cMsgDate.Closed += new EventHandler(cMsgDate_Closed);
            cMsgDate.Show();
        }
        void cMsgDate_Closed(object sender, EventArgs e)
        {
			sPROBA_ERR += "Вошли в cMsgDate_Closed " + ((MsgBox)sender).enMsgResult.ToString() + " /n/r";
            if (MsgBox.MsgBoxButton.OK == ((MsgBox)sender).enMsgResult)
            {
                _cDBI.PlaylistItemStartsSetAsync(_cPlayListItemCurrent.nID, ((MsgBox)sender).dtSelectedDateTime, _cPlayListItemCurrent.dtStartPlanned);
                _dlgProgress.Show();
            }
        }
        private void _ui_cmPlanned_Add(object sender, RoutedEventArgs e)
        {
            _ui_btnAdd_Click(null, null);
        }
        private void _ui_cmPlanned_Properties(object sender, RoutedEventArgs e)
        {

        }
        private void _ui_cmPlanned_Refresh(object sender, RoutedEventArgs e)
        {
            if (null != _btnActivePlannedFilter)
                Planned_Click(_btnActivePlannedFilter, null);
        }
        private void _ui_cmOnAir_Opened(object sender, RoutedEventArgs e)
        {

        }
        private void _ui_cmOnAir_Refresh(object sender, RoutedEventArgs e)
        {

        }
        private void _ui_cmArch_Opened(object sender, RoutedEventArgs e)
        {

        }
		private void _ui_cmPlannedRecalculatePart_Click(object sender, RoutedEventArgs e)
		{
			_ui_btnRecalculate_Click(null, null);
		}
		private void _ui_cmPlanned_GroupMoving(object sender, RoutedEventArgs e)
		{
			if (0 < _ui_dgPlanned.SelectedItems.Count)
			{
				List<PlaylistItemSL> aPLIs = new List<PlaylistItemSL>();
				foreach (object oPLI in _ui_dgPlanned.SelectedItems)
					aPLIs.Add((PlaylistItemSL)oPLI);
				aPLIs = aPLIs.OrderBy(o => o.dtAdvStart).ToList();

				controls.childs.replica.sl.GroupMovingPLIs dlgGroupMoving;
				dlgGroupMoving = new controls.childs.replica.sl.GroupMovingPLIs(aPLIs);
				dlgGroupMoving.Closed += new EventHandler(dlgGroupMoving_Closed);
				dlgGroupMoving.Show();
			}
		}
		void dlgGroupMoving_Closed(object sender, EventArgs e)
		{
			controls.childs.replica.sl.GroupMovingPLIs dlgGM=(controls.childs.replica.sl.GroupMovingPLIs)sender;
			if (dlgGM.DialogResult ?? false)
			{
				List<PlaylistItemSL> aSLPLIs = ((controls.childs.replica.sl.GroupMovingPLIs)sender).aSLPLIs;
				List<PlaylistItem> aPLIs = new List<PlaylistItem>();
				foreach (PlaylistItemSL cSLPLI in aSLPLIs)
					aPLIs.Add(PlaylistItemSL.GetBase(cSLPLI));
				_cDBI.GroupMovingAsync(aPLIs.ToArray());
			}
		}

        #endregion
        #endregion
        #region DBI
        void Init()
        {
            if (_ui_rpPlanned.IsOpen)
                Planned_Click(_ui_btnToday, null);
            if (_ui_rpAir.IsOpen)
                _ui_btnOnAirRefresh_Click(null, null);
            if (_ui_rpArchived.IsOpen)
                ArchivedToday_Click(null, null);
            if (!_ui_rpPlanned.IsOpen && !_ui_rpAir.IsOpen && !_ui_rpArchived.IsOpen)
                _dlgProgress.Close();
            _cPLTimer = new PlaylistTimer(_cDBI);
            _cPLTimer.Start(_ui_lblCurrentItem, _ui_lblCurrentItemsdtStart, _ui_lblCurrentItemsType, _ui_lblCurrentItemLeft, _ui_lblNextItem, _ui_lblNextItemsdtStert, _ui_lblNextItemsType);  
        }
        void ShowPlanned()
        {
            _ui_dgPlanned.ItemsSource = null;
            _ui_dgPlanned.ItemsSource = _aPlayListItemsPlanned;
            _ui_lblPlannedQty.Content = _aPlayListItemsPlanned.Count.ToString();
            _ui_dgPlanned.RowHeight = _nPlannedRowHeight;
            _ui_dgPlanned.UpdateLayout();
        }
        void _cDBI_PlaylistItemsPlanGetCompleted(object sender, PlaylistItemsPlanGetCompletedEventArgs e)
        {
			long nStart = DateTime.Now.Ticks;
			try
			{
				_ui_lblPlannedQty.Content = "0";
				if (null != e.Result)
				{
					PlaylistItemSL[] aPLI = PlaylistItemSL.GetArrayOfPlaylistItemSLs(e.Result);
					_aPlayListItemsPlanned = new List<PlaylistItemSL>();
					_aPlayListItemsPlanned.AddRange(aPLI);
					PlaylistItemSL cCurrentPLI = null;
					if (null != _cPlayListItemCurrent)
						cCurrentPLI = aPLI.FirstOrDefault(pli => pli.nID == _cPlayListItemCurrent.nID);
					ShowPlanned();
					if (null != cCurrentPLI)
					{
						ScrollTo(cCurrentPLI);
						_ui_dgPlanned.SelectedItem = cCurrentPLI;
					}
				}
			}
			catch { }
            _dlgProgress.Close();
			double nDelta5 = (new TimeSpan(DateTime.Now.Ticks - nStart)).TotalSeconds;
        }
        void _cDBI_PlaylistItemsArchGetCompleted(object sender, PlaylistItemsArchGetCompletedEventArgs e)
        {
			try
			{
				_ui_dgArchived.ItemsSource = null;
				_ui_lblArchivedQty.Content = "0";
				if (null != e.Result)
				{
					PlaylistItemSL[] aPLI = PlaylistItemSL.GetArrayOfPlaylistItemSLs(e.Result);
					_ui_dgArchived.ItemsSource = aPLI;
					_ui_lblArchivedQty.Content = aPLI.Length.ToString();
					_ui_dgArchived.RowHeight = _nArchievedRowHeight;
				}
			}
			catch { }
            _dlgProgress.Close();
        }
        void _cDBI_PlaylistItemsGetCompleted(object sender, PlaylistItemsGetCompletedEventArgs e)
        {
			try
			{
				_ui_dgOnAir.ItemsSource = null;
				_ui_lblOnAirQty.Content = "0";
				if (null != e.Result)
				{
					PlaylistItemSL[] aPLI = PlaylistItemSL.GetArrayOfPlaylistItemSLs(e.Result);
					_ui_dgOnAir.ItemsSource = aPLI;
					_ui_lblOnAirQty.Content = aPLI.Length.ToString();
					_ui_dgOnAir.RowHeight = _nOnAirRowHeight;
				}
			}
			catch { }
            _dlgProgress.Close();
        }
        void _cDBI_PlaylistRecalculateQueryCompleted(object sender, PlaylistRecalculateQueryCompletedEventArgs e)
        {
			try
			{
				if (0 <= e.Result)
					_cDBI.CommandStatusGetAsync(e.Result, e.Result);
				else
				{
					_dlgMsg.Show("Не удалось разместить в БД команду на пересчет!", "Ошибка", MsgBox.MsgBoxButton.OK);
					ResetButtonPLRecalc();
				}
			}
			catch { }
        }
        void _cDBI_CommandStatusGetCompleted(object sender, CommandStatusGetCompletedEventArgs e)
        {
			try
			{
				string sRez;
				if (null == e.Result)
					sRez = "failed";
				else
					sRez = e.Result.sName;
				switch (sRez)
				{
					case "waiting":
					case "proccessing":
						if (null == _cTimerForCommandResult)
						{
							_dtCommandBegin = DateTime.Now.AddMinutes(3);
							_cTimerForCommandResult = new System.Windows.Threading.DispatcherTimer();
							_cTimerForCommandResult.Tick +=
									delegate(object s, EventArgs args)
									{
										_cTimerForCommandResult.Stop();
										_cDBI.CommandStatusGetAsync((int)e.UserState, e.UserState);
									};
							_cTimerForCommandResult.Interval = new TimeSpan(0, 0, 0, 0, 500);
						}
						if (DateTime.Now < _dtCommandBegin)
						{
							_cTimerForCommandResult.Start();
							return;
						}
						else
						{
							_dlgMsg.Show("Произошла ошибка пересчета! Таймаут. (пересчет не был закончен в течение 3-х минут)", "Ошибка", MsgBox.MsgBoxButton.OK);   //ch=child 
							break;
						}
					case "failed":                     // месага об ошибке + вернуть старый файл
						_dlgMsg.Show("Произошла ошибка пересчета!", "Ошибка", MsgBox.MsgBoxButton.OK);   //ch=child 
						break;
					case "succeed":
						//_ui_btnOnAirRefresh_Click(null, null);
						if (_ui_rpPlanned.IsOpen)
							_ui_cmPlanned_Refresh(null, null);
						break;
				}
				ResetButtonPLRecalc();
				_cTimerForCommandResult = null;
			}
			catch { }
        }
        void ResetButtonPLRecalc()
        {
            _ui_lblPLRecalcPartText.Visibility = Visibility.Visible;
            _ui_pbPLRecalcPartProgress.Visibility = Visibility.Collapsed;
        }
        void _cDBI_PlaylistItemsAddCompleted(object sender, System.ComponentModel.AsyncCompletedEventArgs e)
        {
			_cDBI.PlaylistItemAdd_ResultGetAsync();
        }
		void ResetButtonPLImport()
		{
			_ui_lblPLImportText.Visibility = Visibility.Visible;
			_ui_pbPLImportProgress.Visibility = Visibility.Collapsed;
		}
		void _cDBI_PlaylistItemAdd_ResultGetCompleted(object sender, PlaylistItemAdd_ResultGetCompletedEventArgs e)
		{
			try
			{
				string sRez;
				if (null == e.Result)
					sRez = "failed";
				else
					sRez = e.Result;
				switch (sRez)
				{
					case "waiting":
					case "proccessing":
						if (null == _cTimerForPLAddResult)
						{
							_dtPLImportTimeout = DateTime.Now.AddMinutes(10);
							_cTimerForPLAddResult = new System.Windows.Threading.DispatcherTimer();
							_cTimerForPLAddResult.Tick +=
									delegate(object s, EventArgs args)
									{
										_cTimerForPLAddResult.Stop();
										_cDBI.PlaylistItemAdd_ResultGetAsync(e.UserState);
									};
							_cTimerForPLAddResult.Interval = new TimeSpan(0, 0, 0, 0, 500);
						}
						if (DateTime.Now < _dtPLImportTimeout)
						{
							_cTimerForPLAddResult.Start();
							return;
						}
						else
						{
							_dlgMsg.Show("Произошла ошибка добавления! Таймаут. (добавление не произошло в течение 10 минут.)", "Ошибка", MsgBox.MsgBoxButton.OK);   //ch=child 
							break;
						}
					case "failed":                     // месага об ошибке + вернуть старый файл
						_dlgMsg.Show("Произошла ошибка добавления! Смотри лог-файл.", "Ошибка", MsgBox.MsgBoxButton.OK);   //ch=child 
						break;
					case "succeed":
						break;
				}
				ResetButtonPLImport();
				_cTimerForPLAddResult = null;
			}
			catch { }
		}
        void _cDBI_AssetsInseartIntoPlaylistCompleted(object sender, AssetsInseartIntoPlaylistCompletedEventArgs e)
        {
			try
			{
				if (null == e.Result || null == e.UserState)
				{
					_dlgProgress.Close();
					_dlgMsg.Show("Во время вставки элементов произошла неопознанная ошибка!\nРекомендуется обновить плей-лист", "Ошибка!", MsgBox.MsgBoxButton.OK);
					return;
				}
				List<AssetSL> aAss = (List<AssetSL>)e.UserState;
				List<PlaylistItemSL> aItemsToIns = new List<PlaylistItemSL>();
				List<string> aNotInserted = new List<string>();
				int nInsIndex = _aPlayListItemsPlanned.IndexOf(_cPlayListItemCurrent);
				for (int ni = 0; aAss.Count > ni; ni++)
					if (-1 < e.Result[ni])
						aItemsToIns.Add(new PlaylistItemSL() { dtTimingsUpdate = DateTime.MaxValue, cAsset = aAss[ni], cClass = aAss[ni].cClass, nFrameStop = aAss[ni].nFrameOut, nFrameStart = aAss[ni].nFrameIn, sName = aAss[ni].sName, nID = e.Result[ni], stFile = aAss[ni].stFile });
					else
						aNotInserted.Add(aAss[ni].sName);
				if (0 < aNotInserted.Count)
				{
					ListBox lb = new ListBox();
					lb.ItemsSource = aNotInserted;
					_dlgMsg.Show("Во время вставки элементов произошли ошибки!\nСледующие элементы не были вставлены:", "Ошибка!", MsgBox.MsgBoxButton.OK, lb);
				}
				if (0 < aItemsToIns.Count)
				{
					DateTime dtHardSoft = DateTime.MaxValue > _aPlayListItemsPlanned[nInsIndex].dtStartHard ? _aPlayListItemsPlanned[nInsIndex].dtStartHard : _aPlayListItemsPlanned[nInsIndex].dtStartSoft;
					if (DateTime.MaxValue > dtHardSoft)
					{
						nInsIndex = LastItemInBlock(_aPlayListItemsPlanned, nInsIndex);
					}
					_aPlayListItemsPlanned.InsertRange(nInsIndex + 1, (IEnumerable<PlaylistItemSL>)aItemsToIns);
					PlaylistItemSL cPLI = _cPlayListItemCurrent;
					ShowPlanned();
					_ui_dgPlanned.SelectedItem = cPLI;
					ScrollTo(cPLI);
				}
			}
			catch { }
			_dlgProgress.Close();
        }
		private int LastItemInBlock(List<PlaylistItemSL> aPLIs, int nBlockPLIIndex)
		{
			int nPrevInd = nBlockPLIIndex;
			int nNextInd = nPrevInd;
			DateTime dtPrevHardSoft = DateTime.MaxValue > aPLIs[nPrevInd].dtStartHard ? aPLIs[nPrevInd].dtStartHard : aPLIs[nPrevInd].dtStartSoft;
			DateTime dtNextHardSoft = dtPrevHardSoft;

			while ((nNextInd == nPrevInd || 1 == dtNextHardSoft.Subtract(dtPrevHardSoft).TotalSeconds) && aPLIs.Count > nNextInd)
			{
				dtPrevHardSoft = dtNextHardSoft;
				nPrevInd = nNextInd;
				while (aPLIs.Count > nNextInd)
				{
					nNextInd++;
					dtNextHardSoft = DateTime.MaxValue > aPLIs[nNextInd].dtStartHard ? aPLIs[nNextInd].dtStartHard : aPLIs[nNextInd].dtStartSoft;
					if (DateTime.MaxValue > dtNextHardSoft)
						break;
				}
			}
			return nPrevInd;
		}
		#region контекстное меню
        void _cDBI_PlaylistItemStartsSetCompleted(object sender, PlaylistItemStartsSetCompletedEventArgs e)
        {
			sPROBA_ERR += "Вошли в _cDBI_PlaylistItemStartsSetCompleted " + e.Result + " /n/r";
            if (DateTime.MaxValue == e.Result)
				_dlgMsg.Show(sPROBA_ERR + "Внимание! Изменение времени старта элемента произошло с ошибкой!", "ОШИБКА!", MsgBox.MsgBoxButton.OK);
            else
            {
                _cPlayListItemCurrent.dtStartPlanned = e.Result;
                _aPlayListItemsPlanned.Remove(_cPlayListItemCurrent);
                PlaylistItemSL cLast = _aPlayListItemsPlanned.LastOrDefault(o => o.dtStartPlanned < _cPlayListItemCurrent.dtStartPlanned);
				if (null != cLast)
					_aPlayListItemsPlanned.Insert(_aPlayListItemsPlanned.IndexOf(cLast) + 1, _cPlayListItemCurrent);
                ShowPlanned();
            }
            _dlgProgress.Close();
			_cDBI.PathDetermine_PROBA3Async("123456");
			sPROBA_ERR = "";
        }
        void _cDBI_PlaylistItemsDeleteCompleted(object sender, PlaylistItemsDeleteCompletedEventArgs e)
        {
            _ui_lblPlannedQty.Content = "0";
            if (null == e.Result || null == e.UserState)
            {
                _dlgMsg.Show("При удалении произошла ошибка!", "Ошибка!", MsgBox.MsgBoxButton.OK);
                _dlgProgress.Close();
                return;
            }
            int nScrollID;
            List<IdNamePair> aDeleted = (List<IdNamePair>)e.UserState;
            if (0 < e.Result.Length)  // не все удалились
            {
                MsgBox dlgRes = new MsgBox();
                ListBox ui_lbErr = new ListBox();
                ui_lbErr.ItemsSource = e.Result;
                ui_lbErr.SetBinding(ListBox.ItemsSourceProperty, new Binding("sName"));
                dlgRes.Show("При удалении из БД этих элементов произошли ошибки!", "Ошибка!", MsgBox.MsgBoxButton.OK, ui_lbErr);
                nScrollID = e.Result[0].nID; // первый неудаленный
            }
            else
            {
				nScrollID = helper.FindPrevItemID(_ui_dgPlanned.ItemsSource, typeof(PlaylistItemSL), "nID", ((List<IdNamePair>)e.UserState)[0].nID);
            }
            foreach (IdNamePair cID in aDeleted)  // удаляем кроме неудаленных
            {
                if (e.Result.Contains(cID))
                    continue;
                try
                {
                    _aPlayListItemsPlanned.Remove(_aPlayListItemsPlanned.FirstOrDefault(o => o.nID == cID.nID));
                }
                catch { }
            }
			if (0 > nScrollID && 0 < _aPlayListItemsPlanned.Count)
				nScrollID = _aPlayListItemsPlanned[0].nID;
            ShowPlanned();
            ScrollTo(nScrollID);
            _dlgProgress.Close();
        }
        void _cDBI_PlaylistItemsDeleteSinceCompleted(object sender, PlaylistItemsDeleteSinceCompletedEventArgs e)
        {
            if (e.Result == -1)
            {
                _dlgMsg.Show("Удаляемый диапазон содержит закешированные элементы. Попробуйте обновить плей-лист.", "Ошибка", MsgBox.MsgBoxButton.OK);
                _dlgProgress.Close();
            }
            else
            {
                if (e.Result > 0)
                    _dlgMsg.Show("Во время удаления некоторые (" + e.Result + ") элменты не были удалены!", "Ошибка", MsgBox.MsgBoxButton.OK);
                Planned_Click(_btnActivePlannedFilter, null);
            }
        }
		void _cDBI_GroupMovingCompleted(object sender, GroupMovingCompletedEventArgs e)
		{
			_dlgProgress.Close();
			if (!e.Result)
				_dlgMsg.Show("Произошла ошибка при внесении данных в БД.", "ОШИБКА", MsgBox.MsgBoxButton.OK);
		}
        void ScrollTo(int nID)
        {
            PlaylistItemSL cPLI = _aPlayListItemsPlanned.FirstOrDefault(ass => ass.nID == nID);
            if (null != cPLI)
                ScrollTo(cPLI);
        }
        void ScrollTo(PlaylistItemSL cPLI)
        {
            try
            {
                List<PlaylistItemSL> aAss = (List<PlaylistItemSL>)_ui_dgPlanned.ItemsSource;
                int ni = ((List<PlaylistItemSL>)_ui_dgPlanned.ItemsSource).ToList().IndexOf(cPLI);
                int nj = ni + 5 > aAss.Count - 1 ? aAss.Count - 1 : ni + 5;
                _ui_dgPlanned.ScrollIntoView(aAss[nj], _ui_dgPlanned.Columns[0]);
                _ui_dgPlanned.SelectedItem = cPLI;
            }
            catch { }
        }
        #endregion


        #endregion

        #endregion
    }
    public class PlaylistItemSL : PlaylistItem
    {
		public string sDuration
		{
			get
			{
				string sDelta = "";
				if (1 < nFrameStart || nFramesQty > nFrameStop)
					sDelta = " (" + (nFrameStart - 1 + nFramesQty - nFrameStop).ToFramesString(true) + ")";
				return nDuration.ToFramesString(true) + sDelta;
			}
			set { }
        }
        public int nDuration
        {
            get { return nFrameStop - nFrameStart + 1; }
            set { }
        }
		public DateTime dtAdvStart
		{
			get
			{
				return (DateTime.MaxValue > dtStartHard || DateTime.MaxValue > dtStartSoft ? DateTime.MaxValue > dtStartHard ? dtStartHard : dtStartSoft : dtStartPlanned);
			}
		}
        public DateTime dtStart
        {
            get
            {
                return (DateTime.MaxValue == dtStartReal ? dtStartPlanned : dtStartReal);
            }
        }
        public string sdtStart
        {
            get { return dtStart.Date.ToString("yyyy-MM-dd") + "     " + dtStart.ToString("HH:mm:ss"); }
            set { }
        }
        public string sRotationName
        {
            get
            {
				if (cAsset is replica.sl.services.dbinteract.Clip && null != ((replica.sl.services.dbinteract.Clip)cAsset).cRotation)
					return ((replica.sl.services.dbinteract.Clip)cAsset).cRotation.sName;
                else
                    return "";
            }
            set { }
        }
		public bool bIsInserted
		{
			get
			{
				if (DateTime.MinValue == dtTimingsUpdate || DateTime.MaxValue == dtTimingsUpdate)
					return true;
				else
					return false;
			}
		}
        static public PlaylistItemSL GetPlaylistItemSL(PlaylistItem cPLI)
        {
            PlaylistItemSL cRetVal = new PlaylistItemSL()
            {
                bCached = cPLI.bCached,
                bIsAdv = cPLI.bIsAdv,
                bPlug = cPLI.bPlug,
                cAsset = cPLI.cAsset,
                cClass = cPLI.cClass,
                cStatus = cPLI.cStatus,
                dtStartHard = cPLI.dtStartHard,
                dtStartPlanned = cPLI.dtStartPlanned,
                dtStartReal = cPLI.dtStartReal,
                dtStartSoft = cPLI.dtStartSoft,
                dtStopReal = cPLI.dtStopReal,
                dtTimingsUpdate = cPLI.dtTimingsUpdate,
                nFrameCurrent = cPLI.nFrameCurrent,
                nFramesQty = cPLI.nFramesQty,
                nFrameStart = cPLI.nFrameStart,
                nFrameStop = cPLI.nFrameStop,
                nID = cPLI.nID,
                sName = cPLI.sName,
                sNote = cPLI.sNote,
                stFile = cPLI.stFile
            };
            return cRetVal;
        }
        static public PlaylistItem GetBase(PlaylistItemSL cPLI)
        {
            PlaylistItem cRetVal = new PlaylistItem()
            {
                bCached = cPLI.bCached,
                bIsAdv = cPLI.bIsAdv,
                bPlug = cPLI.bPlug,
                cAsset = cPLI.cAsset,
                cClass = cPLI.cClass,
                cStatus = cPLI.cStatus,
                dtStartHard = cPLI.dtStartHard,
                dtStartPlanned = cPLI.dtStartPlanned,
                dtStartReal = cPLI.dtStartReal,
                dtStartSoft = cPLI.dtStartSoft,
                dtStopReal = cPLI.dtStopReal,
                dtTimingsUpdate = cPLI.dtTimingsUpdate,
                nFrameCurrent = cPLI.nFrameCurrent,
                nFramesQty = cPLI.nFramesQty,
                nFrameStart = cPLI.nFrameStart,
                nFrameStop = cPLI.nFrameStop,
                nID = cPLI.nID,
                sName = cPLI.sName,
                sNote = cPLI.sNote,
                stFile = cPLI.stFile
            };
            return cRetVal;
        }
        static public PlaylistItemSL[] GetArrayOfPlaylistItemSLs(PlaylistItem[] aPLI)
        {
            PlaylistItemSL[] aRes = new PlaylistItemSL[aPLI.Length];
            for (int ni = 0; aPLI.Length > ni; ni++)
            {
                aRes[ni] = GetPlaylistItemSL(aPLI[ni]);
            }
            return aRes;
        }
    }
}
